{
  "matrices": [
    {
      "title": "Basic Conformance",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Conforming document (compliance): VCDM \"MUST be enforced.\" (\"all relevant normative statements in Sections 4. Basic Concepts, 5. Advanced Concepts, and 6. Syntaxes\")",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "ReRGV82ga25DCopTyGYpT",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc));\n        await assert.rejects(endpoints.verifyVp(doc));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "ReRGV82ga25DCopTyGYpT",
              "ctx": null,
              "_testId": "urn:uuid:f68ecc78-7b6e-4dfa-92ac-63bec238974c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 396,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ReRGV82ga25DCopTyGYpT",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nB8zBAq2SKnAvuYV1ow5j",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:c3b8bb22-4973-4c71-9b93-9c40a7192082"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Conforming document (compliance): VCDM \"MUST be enforced.\" (\"all relevant normative statements in Sections 4. Basic Concepts, 5. Advanced Concepts, and 6. Syntaxes\")",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4hhRJuGrv_kP2HfmIIz9a",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc));\n        await assert.rejects(endpoints.verifyVp(doc));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4hhRJuGrv_kP2HfmIIz9a",
              "ctx": null,
              "_testId": "urn:uuid:36b1c117-2638-47ce-9121-fea835a0ec68",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4hhRJuGrv_kP2HfmIIz9a",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nB8zBAq2SKnAvuYV1ow5j",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:6af3f95d-4e30-47e5-b06d-c2897d07fb42"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:aff555d2-991a-4859-a761-c6d03c8e57c6",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "verifiers MUST produce errors when non-conforming documents are detected.",
          "cells": [
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc));\n        await assert.rejects(endpoints.verifyVp(doc));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "ReRGV82ga25DCopTyGYpT",
              "ctx": null,
              "_testId": "urn:uuid:f68ecc78-7b6e-4dfa-92ac-63bec238974c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 396,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc));\n        await assert.rejects(endpoints.verifyVp(doc));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4hhRJuGrv_kP2HfmIIz9a",
              "ctx": null,
              "_testId": "urn:uuid:36b1c117-2638-47ce-9121-fea835a0ec68",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Contexts",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:0aa878ff-4a93-4ad2-b2a9-cd88a7144de4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 602,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:8ecf2302-a783-4047-98ba-7c2afb449d4f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']));\n        assert.strictEqual(vc['@context'][0], baseContextUrl);\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:bef6b10e-b35c-439d-9561-fd365af48ab8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']));\n        assert.strictEqual(vp['@context'][0], baseContextUrl);\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:73df5e60-26bf-4d4b-b904-472535f05bd6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20array%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:f1030ee9-b275-4b67-8d05-44f190dfb5b5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20array%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 808,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "_us1lX2SuKKOO2eS264BW",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:c5b3bed1-4ec5-493b-9afa-d07697c7197d"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:7bf7bddf-96b0-458f-984d-4be174864059",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 675,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:945e0527-6b22-4cb5-a835-db21e1875235",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']));\n        assert.strictEqual(vc['@context'][0], baseContextUrl);\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:1960de5a-1675-45c0-8c46-3d0bec2e0f88",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3408,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 378,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']));\n        assert.strictEqual(vp['@context'][0], baseContextUrl);\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:16215bb2-785a-4700-9f50-4f83a0e0eb58",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20array%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:b7950f17-8596-43c6-8d7a-db71abb7c239",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20array%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3944,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 688,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "_us1lX2SuKKOO2eS264BW",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:a0604404-6692-42bd-893c-0cc56e4c9d83"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:12df7c0e-7e02-4b7b-8d5a-803a2d3e5c06",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "Verifiable credentials MUST include a @context property.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:0aa878ff-4a93-4ad2-b2a9-cd88a7144de4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 602,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:7bf7bddf-96b0-458f-984d-4be174864059",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 675,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable presentations MUST include a @context property.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:8ecf2302-a783-4047-98ba-7c2afb449d4f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:945e0527-6b22-4cb5-a835-db21e1875235",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']));\n        assert.strictEqual(vc['@context'][0], baseContextUrl);\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:bef6b10e-b35c-439d-9561-fd365af48ab8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']));\n        assert.strictEqual(vc['@context'][0], baseContextUrl);\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:1960de5a-1675-45c0-8c46-3d0bec2e0f88",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3408,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 378,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']));\n        assert.strictEqual(vp['@context'][0], baseContextUrl);\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:73df5e60-26bf-4d4b-b904-472535f05bd6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']));\n        assert.strictEqual(vp['@context'][0], baseContextUrl);\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:16215bb2-785a-4700-9f50-4f83a0e0eb58",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20array%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "emPGKNd4vq08PDRuBTWNk",
              "ctx": null,
              "_testId": "urn:uuid:f1030ee9-b275-4b67-8d05-44f190dfb5b5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20array%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 808,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20array%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jbfBYW5xQxPn0vOmervGw",
              "ctx": null,
              "_testId": "urn:uuid:b7950f17-8596-43c6-8d7a-db71abb7c239",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credential @context: \"Subsequent items in the array MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20array%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3944,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 688,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Identifiers",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20express%20an%20identifier%20that%20others%20are%20expected%20to%20use%20when%20expressing%20statements%20about%20a%20specific%20thing%20identified%20by%20that%20identifier.`;\n        await endpoints.issue(require('./input/credential-id-other-ok.json'));\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "_testId": "urn:uuid:7acc1351-56f0-4949-be44-75f57459a4e4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20express%20an%20identifier%20that%20others%20are%20expected%20to%20use%20when%20expressing%20statements%20about%20a%20specific%20thing%20identified%20by%20that%20identifier.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4632,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "if present: \"The id property MUST NOT have more than one value.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20NOT%20have%20more%20than%20one%20value.`;\n        await endpoints.issue(require(\n          './input/credential-single-id-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-subject-single-id-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-multi-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-multi-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "_testId": "urn:uuid:a32194c8-aab2-458b-9686-efa202c74af2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if present: \"The id property MUST NOT have more than one value.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20NOT%20have%20more%20than%20one%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 600,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20URL%20which%20MAY%20be%20dereferenced.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-not-url-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "_testId": "urn:uuid:e2722cf2-9541-4a1b-8847-f0ba8505d917",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20URL%20which%20MAY%20be%20dereferenced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5484,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the id property MUST be a single URL.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-nonsingle-id-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "_testId": "urn:uuid:43f97940-2491-42e3-9d64-75204ad6f247",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the id property MUST be a single URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "T3OC-0fHlcLcD2ghGydRn",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:9676742b-8daa-4c72-a7f7-99c57817f314"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20express%20an%20identifier%20that%20others%20are%20expected%20to%20use%20when%20expressing%20statements%20about%20a%20specific%20thing%20identified%20by%20that%20identifier.`;\n        await endpoints.issue(require('./input/credential-id-other-ok.json'));\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "_testId": "urn:uuid:9aaa3eda-9800-4746-98f9-d22d459f7a45",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20express%20an%20identifier%20that%20others%20are%20expected%20to%20use%20when%20expressing%20statements%20about%20a%20specific%20thing%20identified%20by%20that%20identifier.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "if present: \"The id property MUST NOT have more than one value.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20NOT%20have%20more%20than%20one%20value.`;\n        await endpoints.issue(require(\n          './input/credential-single-id-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-subject-single-id-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-multi-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-multi-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "_testId": "urn:uuid:66818935-94cc-443f-b8fc-41a373c1c72b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if present: \"The id property MUST NOT have more than one value.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20NOT%20have%20more%20than%20one%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5811,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 540,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20URL%20which%20MAY%20be%20dereferenced.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-not-url-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "_testId": "urn:uuid:3626bd6d-7aae-481b-9e56-f7e22f043b6e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20URL%20which%20MAY%20be%20dereferenced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the id property MUST be a single URL.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-nonsingle-id-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "_testId": "urn:uuid:5f1dc887-57d2-4ec1-a3bc-012fb95bd473",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the id property MUST be a single URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "T3OC-0fHlcLcD2ghGydRn",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:91b471e3-955a-4e50-b2d8-a30f65fb584e"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:59436351-c0c2-4c54-9123-1ac9c61e1392",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\"",
          "cells": [
            {
              "type": "test",
              "title": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20express%20an%20identifier%20that%20others%20are%20expected%20to%20use%20when%20expressing%20statements%20about%20a%20specific%20thing%20identified%20by%20that%20identifier.`;\n        await endpoints.issue(require('./input/credential-id-other-ok.json'));\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "_testId": "urn:uuid:7acc1351-56f0-4949-be44-75f57459a4e4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20express%20an%20identifier%20that%20others%20are%20expected%20to%20use%20when%20expressing%20statements%20about%20a%20specific%20thing%20identified%20by%20that%20identifier.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4632,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 252,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20express%20an%20identifier%20that%20others%20are%20expected%20to%20use%20when%20expressing%20statements%20about%20a%20specific%20thing%20identified%20by%20that%20identifier.`;\n        await endpoints.issue(require('./input/credential-id-other-ok.json'));\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "_testId": "urn:uuid:9aaa3eda-9800-4746-98f9-d22d459f7a45",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if present: \"The id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20express%20an%20identifier%20that%20others%20are%20expected%20to%20use%20when%20expressing%20statements%20about%20a%20specific%20thing%20identified%20by%20that%20identifier.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "if present: \"The id property MUST NOT have more than one value.\"",
          "cells": [
            {
              "type": "test",
              "title": "if present: \"The id property MUST NOT have more than one value.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20NOT%20have%20more%20than%20one%20value.`;\n        await endpoints.issue(require(\n          './input/credential-single-id-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-subject-single-id-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-multi-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-multi-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "_testId": "urn:uuid:a32194c8-aab2-458b-9686-efa202c74af2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if present: \"The id property MUST NOT have more than one value.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20NOT%20have%20more%20than%20one%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 600,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "if present: \"The id property MUST NOT have more than one value.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20NOT%20have%20more%20than%20one%20value.`;\n        await endpoints.issue(require(\n          './input/credential-single-id-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-subject-single-id-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-multi-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-multi-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "_testId": "urn:uuid:66818935-94cc-443f-b8fc-41a373c1c72b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if present: \"The id property MUST NOT have more than one value.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20id%20property%20MUST%20NOT%20have%20more%20than%20one%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5811,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 540,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\"",
          "cells": [
            {
              "type": "test",
              "title": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20URL%20which%20MAY%20be%20dereferenced.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-not-url-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "_testId": "urn:uuid:e2722cf2-9541-4a1b-8847-f0ba8505d917",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20URL%20which%20MAY%20be%20dereferenced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5484,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20URL%20which%20MAY%20be%20dereferenced.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-not-url-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "_testId": "urn:uuid:3626bd6d-7aae-481b-9e56-f7e22f043b6e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if present: \"The value of the id property MUST be a URL which MAY be dereferenced.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20URL%20which%20MAY%20be%20dereferenced.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "The value of the id property MUST be a single URL.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the id property MUST be a single URL.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-nonsingle-id-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "pH3G6ci99bp1Kcqz119oR",
              "ctx": null,
              "_testId": "urn:uuid:43f97940-2491-42e3-9d64-75204ad6f247",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the id property MUST be a single URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the id property MUST be a single URL.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-nonsingle-id-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YqvtBR2PQBwJnkiabV2Jq",
              "ctx": null,
              "_testId": "urn:uuid:5f1dc887-57d2-4ec1-a3bc-012fb95bd473",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the id property MUST be a single URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#identifiers:~:text=The%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST have a type property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.`;\n          await assert.rejects(\n            endpoints.issue(require('./input/credential-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:86b1ab79-a1a1-4de0-b08e-65c4bf39c5ce",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST have a type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST have a type property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.`;\n          await assert.rejects(endpoints.verifyVp(require(\n            './input/presentation-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:4333c1f4-ca59-4fe6-b734-7c1501af969b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST have a type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6501,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%2C%20or%20map%20to%20(through%20interpretation%20of%20the%20%40context%20property)%2C%20one%20or%20more%20URLs.`;\n        // type is URL: OK\n        await endpoints.issue(require('./input/credential-type-url-ok.json'));\n        // type mapping to URL: OK\n        await endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json'));\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')));\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:6851adb4-95d5-4da0-931f-035095607eeb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%2C%20or%20map%20to%20(through%20interpretation%20of%20the%20%40context%20property)%2C%20one%20or%20more%20URLs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 731,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20URL%20is%20provided%2C%20the%20URLs%20MUST%20be%20interpreted%20as%20an%20unordered%20set.`;\n        //issue VC with multiple urls in type property\n        await endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json'));\n        //issue another VC with same urls in a different order\n        await endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:361d1b6f-352b-4b99-a0c6-f50d78e6623b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20URL%20is%20provided%2C%20the%20URLs%20MUST%20be%20interpreted%20as%20an%20unordered%20set.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 608,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "list: \"objects that MUST have a type specified.\"",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          // (Verifiable) credential requires type VerifiableCredential\n          // (Verifiable) presentation requires type VerifiablePresentation\n          // Additional (more specific) types for these are optional.\n          // Missing type property is tested separately.\n          await endpoints.issue(require(\n            './input/credential-optional-type-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')));\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          );\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')));\n          // Other objects requiring type: proof, credentialStatus, termsOfUse,\n          // and evidence.\n          // Note: testing proof requires the issuer to allow the input\n          // credential to have an existing proof property.\n          await endpoints.issue(require('./input/credential-proof-ok.json'));\n          await assert.rejects(endpoints.verify(require(\n            './input/credential-proof-missing-type-fail.json')));\n          await endpoints.issue(require('./input/credential-status-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')));\n          await endpoints.issue(require(\n            './input/credential-termsofuse-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')));\n          await endpoints.issue(require('./input/credential-evidence-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:dabcbf87-2a1c-4c6c-a794-01fc5e4a56cb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "list: \"objects that MUST have a type specified.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7890,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 893,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-30T05:05:45Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uP_o4NgEkNZwkjHtqVvucQg\",\"proofValue\":\"z5iTYJGoMxRjqz27vtdJvaR2geQTAtp6xvCBFL85Pf8LfNMCdF71sij25oFZTVaxxC9VxSZG3DFLnvDReWUExWj8k\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uP_o4NgEkNZwkjHtqVvucQg\"}}",
                  "method": "POST",
                  "json": {
                    "verifiablePresentation": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2",
                        {
                          "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                        }
                      ],
                      "type": [
                        "VerifiablePresentation",
                        "CredentialManagerPresentation"
                      ],
                      "proof": {
                        "type": "DataIntegrityProof",
                        "created": "2024-06-30T05:05:45Z",
                        "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                        "cryptosuite": "eddsa-2022",
                        "proofPurpose": "authentication",
                        "challenge": "uP_o4NgEkNZwkjHtqVvucQg",
                        "proofValue": "z5iTYJGoMxRjqz27vtdJvaR2geQTAtp6xvCBFL85Pf8LfNMCdF71sij25oFZTVaxxC9VxSZG3DFLnvDReWUExWj8k"
                      }
                    },
                    "options": {
                      "checks": [
                        "proof"
                      ],
                      "challenge": "uP_o4NgEkNZwkjHtqVvucQg"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                "status": 400,
                "data": {
                  "checks": [
                    "PROOF",
                    "INVALID_PROOF_CONFIGURATION"
                  ],
                  "warnings": [],
                  "errors": []
                }
              }
            },
            {
              "type": "test",
              "title": "All credentials, presentations, and encapsulated objects SHOULD specify, or be associated with, additional more narrow types (like ExampleDegreeCredential, for example) so software systems can more easily detect and process this additional information.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dMkQLenMrghDkcoXVkX3c",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:9dd43653-3a64-40d8-89d2-11748398831c"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST have a type property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.`;\n          await assert.rejects(\n            endpoints.issue(require('./input/credential-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:a92f369e-9bbe-45ba-83dc-a3f61cedea22",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST have a type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST have a type property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.`;\n          await assert.rejects(endpoints.verifyVp(require(\n            './input/presentation-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:63b78965-78cf-4955-a59a-2429d4c498df",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST have a type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8828,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 339,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%2C%20or%20map%20to%20(through%20interpretation%20of%20the%20%40context%20property)%2C%20one%20or%20more%20URLs.`;\n        // type is URL: OK\n        await endpoints.issue(require('./input/credential-type-url-ok.json'));\n        // type mapping to URL: OK\n        await endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json'));\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')));\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:4384e963-862a-4a8a-9eed-2162a60e6771",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%2C%20or%20map%20to%20(through%20interpretation%20of%20the%20%40context%20property)%2C%20one%20or%20more%20URLs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20URL%20is%20provided%2C%20the%20URLs%20MUST%20be%20interpreted%20as%20an%20unordered%20set.`;\n        //issue VC with multiple urls in type property\n        await endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json'));\n        //issue another VC with same urls in a different order\n        await endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:6f6b7120-a303-4d51-902c-aa88b7ee66d4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20URL%20is%20provided%2C%20the%20URLs%20MUST%20be%20interpreted%20as%20an%20unordered%20set.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "list: \"objects that MUST have a type specified.\"",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          // (Verifiable) credential requires type VerifiableCredential\n          // (Verifiable) presentation requires type VerifiablePresentation\n          // Additional (more specific) types for these are optional.\n          // Missing type property is tested separately.\n          await endpoints.issue(require(\n            './input/credential-optional-type-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')));\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          );\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')));\n          // Other objects requiring type: proof, credentialStatus, termsOfUse,\n          // and evidence.\n          // Note: testing proof requires the issuer to allow the input\n          // credential to have an existing proof property.\n          await endpoints.issue(require('./input/credential-proof-ok.json'));\n          await assert.rejects(endpoints.verify(require(\n            './input/credential-proof-missing-type-fail.json')));\n          await endpoints.issue(require('./input/credential-status-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')));\n          await endpoints.issue(require(\n            './input/credential-termsofuse-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')));\n          await endpoints.issue(require('./input/credential-evidence-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:92c93032-3daa-4422-8f96-a866d2654ba4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "list: \"objects that MUST have a type specified.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9625,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 810,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "All credentials, presentations, and encapsulated objects SHOULD specify, or be associated with, additional more narrow types (like ExampleDegreeCredential, for example) so software systems can more easily detect and process this additional information.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dMkQLenMrghDkcoXVkX3c",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:18c09a2a-a7c2-45c0-8951-f9b72423edb5"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:6e0db2da-fb68-4acb-8732-eb4c3ecf79d7",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "Verifiable credentials MUST have a type property.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST have a type property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.`;\n          await assert.rejects(\n            endpoints.issue(require('./input/credential-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:86b1ab79-a1a1-4de0-b08e-65c4bf39c5ce",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST have a type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST have a type property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.`;\n          await assert.rejects(\n            endpoints.issue(require('./input/credential-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:a92f369e-9bbe-45ba-83dc-a3f61cedea22",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST have a type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "Verifiable presentations MUST have a type property.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations MUST have a type property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.`;\n          await assert.rejects(endpoints.verifyVp(require(\n            './input/presentation-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:4333c1f4-ca59-4fe6-b734-7c1501af969b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST have a type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6501,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST have a type property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.`;\n          await assert.rejects(endpoints.verifyVp(require(\n            './input/presentation-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:63b78965-78cf-4955-a59a-2429d4c498df",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST have a type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20have%20a%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8828,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 339,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%2C%20or%20map%20to%20(through%20interpretation%20of%20the%20%40context%20property)%2C%20one%20or%20more%20URLs.`;\n        // type is URL: OK\n        await endpoints.issue(require('./input/credential-type-url-ok.json'));\n        // type mapping to URL: OK\n        await endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json'));\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')));\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:6851adb4-95d5-4da0-931f-035095607eeb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%2C%20or%20map%20to%20(through%20interpretation%20of%20the%20%40context%20property)%2C%20one%20or%20more%20URLs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 731,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%2C%20or%20map%20to%20(through%20interpretation%20of%20the%20%40context%20property)%2C%20one%20or%20more%20URLs.`;\n        // type is URL: OK\n        await endpoints.issue(require('./input/credential-type-url-ok.json'));\n        // type mapping to URL: OK\n        await endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json'));\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')));\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:4384e963-862a-4a8a-9eed-2162a60e6771",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URLs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%2C%20or%20map%20to%20(through%20interpretation%20of%20the%20%40context%20property)%2C%20one%20or%20more%20URLs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\"",
          "cells": [
            {
              "type": "test",
              "title": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20URL%20is%20provided%2C%20the%20URLs%20MUST%20be%20interpreted%20as%20an%20unordered%20set.`;\n        //issue VC with multiple urls in type property\n        await endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json'));\n        //issue another VC with same urls in a different order\n        await endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:361d1b6f-352b-4b99-a0c6-f50d78e6623b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20URL%20is%20provided%2C%20the%20URLs%20MUST%20be%20interpreted%20as%20an%20unordered%20set.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 608,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20URL%20is%20provided%2C%20the%20URLs%20MUST%20be%20interpreted%20as%20an%20unordered%20set.`;\n        //issue VC with multiple urls in type property\n        await endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json'));\n        //issue another VC with same urls in a different order\n        await endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:6f6b7120-a303-4d51-902c-aa88b7ee66d4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "type property: \"If more than one URL is provided, the URLs MUST be interpreted as an unordered set.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20URL%20is%20provided%2C%20the%20URLs%20MUST%20be%20interpreted%20as%20an%20unordered%20set.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "list: \"objects that MUST have a type specified.\"",
          "cells": [
            {
              "type": "test",
              "title": "list: \"objects that MUST have a type specified.\"",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          // (Verifiable) credential requires type VerifiableCredential\n          // (Verifiable) presentation requires type VerifiablePresentation\n          // Additional (more specific) types for these are optional.\n          // Missing type property is tested separately.\n          await endpoints.issue(require(\n            './input/credential-optional-type-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')));\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          );\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')));\n          // Other objects requiring type: proof, credentialStatus, termsOfUse,\n          // and evidence.\n          // Note: testing proof requires the issuer to allow the input\n          // credential to have an existing proof property.\n          await endpoints.issue(require('./input/credential-proof-ok.json'));\n          await assert.rejects(endpoints.verify(require(\n            './input/credential-proof-missing-type-fail.json')));\n          await endpoints.issue(require('./input/credential-status-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')));\n          await endpoints.issue(require(\n            './input/credential-termsofuse-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')));\n          await endpoints.issue(require('./input/credential-evidence-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "NMY_riBfbrDF4B4lgPy2C",
              "ctx": null,
              "_testId": "urn:uuid:dabcbf87-2a1c-4c6c-a794-01fc5e4a56cb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "list: \"objects that MUST have a type specified.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7890,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 893,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-30T05:05:45Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uP_o4NgEkNZwkjHtqVvucQg\",\"proofValue\":\"z5iTYJGoMxRjqz27vtdJvaR2geQTAtp6xvCBFL85Pf8LfNMCdF71sij25oFZTVaxxC9VxSZG3DFLnvDReWUExWj8k\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uP_o4NgEkNZwkjHtqVvucQg\"}}",
                  "method": "POST",
                  "json": {
                    "verifiablePresentation": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2",
                        {
                          "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                        }
                      ],
                      "type": [
                        "VerifiablePresentation",
                        "CredentialManagerPresentation"
                      ],
                      "proof": {
                        "type": "DataIntegrityProof",
                        "created": "2024-06-30T05:05:45Z",
                        "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                        "cryptosuite": "eddsa-2022",
                        "proofPurpose": "authentication",
                        "challenge": "uP_o4NgEkNZwkjHtqVvucQg",
                        "proofValue": "z5iTYJGoMxRjqz27vtdJvaR2geQTAtp6xvCBFL85Pf8LfNMCdF71sij25oFZTVaxxC9VxSZG3DFLnvDReWUExWj8k"
                      }
                    },
                    "options": {
                      "checks": [
                        "proof"
                      ],
                      "challenge": "uP_o4NgEkNZwkjHtqVvucQg"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                "status": 400,
                "data": {
                  "checks": [
                    "PROOF",
                    "INVALID_PROOF_CONFIGURATION"
                  ],
                  "warnings": [],
                  "errors": []
                }
              }
            },
            {
              "type": "test",
              "title": "list: \"objects that MUST have a type specified.\"",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          // (Verifiable) credential requires type VerifiableCredential\n          // (Verifiable) presentation requires type VerifiablePresentation\n          // Additional (more specific) types for these are optional.\n          // Missing type property is tested separately.\n          await endpoints.issue(require(\n            './input/credential-optional-type-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')));\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          );\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')));\n          // Other objects requiring type: proof, credentialStatus, termsOfUse,\n          // and evidence.\n          // Note: testing proof requires the issuer to allow the input\n          // credential to have an existing proof property.\n          await endpoints.issue(require('./input/credential-proof-ok.json'));\n          await assert.rejects(endpoints.verify(require(\n            './input/credential-proof-missing-type-fail.json')));\n          await endpoints.issue(require('./input/credential-status-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')));\n          await endpoints.issue(require(\n            './input/credential-termsofuse-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')));\n          await endpoints.issue(require('./input/credential-evidence-ok.json'));\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FzrjO9h_-E-vXrp3bTAar",
              "ctx": null,
              "_testId": "urn:uuid:92c93032-3daa-4422-8f96-a866d2654ba4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "list: \"objects that MUST have a type specified.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9625,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 810,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Names and Descriptions",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "_testId": "urn:uuid:1210a1d2-bc35-463b-a04f-ae624c6b9e0e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "code": "MODULE_NOT_FOUND",
                "requireStack": [
                  "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js"
                ]
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`));\n        await endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "_testId": "urn:uuid:fda0de04-3d0d-44eb-ab74-77aaa66ae92d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "code": "MODULE_NOT_FOUND",
                "requireStack": [
                  "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js"
                ]
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "_testId": "urn:uuid:22c87698-dd84-444d-8373-71dd681252f7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1551,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`));\n        await endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "_testId": "urn:uuid:11c703fb-4976-49cf-9e3d-3f6e590d7c05",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1391,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DgCiz5pp3jeQmJ4DlD9Zs",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:361709f6-88a8-4290-9cc0-eb2b424bff76"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "_testId": "urn:uuid:f7c5ef87-ad4e-4d4e-8ce1-5f921519e48e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "code": "MODULE_NOT_FOUND",
                "requireStack": [
                  "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js"
                ]
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`));\n        await endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "_testId": "urn:uuid:155ea60f-0ba1-4db9-b0d5-6bac278c47a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "code": "MODULE_NOT_FOUND",
                "requireStack": [
                  "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js"
                ]
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "_testId": "urn:uuid:474d738b-b7c8-430d-b8c9-9f666f162cb4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": {
                        "id": "did:example:issuer",
                        "name": {
                          "@value": "ExampleIssuer",
                          "@language": "en",
                          "@direction": "ltr"
                        }
                      },
                      "credentialSubject": {
                        "id": "did:example:subject"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"id\":\"did:example:issuer\",\"name\":{\"@value\":\"ExampleIssuer\",\"@language\":\"en\",\"@direction\":\"ltr\"}},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A2ELCrwCJaA8AZKpr3YREye/credentials/issue",
                "status": 500,
                "data": {
                  "message": "An unspecified error occurred.",
                  "name": "OperationError",
                  "type": "OperationError"
                }
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`));\n        await endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "_testId": "urn:uuid:1134a164-9536-4f44-9acf-0de7e796d502",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": {
                        "id": "did:example:issuer",
                        "description": {
                          "@value": "An Example Issuer",
                          "@language": "en",
                          "@direction": "ltr"
                        }
                      },
                      "credentialSubject": {
                        "id": "did:example:subject"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"id\":\"did:example:issuer\",\"description\":{\"@value\":\"An Example Issuer\",\"@language\":\"en\",\"@direction\":\"ltr\"}},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A2ELCrwCJaA8AZKpr3YREye/credentials/issue",
                "status": 500,
                "data": {
                  "message": "An unspecified error occurred.",
                  "name": "OperationError",
                  "type": "OperationError"
                }
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DgCiz5pp3jeQmJ4DlD9Zs",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:545a2a0d-26b3-4758-b559-df0781036d25"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:38234cd1-7a98-46b0-9dd1-1c0213237f70",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "_testId": "urn:uuid:1210a1d2-bc35-463b-a04f-ae624c6b9e0e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "code": "MODULE_NOT_FOUND",
                "requireStack": [
                  "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js"
                ]
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "_testId": "urn:uuid:f7c5ef87-ad4e-4d4e-8ce1-5f921519e48e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "code": "MODULE_NOT_FOUND",
                "requireStack": [
                  "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js"
                ]
              }
            }
          ]
        },
        {
          "id": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`));\n        await endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "_testId": "urn:uuid:fda0de04-3d0d-44eb-ab74-77aaa66ae92d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "code": "MODULE_NOT_FOUND",
                "requireStack": [
                  "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js"
                ]
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`));\n        await endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "_testId": "urn:uuid:155ea60f-0ba1-4db9-b0d5-6bac278c47a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "code": "MODULE_NOT_FOUND",
                "requireStack": [
                  "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js"
                ]
              }
            }
          ]
        },
        {
          "id": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "_testId": "urn:uuid:22c87698-dd84-444d-8373-71dd681252f7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1551,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "_testId": "urn:uuid:474d738b-b7c8-430d-b8c9-9f666f162cb4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": {
                        "id": "did:example:issuer",
                        "name": {
                          "@value": "ExampleIssuer",
                          "@language": "en",
                          "@direction": "ltr"
                        }
                      },
                      "credentialSubject": {
                        "id": "did:example:subject"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"id\":\"did:example:issuer\",\"name\":{\"@value\":\"ExampleIssuer\",\"@language\":\"en\",\"@direction\":\"ltr\"}},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A2ELCrwCJaA8AZKpr3YREye/credentials/issue",
                "status": 500,
                "data": {
                  "message": "An unspecified error occurred.",
                  "name": "OperationError",
                  "type": "OperationError"
                }
              }
            }
          ]
        },
        {
          "id": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`));\n        await endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "vIXKsAtvAvKkvpd8_6DKu",
              "ctx": null,
              "_testId": "urn:uuid:11c703fb-4976-49cf-9e3d-3f6e590d7c05",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1391,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`));\n        await endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`));\n        await endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`));\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "BbqEj92ElWczfqYYVKlN1",
              "ctx": null,
              "_testId": "urn:uuid:1134a164-9536-4f44-9acf-0de7e796d502",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": {
                        "id": "did:example:issuer",
                        "description": {
                          "@value": "An Example Issuer",
                          "@language": "en",
                          "@direction": "ltr"
                        }
                      },
                      "credentialSubject": {
                        "id": "did:example:subject"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half",
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"id\":\"did:example:issuer\",\"description\":{\"@value\":\"An Example Issuer\",\"@language\":\"en\",\"@direction\":\"ltr\"}},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A2ELCrwCJaA8AZKpr3YREye/credentials/issue",
                "status": 500,
                "data": {
                  "message": "An unspecified error occurred.",
                  "name": "OperationError",
                  "type": "OperationError"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Credential Subject",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IC4ggWAY_6oBruL4Mf6np",
              "ctx": null,
              "_testId": "urn:uuid:a7a7d0d4-1291-4b88-8efd-8821c379c1ed",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json'));\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IC4ggWAY_6oBruL4Mf6np",
              "ctx": null,
              "_testId": "urn:uuid:16bd3681-7e54-4fc0-b863-d6f080f05b64",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "IC4ggWAY_6oBruL4Mf6np",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vt6O1QtcrAYX3uXk80rxb",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:28ea3e6e-0a3a-4bc2-9980-9e40310a35a4"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Q89UwYy4ApZgPlqXuz5cZ",
              "ctx": null,
              "_testId": "urn:uuid:1aefb6a9-f67d-4e72-a7b4-52499c71159f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14186,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json'));\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Q89UwYy4ApZgPlqXuz5cZ",
              "ctx": null,
              "_testId": "urn:uuid:d9f6d625-e80d-451d-b923-dd0a50382f55",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Q89UwYy4ApZgPlqXuz5cZ",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "vt6O1QtcrAYX3uXk80rxb",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:b9eb5890-5075-426a-b0d0-c2ccc94a756e"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:ab46b686-079b-42c2-a8f5-4c76bd97b4a4",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "A verifiable credential MUST have a credentialSubject property.",
          "cells": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IC4ggWAY_6oBruL4Mf6np",
              "ctx": null,
              "_testId": "urn:uuid:a7a7d0d4-1291-4b88-8efd-8821c379c1ed",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Q89UwYy4ApZgPlqXuz5cZ",
              "ctx": null,
              "_testId": "urn:uuid:1aefb6a9-f67d-4e72-a7b4-52499c71159f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14186,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json'));\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IC4ggWAY_6oBruL4Mf6np",
              "ctx": null,
              "_testId": "urn:uuid:16bd3681-7e54-4fc0-b863-d6f080f05b64",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json'));\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Q89UwYy4ApZgPlqXuz5cZ",
              "ctx": null,
              "_testId": "urn:uuid:d9f6d625-e80d-451d-b923-dd0a50382f55",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Issuer",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          await assert.rejects(\n            endpoints.issue(require('./input/credential-no-issuer-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FuGAHKuTYgYrXT44v6UO5",
              "ctx": null,
              "_testId": "urn:uuid:da2cd6ac-ff0e-4a0f-aaa2-09757e10eed5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 506,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await endpoints.issue(require(\n          './input/credential-issuer-object-ok.json'));\n        await endpoints.issue(require('./input/credential-issuer-url-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-nonurl-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-no-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-not-url-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FuGAHKuTYgYrXT44v6UO5",
              "ctx": null,
              "_testId": "urn:uuid:9968f906-603e-4d58-ac48-7d55302d2425",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 747,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FuGAHKuTYgYrXT44v6UO5",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "r7ZqCyVptH1nuCNTxxqRw",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:1df0d7e4-fe1d-4b35-b280-cd410adf0f92"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          await assert.rejects(\n            endpoints.issue(require('./input/credential-no-issuer-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "XMToj-DUtLNXPHav2FpZm",
              "ctx": null,
              "_testId": "urn:uuid:63033400-4b94-4393-b82d-9401ea3d9266",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await endpoints.issue(require(\n          './input/credential-issuer-object-ok.json'));\n        await endpoints.issue(require('./input/credential-issuer-url-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-nonurl-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-no-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-not-url-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "XMToj-DUtLNXPHav2FpZm",
              "ctx": null,
              "_testId": "urn:uuid:eb94ed09-0df4-4d16-9a5d-3c53b847788e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 270,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XMToj-DUtLNXPHav2FpZm",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "r7ZqCyVptH1nuCNTxxqRw",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:77f0bde5-fb26-4bc7-afba-41427c857e29"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:80ab3de1-9792-411b-ab87-1074b729df3a",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "A verifiable credential MUST have an issuer property.",
          "cells": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          await assert.rejects(\n            endpoints.issue(require('./input/credential-no-issuer-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FuGAHKuTYgYrXT44v6UO5",
              "ctx": null,
              "_testId": "urn:uuid:da2cd6ac-ff0e-4a0f-aaa2-09757e10eed5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 506,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          await assert.rejects(\n            endpoints.issue(require('./input/credential-no-issuer-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "XMToj-DUtLNXPHav2FpZm",
              "ctx": null,
              "_testId": "urn:uuid:63033400-4b94-4393-b82d-9401ea3d9266",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await endpoints.issue(require(\n          './input/credential-issuer-object-ok.json'));\n        await endpoints.issue(require('./input/credential-issuer-url-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-nonurl-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-no-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-not-url-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FuGAHKuTYgYrXT44v6UO5",
              "ctx": null,
              "_testId": "urn:uuid:9968f906-603e-4d58-ac48-7d55302d2425",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 747,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await endpoints.issue(require(\n          './input/credential-issuer-object-ok.json'));\n        await endpoints.issue(require('./input/credential-issuer-url-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-nonurl-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-no-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-not-url-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "XMToj-DUtLNXPHav2FpZm",
              "ctx": null,
              "_testId": "urn:uuid:eb94ed09-0df4-4d16-9a5d-3c53b847788e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 270,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Validity Period",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')));\n        // TODO: add validFrom in the future test vector.\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "_testId": "urn:uuid:7b8765eb-9431-4f0e-9b5b-2e4902a71918",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15957,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1080,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await endpoints.issue(require('./input/credential-validuntil-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "_testId": "urn:uuid:05f1d3ce-91da-4e0b-85ac-6fb220cd9680",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:example:issuer\",\"validFrom\":\"2023-02-26T01:19:19Z\",\"validUntil\":\"2023-02-26T01:19:20Z\",\"credentialSubject\":{\"id\":\"did:example:subject\"}}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:example:issuer",
                      "validFrom": "2023-02-26T01:19:19Z",
                      "validUntil": "2023-02-26T01:19:20Z",
                      "credentialSubject": {
                        "id": "did:example:subject"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.apicatalog.com/credentials/issue?suite=Ed25519Signature2020",
                "status": 400,
                "data": {
                  "id": "EXPIRED",
                  "message": "Expired"
                }
              }
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skew: -2});\n        positiveTest.validUntil = createTimeStamp({skew: 2});\n        await endpoints.issue(positiveTest);\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skew: 2});\n        negativeTest.validUntil = createTimeStamp({skew: -2});\n        let error;\n        let result;\n        try {\n          result = await endpoints.issue(negativeTest);\n        } catch(e) {\n          error = e;\n        }\n        if(error) {\n          return;\n        }\n        assert.rejects(endpoints.verify(result));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "_testId": "urn:uuid:aec951db-ce1a-457b-aadf-a585660f4b82",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 400,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skew: -2});\n        positiveTest.validUntil = createTimeStamp({skew: 2});\n        await endpoints.issue(positiveTest);\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skew: 2});\n        negativeTest.validUntil = createTimeStamp({skew: -2});\n        let error;\n        let result;\n        try {\n          result = await endpoints.issue(negativeTest);\n        } catch(e) {\n          error = e;\n        }\n        if(error) {\n          return;\n        }\n        assert.rejects(endpoints.verify(result));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "_testId": "urn:uuid:f4d944cf-1790-4a9e-b137-1a595fef4252",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QOR_qh_Nh7Iza00xMbHla",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:17c04d04-2d8e-463a-a1d8-c425e060fff1"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')));\n        // TODO: add validFrom in the future test vector.\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "_testId": "urn:uuid:71d90e13-9189-48ce-b9e7-c99be48b50bb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await endpoints.issue(require('./input/credential-validuntil-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "_testId": "urn:uuid:f2d16fb3-da63-4e49-ba3e-9c2ab93ca5f6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17873,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 307,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skew: -2});\n        positiveTest.validUntil = createTimeStamp({skew: 2});\n        await endpoints.issue(positiveTest);\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skew: 2});\n        negativeTest.validUntil = createTimeStamp({skew: -2});\n        let error;\n        let result;\n        try {\n          result = await endpoints.issue(negativeTest);\n        } catch(e) {\n          error = e;\n        }\n        if(error) {\n          return;\n        }\n        assert.rejects(endpoints.verify(result));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "_testId": "urn:uuid:0e133fe3-512d-49c4-84ca-8e24bd559fe2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skew: -2});\n        positiveTest.validUntil = createTimeStamp({skew: 2});\n        await endpoints.issue(positiveTest);\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skew: 2});\n        negativeTest.validUntil = createTimeStamp({skew: -2});\n        let error;\n        let result;\n        try {\n          result = await endpoints.issue(negativeTest);\n        } catch(e) {\n          error = e;\n        }\n        if(error) {\n          return;\n        }\n        assert.rejects(endpoints.verify(result));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "_testId": "urn:uuid:f51a1a68-e1a7-404c-9279-a81b5f097090",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 161,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QOR_qh_Nh7Iza00xMbHla",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:c9fe259a-3d2e-44ad-86cf-fdb47671015b"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:72a2c38d-8940-4d9d-b49c-97aee498ce9f",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')));\n        // TODO: add validFrom in the future test vector.\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "_testId": "urn:uuid:7b8765eb-9431-4f0e-9b5b-2e4902a71918",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15957,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1080,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')));\n        // TODO: add validFrom in the future test vector.\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "_testId": "urn:uuid:71d90e13-9189-48ce-b9e7-c99be48b50bb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 187,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await endpoints.issue(require('./input/credential-validuntil-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "_testId": "urn:uuid:05f1d3ce-91da-4e0b-85ac-6fb220cd9680",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:example:issuer\",\"validFrom\":\"2023-02-26T01:19:19Z\",\"validUntil\":\"2023-02-26T01:19:20Z\",\"credentialSubject\":{\"id\":\"did:example:subject\"}}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:example:issuer",
                      "validFrom": "2023-02-26T01:19:19Z",
                      "validUntil": "2023-02-26T01:19:20Z",
                      "credentialSubject": {
                        "id": "did:example:subject"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.apicatalog.com/credentials/issue?suite=Ed25519Signature2020",
                "status": 400,
                "data": {
                  "id": "EXPIRED",
                  "message": "Expired"
                }
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await endpoints.issue(require('./input/credential-validuntil-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json'));\n        await endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "_testId": "urn:uuid:f2d16fb3-da63-4e49-ba3e-9c2ab93ca5f6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17873,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 307,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
          "cells": [
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skew: -2});\n        positiveTest.validUntil = createTimeStamp({skew: 2});\n        await endpoints.issue(positiveTest);\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skew: 2});\n        negativeTest.validUntil = createTimeStamp({skew: -2});\n        let error;\n        let result;\n        try {\n          result = await endpoints.issue(negativeTest);\n        } catch(e) {\n          error = e;\n        }\n        if(error) {\n          return;\n        }\n        assert.rejects(endpoints.verify(result));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "_testId": "urn:uuid:aec951db-ce1a-457b-aadf-a585660f4b82",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 400,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skew: -2});\n        positiveTest.validUntil = createTimeStamp({skew: 2});\n        await endpoints.issue(positiveTest);\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skew: 2});\n        negativeTest.validUntil = createTimeStamp({skew: -2});\n        let error;\n        let result;\n        try {\n          result = await endpoints.issue(negativeTest);\n        } catch(e) {\n          error = e;\n        }\n        if(error) {\n          return;\n        }\n        assert.rejects(endpoints.verify(result));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "_testId": "urn:uuid:0e133fe3-512d-49c4-84ca-8e24bd559fe2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
          "cells": [
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skew: -2});\n        positiveTest.validUntil = createTimeStamp({skew: 2});\n        await endpoints.issue(positiveTest);\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skew: 2});\n        negativeTest.validUntil = createTimeStamp({skew: -2});\n        let error;\n        let result;\n        try {\n          result = await endpoints.issue(negativeTest);\n        } catch(e) {\n          error = e;\n        }\n        if(error) {\n          return;\n        }\n        assert.rejects(endpoints.verify(result));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tTT8l2768EogqU1jknQDb",
              "ctx": null,
              "_testId": "urn:uuid:f4d944cf-1790-4a9e-b137-1a595fef4252",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skew: -2});\n        positiveTest.validUntil = createTimeStamp({skew: 2});\n        await endpoints.issue(positiveTest);\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skew: 2});\n        negativeTest.validUntil = createTimeStamp({skew: -2});\n        let error;\n        let result;\n        try {\n          result = await endpoints.issue(negativeTest);\n        } catch(e) {\n          error = e;\n        }\n        if(error) {\n          return;\n        }\n        assert.rejects(endpoints.verify(result));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CPenl5EioRoLjGBsP63Ch",
              "ctx": null,
              "_testId": "urn:uuid:f51a1a68-e1a7-404c-9279-a81b5f097090",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 161,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Securing Mechanisms",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        should.exist(issuedVc, `Expected ${name} to issue a VC.`);\n        should.exist(issuedVc.proof, 'Expected VC to have a proof.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0, 'Expected at least one proof.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'expected proof to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "SVENfUqxEhBN5XRN_2KiN",
              "ctx": null,
              "_testId": "urn:uuid:4ae0776e-5b1f-4529-bba8-bd03d2d85eef",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        should.exist(issuedVc, `Expected ${name} to issue a VC.`);\n        should.exist(issuedVc.proof, 'Expected VC to have a proof.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "SVENfUqxEhBN5XRN_2KiN",
              "ctx": null,
              "_testId": "urn:uuid:adedfc5c-4198-4dc7-87de-84b6ec8cf1f5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        endpoints.verify(issuedVc);\n        // should reject a VC without a proof\n        assert.rejects(endpoints.verify(require('./input/credential-ok.json')));\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "SVENfUqxEhBN5XRN_2KiN",
              "ctx": null,
              "_testId": "urn:uuid:efc62777-dad9-43d9-9829-662fd9a1a6b8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SVENfUqxEhBN5XRN_2KiN",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SVENfUqxEhBN5XRN_2KiN",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18496,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YbBmLTCCFe8GsjtzWDZop",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:05d0b40f-24ff-4a19-ac97-aa2061e52635"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        should.exist(issuedVc, `Expected ${name} to issue a VC.`);\n        should.exist(issuedVc.proof, 'Expected VC to have a proof.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0, 'Expected at least one proof.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'expected proof to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "V3eQEmKfJgzQKRGTpXix5",
              "ctx": null,
              "_testId": "urn:uuid:9a4520c8-bb86-4a0e-a298-b1834673cf3f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        should.exist(issuedVc, `Expected ${name} to issue a VC.`);\n        should.exist(issuedVc.proof, 'Expected VC to have a proof.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "V3eQEmKfJgzQKRGTpXix5",
              "ctx": null,
              "_testId": "urn:uuid:b9521528-4460-4cb9-b115-bcccd1666e57",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        endpoints.verify(issuedVc);\n        // should reject a VC without a proof\n        assert.rejects(endpoints.verify(require('./input/credential-ok.json')));\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "V3eQEmKfJgzQKRGTpXix5",
              "ctx": null,
              "_testId": "urn:uuid:8f423deb-d3fb-411d-97cd-211d159b03e3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "V3eQEmKfJgzQKRGTpXix5",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "V3eQEmKfJgzQKRGTpXix5",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "YbBmLTCCFe8GsjtzWDZop",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:48e746c5-c8a4-4da8-b38d-7efc330262d5"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:da29e986-3a91-4348-af5f-80ab7e5e0980",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        should.exist(issuedVc, `Expected ${name} to issue a VC.`);\n        should.exist(issuedVc.proof, 'Expected VC to have a proof.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0, 'Expected at least one proof.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'expected proof to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "SVENfUqxEhBN5XRN_2KiN",
              "ctx": null,
              "_testId": "urn:uuid:4ae0776e-5b1f-4529-bba8-bd03d2d85eef",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        should.exist(issuedVc, `Expected ${name} to issue a VC.`);\n        should.exist(issuedVc.proof, 'Expected VC to have a proof.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0, 'Expected at least one proof.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'expected proof to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "V3eQEmKfJgzQKRGTpXix5",
              "ctx": null,
              "_testId": "urn:uuid:9a4520c8-bb86-4a0e-a298-b1834673cf3f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        should.exist(issuedVc, `Expected ${name} to issue a VC.`);\n        should.exist(issuedVc.proof, 'Expected VC to have a proof.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "SVENfUqxEhBN5XRN_2KiN",
              "ctx": null,
              "_testId": "urn:uuid:adedfc5c-4198-4dc7-87de-84b6ec8cf1f5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        should.exist(issuedVc, `Expected ${name} to issue a VC.`);\n        should.exist(issuedVc.proof, 'Expected VC to have a proof.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "V3eQEmKfJgzQKRGTpXix5",
              "ctx": null,
              "_testId": "urn:uuid:b9521528-4460-4cb9-b115-bcccd1666e57",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        endpoints.verify(issuedVc);\n        // should reject a VC without a proof\n        assert.rejects(endpoints.verify(require('./input/credential-ok.json')));\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "SVENfUqxEhBN5XRN_2KiN",
              "ctx": null,
              "_testId": "urn:uuid:efc62777-dad9-43d9-9829-662fd9a1a6b8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        endpoints.verify(issuedVc);\n        // should reject a VC without a proof\n        assert.rejects(endpoints.verify(require('./input/credential-ok.json')));\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "V3eQEmKfJgzQKRGTpXix5",
              "ctx": null,
              "_testId": "urn:uuid:8f423deb-d3fb-411d-97cd-211d159b03e3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Status",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Pbus4JWz_9j7ObN3kWBxD",
              "ctx": null,
              "_testId": "urn:uuid:568201da-cd45-4773-ab37-4a1ea51c5c6e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-status-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Pbus4JWz_9j7ObN3kWBxD",
              "ctx": null,
              "_testId": "urn:uuid:4d1d093c-9552-4d00-9c87-ef66931b1c8d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Status schemes MUST NOT be implemented in ways that enable tracking of individuals",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Pbus4JWz_9j7ObN3kWBxD",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format.",
              "body": "async function() {\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')));\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Pbus4JWz_9j7ObN3kWBxD",
              "ctx": null,
              "_testId": "urn:uuid:3d5b8ee4-0add-416a-8d6f-63c1074b870d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-30T05:05:55Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3vHpkTANazueZ7XgxTTYjzsrWmyEPJB69ZwiCgqMAT7eWtbRnM6g8x9QeVNttBQ3TCezdYCS2gv4FX3H3CwK5e7x\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-30T05:05:55Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uP_o4NgEkNZwkjHtqVvucQg\",\"proofValue\":\"z4ponCxUqefAMpDAauKEko3ositG5LTDzovDFzQqMTRVTj6ZWAzgtfAPCdSMDBRg5f38qT6dMjgkfgf6RhZr5wzjt\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uP_o4NgEkNZwkjHtqVvucQg\"}}",
                  "method": "POST",
                  "json": {
                    "verifiablePresentation": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiablePresentation"
                      ],
                      "verifiableCredential": [
                        {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "type": [
                            "VerifiableCredential"
                          ],
                          "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "credentialSubject": {
                            "id": "did:example:subject"
                          },
                          "proof": {
                            "type": "DataIntegrityProof",
                            "created": "2024-06-30T05:05:55Z",
                            "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "cryptosuite": "eddsa-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z3vHpkTANazueZ7XgxTTYjzsrWmyEPJB69ZwiCgqMAT7eWtbRnM6g8x9QeVNttBQ3TCezdYCS2gv4FX3H3CwK5e7x"
                          }
                        }
                      ],
                      "proof": {
                        "type": "DataIntegrityProof",
                        "created": "2024-06-30T05:05:55Z",
                        "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                        "cryptosuite": "eddsa-2022",
                        "proofPurpose": "authentication",
                        "challenge": "uP_o4NgEkNZwkjHtqVvucQg",
                        "proofValue": "z4ponCxUqefAMpDAauKEko3ositG5LTDzovDFzQqMTRVTj6ZWAzgtfAPCdSMDBRg5f38qT6dMjgkfgf6RhZr5wzjt"
                      }
                    },
                    "options": {
                      "checks": [
                        "proof"
                      ],
                      "challenge": "uP_o4NgEkNZwkjHtqVvucQg"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                "status": 400,
                "data": {
                  "checks": [
                    "PROOF",
                    "INVALID_PROOF_CONFIGURATION"
                  ],
                  "warnings": [],
                  "errors": []
                }
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Pbus4JWz_9j7ObN3kWBxD",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "XCV1BTYx8MQJf8DmWHQ-s",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:19f56483-7072-428e-8ec2-a124cb557547"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2g1JeftFuH9XkLLIud19-",
              "ctx": null,
              "_testId": "urn:uuid:c9297bed-ced9-4edd-a6e7-5aec1bfaf2f2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-status-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2g1JeftFuH9XkLLIud19-",
              "ctx": null,
              "_testId": "urn:uuid:a38d793f-d98e-46d2-aa8d-7dd86950bb15",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19359,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Status schemes MUST NOT be implemented in ways that enable tracking of individuals",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2g1JeftFuH9XkLLIud19-",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format.",
              "body": "async function() {\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')));\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2g1JeftFuH9XkLLIud19-",
              "ctx": null,
              "_testId": "urn:uuid:d0764642-777e-4f4f-b471-22efb33f8d1e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 214,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2g1JeftFuH9XkLLIud19-",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "XCV1BTYx8MQJf8DmWHQ-s",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:cf225ad3-6adc-4de3-acff-9a9ae74c746d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:4901d964-3fcf-4a48-bfaa-094029603534",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
          "cells": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Pbus4JWz_9j7ObN3kWBxD",
              "ctx": null,
              "_testId": "urn:uuid:568201da-cd45-4773-ab37-4a1ea51c5c6e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2g1JeftFuH9XkLLIud19-",
              "ctx": null,
              "_testId": "urn:uuid:c9297bed-ced9-4edd-a6e7-5aec1bfaf2f2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
          "cells": [
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-status-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Pbus4JWz_9j7ObN3kWBxD",
              "ctx": null,
              "_testId": "urn:uuid:4d1d093c-9552-4d00-9c87-ef66931b1c8d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-status-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2g1JeftFuH9XkLLIud19-",
              "ctx": null,
              "_testId": "urn:uuid:a38d793f-d98e-46d2-aa8d-7dd86950bb15",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19359,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format.",
          "cells": [
            {
              "type": "test",
              "title": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format.",
              "body": "async function() {\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')));\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Pbus4JWz_9j7ObN3kWBxD",
              "ctx": null,
              "_testId": "urn:uuid:3d5b8ee4-0add-416a-8d6f-63c1074b870d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-30T05:05:55Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3vHpkTANazueZ7XgxTTYjzsrWmyEPJB69ZwiCgqMAT7eWtbRnM6g8x9QeVNttBQ3TCezdYCS2gv4FX3H3CwK5e7x\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-06-30T05:05:55Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uP_o4NgEkNZwkjHtqVvucQg\",\"proofValue\":\"z4ponCxUqefAMpDAauKEko3ositG5LTDzovDFzQqMTRVTj6ZWAzgtfAPCdSMDBRg5f38qT6dMjgkfgf6RhZr5wzjt\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uP_o4NgEkNZwkjHtqVvucQg\"}}",
                  "method": "POST",
                  "json": {
                    "verifiablePresentation": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiablePresentation"
                      ],
                      "verifiableCredential": [
                        {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "type": [
                            "VerifiableCredential"
                          ],
                          "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "credentialSubject": {
                            "id": "did:example:subject"
                          },
                          "proof": {
                            "type": "DataIntegrityProof",
                            "created": "2024-06-30T05:05:55Z",
                            "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "cryptosuite": "eddsa-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z3vHpkTANazueZ7XgxTTYjzsrWmyEPJB69ZwiCgqMAT7eWtbRnM6g8x9QeVNttBQ3TCezdYCS2gv4FX3H3CwK5e7x"
                          }
                        }
                      ],
                      "proof": {
                        "type": "DataIntegrityProof",
                        "created": "2024-06-30T05:05:55Z",
                        "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                        "cryptosuite": "eddsa-2022",
                        "proofPurpose": "authentication",
                        "challenge": "uP_o4NgEkNZwkjHtqVvucQg",
                        "proofValue": "z4ponCxUqefAMpDAauKEko3ositG5LTDzovDFzQqMTRVTj6ZWAzgtfAPCdSMDBRg5f38qT6dMjgkfgf6RhZr5wzjt"
                      }
                    },
                    "options": {
                      "checks": [
                        "proof"
                      ],
                      "challenge": "uP_o4NgEkNZwkjHtqVvucQg"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                "status": 400,
                "data": {
                  "checks": [
                    "PROOF",
                    "INVALID_PROOF_CONFIGURATION"
                  ],
                  "warnings": [],
                  "errors": []
                }
              }
            },
            {
              "type": "test",
              "title": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format.",
              "body": "async function() {\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')));\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2g1JeftFuH9XkLLIud19-",
              "ctx": null,
              "_testId": "urn:uuid:d0764642-777e-4f4f-b471-22efb33f8d1e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "In Verifiable Presentations, the verifiableCredential property MAY be present. The value MUST be an array of one or more verifiable credential graphs in a cryptographically verifiable format."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 214,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Advanced",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        // This depends on \"@protected\" (which is used for the base context).\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:fc296083-7bf4-41e3-88bb-7df182428504",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19746,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        await endpoints.issue(require('./input/credential-schema-ok.json'));\n        await endpoints.issue(require('./input/credential-schemas-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:ef72bc49-39dc-40ae-beb5-200bd340da5a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 298,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:62b184ae-87b0-492a-af74-f53b69bb7867",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20183,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "credentialSchema id MUST be a URL identifying the schema file.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:437d4317-d323-4567-9c1b-1ea89915e9a3",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "credentialSchema id MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20285,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type (for example, ManualRefreshService2018) and its id, which is the URL of the service.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        await endpoints.issue(require(\n          './input/credential-termsofuses-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:ee6c82ff-a19d-4ada-994e-cac7cbe87404",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:821a465a-1e37-4c28-a9b0-2d6804231d9b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20519,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 267,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        await endpoints.issue(require('./input/credential-evidences-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:ce7c6c68-0723-4c60-b509-416a29e1a85d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(ZKP) The verifiable credential MUST contain a Proof, using the proof property, so that the holder can derive a verifiable presentation that reveals only the information than the holder intends to reveal.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "(ZKP) If a credential definition is being used, the credential definition MUST be defined in the credentialSchema property, so that it can be used by all parties to perform various cryptographic operations in zero-knowledge.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "(ZKP) Each derived verifiable credential within a verifiable presentation MUST contain all information necessary to verify the verifiable credential, either by including it directly within the credential, or by referencing the necessary information.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "A verifiable presentation MUST NOT leak information that would enable the verifier to correlate the holder across multiple verifiable presentations.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "Data model mapping property values to JSON types (not numeric/boolean/sequence/ordered-set/set/empty): \"Other values MUST be represented as a String type.\"",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "BXVC81xVYLgkZiOmOR3HA",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:c45148cc-6f12-4019-9988-90dd6944df3b"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        // This depends on \"@protected\" (which is used for the base context).\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:de85deb1-e4fd-45a1-8070-a56666ad8816",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        await endpoints.issue(require('./input/credential-schema-ok.json'));\n        await endpoints.issue(require('./input/credential-schemas-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:2a760da6-c54a-4ca3-ba20-f50af4d7fe1c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:0199f422-1dc6-42ab-9f17-9174abe9a5c8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "credentialSchema id MUST be a URL identifying the schema file.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:d5dbd978-2428-477b-b851-dbabdcf0f0e8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credentialSchema id MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21311,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type (for example, ManualRefreshService2018) and its id, which is the URL of the service.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        await endpoints.issue(require(\n          './input/credential-termsofuses-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:8da12053-cdcb-4dd5-b886-35bdddb78bd8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21356,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:e2b5c09b-5c41-4de6-8fe6-9824d8a988cd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        await endpoints.issue(require('./input/credential-evidences-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:0b6d6bf1-b286-4663-a150-c0a8568fea9c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(ZKP) The verifiable credential MUST contain a Proof, using the proof property, so that the holder can derive a verifiable presentation that reveals only the information than the holder intends to reveal.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "(ZKP) If a credential definition is being used, the credential definition MUST be defined in the credentialSchema property, so that it can be used by all parties to perform various cryptographic operations in zero-knowledge.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "(ZKP) Each derived verifiable credential within a verifiable presentation MUST contain all information necessary to verify the verifiable credential, either by including it directly within the credential, or by referencing the necessary information.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "A verifiable presentation MUST NOT leak information that would enable the verifier to correlate the holder across multiple verifiable presentations.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "Data model mapping property values to JSON types (not numeric/boolean/sequence/ordered-set/set/empty): \"Other values MUST be represented as a String type.\"",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "BXVC81xVYLgkZiOmOR3HA",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:f6fca5c2-5772-4846-98f4-002104b9f8fb"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "UhHwnhpK7KF9V4oNX3rF6",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:a5966038-d00b-4bbc-84ed-8d8a6a58cf6a",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar"
      ],
      "rows": [
        {
          "id": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
          "cells": [
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        // This depends on \"@protected\" (which is used for the base context).\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:fc296083-7bf4-41e3-88bb-7df182428504",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19746,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        // This depends on \"@protected\" (which is used for the base context).\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:de85deb1-e4fd-45a1-8070-a56666ad8816",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
          "cells": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        await endpoints.issue(require('./input/credential-schema-ok.json'));\n        await endpoints.issue(require('./input/credential-schemas-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:ef72bc49-39dc-40ae-beb5-200bd340da5a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 298,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        await endpoints.issue(require('./input/credential-schema-ok.json'));\n        await endpoints.issue(require('./input/credential-schemas-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:2a760da6-c54a-4ca3-ba20-f50af4d7fe1c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property.",
          "cells": [
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:62b184ae-87b0-492a-af74-f53b69bb7867",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20183,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:0199f422-1dc6-42ab-9f17-9174abe9a5c8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ]
        },
        {
          "id": "credentialSchema id MUST be a URL identifying the schema file.",
          "cells": [
            {
              "type": "test",
              "title": "credentialSchema id MUST be a URL identifying the schema file.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:437d4317-d323-4567-9c1b-1ea89915e9a3",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "credentialSchema id MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20285,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "credentialSchema id MUST be a URL identifying the schema file.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:d5dbd978-2428-477b-b851-dbabdcf0f0e8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "credentialSchema id MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21311,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        await endpoints.issue(require(\n          './input/credential-termsofuses-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:ee6c82ff-a19d-4ada-994e-cac7cbe87404",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        await endpoints.issue(require(\n          './input/credential-termsofuses-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:8da12053-cdcb-4dd5-b886-35bdddb78bd8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21356,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
          "cells": [
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:821a465a-1e37-4c28-a9b0-2d6804231d9b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20519,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 267,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:e2b5c09b-5c41-4de6-8fe6-9824d8a988cd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        await endpoints.issue(require('./input/credential-evidences-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "hxTpcnaWDr8GpKFbgcepm",
              "ctx": null,
              "_testId": "urn:uuid:ce7c6c68-0723-4c60-b509-416a29e1a85d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        await endpoints.issue(require('./input/credential-evidences-ok.json'));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JyyE8-b-CdgFr3y-bJ3Kk",
              "ctx": null,
              "_testId": "urn:uuid:0b6d6bf1-b286-4663-a150-c0a8568fea9c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "shortName": "vc2.0-test-suite",
    "group": "vc",
    "specStatus": "base",
    "subtitle": "Verifiable Credentials Data Model v2.0 Interoperability Report",
    "github": "https://github.com/w3c/vc-data-model-2.0-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-data-model-2.0-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "otherLinks": [
      {
        "key": "Related Specifications",
        "data": [
          {
            "value": "The Verifiable Credentials Data Model v2.0",
            "href": "https://www.w3.org/TR/vc-data-model-2.0/"
          }
        ]
      }
    ],
    "editors": [
      {
        "name": "Charles E. Lehner",
        "url": "https://www.w3.org/wiki/User:Cel"
      },
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Charles E. Lehner",
        "url": "https://www.w3.org/wiki/User:Cel"
      },
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "VC v2.0 Interoperability Report",
  "stats": [
    "Tests passed 61/80 76%",
    "Tests failed 19/80 24%",
    "Failures 19",
    "Tests skipped 22",
    "Total tests 102"
  ]
}