{
  "matrices": [
    {
      "title": "Basic Conformance",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:f4b79174-68d6-4b8c-a518-79180e2f6243",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:9c3946fb-d89a-4bff-a4a5-a2a3e6dc0fe8",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:aec73c67-1800-456a-a8db-814b8f4f8972",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:444ba767-4fc7-4c48-b744-78a7cef391ae",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 657,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:a607a930-ab4c-4318-b3d3-77aab65dc3f8",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:c34a6bf7-b8c5-4ca5-bf9f-bf5b3c457087",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"ACA-py\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 277,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0vFWYLF6z01PVdjfiqTnD",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
          "_testId": "urn:uuid:b85354c7-af26-4782-8be9-7666937bfa41"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:5fdc1acb-9d85-4773-a7e4-d6aba60f8303",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:e84dfd3f-284e-40dd-b846-3ede1624f240",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:2b834cd0-2f6e-4125-9590-f5a268befe6a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:0bb21b22-a824-469e-8d09-9ced798b89ee",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1493,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"VerifiableCredential\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-09-23T16:05:09Z\",\"proofValue\":\"z49ondWLy9ZZUBRmiXPtJsqoWYKFFT714nuUTrKPe5P9skQgXuczksvu1YnyE8UdPgjpagnaouxJZbrGhzvmeiidX\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "type": "VerifiableCredential",
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-09-23T16:05:09Z",
                          "proofValue": "z49ondWLy9ZZUBRmiXPtJsqoWYKFFT714nuUTrKPe5P9skQgXuczksvu1YnyE8UdPgjpagnaouxJZbrGhzvmeiidX"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:158ef111-b7d0-4167-9706-2a45dfbf1c95",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1596,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:c0e54a96-84fc-4d51-90c4-dbfa63c922bc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 190,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 664,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0vFWYLF6z01PVdjfiqTnD",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
          "_testId": "urn:uuid:a4aa142c-e35d-4340-8a77-f4e9d1fe0dcd"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:8d6ccb8f-37f5-4875-a635-e3e22cce9b8b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:a45e58ef-7497-4d66-8e32-fe5573ac2681",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:140d5de7-b4b1-4bf3-8b19-0d612c716ff4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:a91c7488-961a-4b70-999b-4d24e96de908",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:c8064688-56ee-4662-8695-5146910a5d5d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:d166b18a-5d1b-49e2-badd-44bda125f258",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 413,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0vFWYLF6z01PVdjfiqTnD",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
          "_testId": "urn:uuid:25272e52-367d-4ba9-8d99-0792c467ca0c"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:f9d51406-d8ab-48fb-8c16-dac005516e4f",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:b3ae440c-cfe4-4ea6-a831-78b400affecc",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:040aedb9-7c3c-4082-9894-88749da40dfa",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:6356356e-496e-458d-a489-41bfa339ca99",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:7304f1d8-269c-42b9-86f5-6df4761fcd36",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:811469b1-18ec-46d6-b85b-be068dbfdf54",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0vFWYLF6z01PVdjfiqTnD",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
          "_testId": "urn:uuid:c9fd05b2-870b-4282-95df-3b3997017cd8"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:c4f2ab1b-908d-4237-a42a-cc1ef1e1ecad",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:e43df8c8-93ab-46d0-9c00-c28ab4105dfd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:87a762be-d1ac-4dc9-9fa8-89fd8dca109d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:dfba2c2b-44bc-45ab-8446-ac480f707cbd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:e138c54a-0da9-42ea-ac2d-ce7fff12a4de",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:e169b30e-42c0-4692-8960-102eb02750b7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 182,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0vFWYLF6z01PVdjfiqTnD",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
          "_testId": "urn:uuid:2c651d39-d798-4762-92f6-28a85c88aeba"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:346b7772-f222-40b0-81c9-4162c858bfd6",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:3d25fef7-8e65-4a2a-88d9-863c60f903f6",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:cb771055-aa43-4e41-a43a-7216eeb4aec4",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3836,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:ecf05996-7df0-482a-b601-6df1fc69ed6c",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3836,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:306a03e4-b1b4-4542-b521-9a17f13c33b7",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:88f5f2b9-a7c4-4d46-bd93-891cfa9fed25",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 414,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"VC Issuer Mock\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 181,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0vFWYLF6z01PVdjfiqTnD",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
          "_testId": "urn:uuid:bcf9e5ad-730a-4eb8-8f37-b8d818d70aff"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:5de62918-4df9-4fbc-968d-db4d9786e010",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
          "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:f4b79174-68d6-4b8c-a518-79180e2f6243",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:5fdc1acb-9d85-4773-a7e4-d6aba60f8303",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:8d6ccb8f-37f5-4875-a635-e3e22cce9b8b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:f9d51406-d8ab-48fb-8c16-dac005516e4f",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:c4f2ab1b-908d-4237-a42a-cc1ef1e1ecad",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.`;\n        // covers both embedded and enveloped dynamically\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:346b7772-f222-40b0-81c9-4162c858bfd6",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.12%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
          "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
          "cells": [
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:9c3946fb-d89a-4bff-a4a5-a2a3e6dc0fe8",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:e84dfd3f-284e-40dd-b846-3ede1624f240",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:a45e58ef-7497-4d66-8e32-fe5573ac2681",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:b3ae440c-cfe4-4ea6-a831-78b400affecc",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:e43df8c8-93ab-46d0-9c00-c28ab4105dfd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        checkRequiredProperties(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:3d25fef7-8e65-4a2a-88d9-863c60f903f6",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming issuer implementation MUST include all required properties in the conforming documents it produces."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
          "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
          "cells": [
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:aec73c67-1800-456a-a8db-814b8f4f8972",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:2b834cd0-2f6e-4125-9590-f5a268befe6a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1492,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:140d5de7-b4b1-4bf3-8b19-0d612c716ff4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:040aedb9-7c3c-4082-9894-88749da40dfa",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:87a762be-d1ac-4dc9-9fa8-89fd8dca109d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        should.exist(issuedVc, `Expected ${name} to have issued a VC.`);\n        shouldBeSecured(name, issuedVc);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:cb771055-aa43-4e41-a43a-7216eeb4aec4",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming issuer implementation MUST secure the conforming documents it produces using a securing mechanismdescribed in Section 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3836,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
          "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
          "cells": [
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:444ba767-4fc7-4c48-b744-78a7cef391ae",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 657,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:0bb21b22-a824-469e-8d09-9ced798b89ee",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1493,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"VerifiableCredential\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-09-23T16:05:09Z\",\"proofValue\":\"z49ondWLy9ZZUBRmiXPtJsqoWYKFFT714nuUTrKPe5P9skQgXuczksvu1YnyE8UdPgjpagnaouxJZbrGhzvmeiidX\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "type": "VerifiableCredential",
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-09-23T16:05:09Z",
                          "proofValue": "z49ondWLy9ZZUBRmiXPtJsqoWYKFFT714nuUTrKPe5P9skQgXuczksvu1YnyE8UdPgjpagnaouxJZbrGhzvmeiidX"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:a91c7488-961a-4b70-999b-4d24e96de908",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 411,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:6356356e-496e-458d-a489-41bfa339ca99",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:dfba2c2b-44bc-45ab-8446-ac480f707cbd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:ecf05996-7df0-482a-b601-6df1fc69ed6c",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming verifier implementation MUST perform verification on a conforming document as described inSection 4.12 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3836,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
          "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
          "cells": [
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:a607a930-ab4c-4318-b3d3-77aab65dc3f8",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:158ef111-b7d0-4167-9706-2a45dfbf1c95",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1596,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:c8064688-56ee-4662-8695-5146910a5d5d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:7304f1d8-269c-42b9-86f5-6df4761fcd36",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:e138c54a-0da9-42ea-ac2d-ce7fff12a4de",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
              "body": "async function() {\n        this.test.link = `https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces`;\n        this.test.cell.skipMessage = 'Tested by other tests in this suite.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:306a03e4-b1b4-4542-b521-9a17f13c33b7",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming verifier implementation MUST check that each required property satisfies the normative requirementsfor that property.",
                "skipMessage": "Tested by other tests in this suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-model-2.0/#conformance:~:text=MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20it%20produces",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Tested by other tests in this suite."
              }
            }
          ]
        },
        {
          "id": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "RgKoXTAhujtvSOxt4VWn4",
              "ctx": null,
              "_testId": "urn:uuid:c34a6bf7-b8c5-4ca5-bf9f-bf5b3c457087",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "THe3m7X4Bub1Jzn1q7M65",
              "ctx": null,
              "_testId": "urn:uuid:c0e54a96-84fc-4d51-90c4-dbfa63c922bc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1597,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 190,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "nRxOo5l2gcSQ6qgFP-Biu",
              "ctx": null,
              "_testId": "urn:uuid:d166b18a-5d1b-49e2-badd-44bda125f258",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "gqqylGtClRcxv_-BbSlmk",
              "ctx": null,
              "_testId": "urn:uuid:811469b1-18ec-46d6-b85b-be068dbfdf54",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "NbI0D5DD97HMNcNtR1izs",
              "ctx": null,
              "_testId": "urn:uuid:e169b30e-42c0-4692-8960-102eb02750b7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 182,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc), {name: 'HTTPError'},\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/1-3-conformance.js",
              "parent": "jdxsXJCo9toe_3V3MS88h",
              "ctx": null,
              "_testId": "urn:uuid:88f5f2b9-a7c4-4d46-bd93-891cfa9fed25",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A conforming verifier implementation MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 414,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Contexts",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:28b032fb-d299-4091-bb11-d8b4f93e2cde",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4456,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:64b8b726-55c4-4c57-a966-7eeea9e4728c",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:22f6f8ac-1a24-4267-bd4d-d7eb5c6ea345",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:c55a2091-9cda-4c6a-b837-9953532cfeb0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:6abab050-dc2f-4c93-92c4-c157d94c6856",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:f8312b3b-5172-41a9-a950-40f72f3b9a07",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4840,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z25nueHgDVx3tKbgE1g4BcWnKXZSZyps8pyhkyGKwF1b4qUHJsDkcduymgsctnDpW9aDXBAcyrTEwYGjvydMXWbV1\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:05:13Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:13Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z25nueHgDVx3tKbgE1g4BcWnKXZSZyps8pyhkyGKwF1b4qUHJsDkcduymgsctnDpW9aDXBAcyrTEwYGjvydMXWbV1"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/presentations/verify",
                  "status": 500
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ky5m3QMM4GJ3p9ahv9U31",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
          "_testId": "urn:uuid:890fdd5b-d226-40a7-8077-c41eaeeb3081"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:1e018341-ff12-4b40-8116-c6041c2e2596",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:712bc408-ad98-4af7-86c4-a87fc4e6666c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:4786bfa7-3e7f-4f8d-bb39-81ce6a1ab2d1",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5148,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:64ae498e-5c65-4d38-bafb-c9fb8d26052a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5340,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:22b8e78e-2047-4564-a74d-726bed8e3bd5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 283,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:5395e19d-9cba-4f18-970b-2274f7b57781",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:14Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z45ZhaSD9WcaHn4mLewW56Zk3TT6kzXghUYMrgdTFpttud9BcoYNX3PcaAEaZ6EE9Bu98GRfHW4z1sKP1bepgmoMM\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:05:13Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:14Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z45ZhaSD9WcaHn4mLewW56Zk3TT6kzXghUYMrgdTFpttud9BcoYNX3PcaAEaZ6EE9Bu98GRfHW4z1sKP1bepgmoMM"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ky5m3QMM4GJ3p9ahv9U31",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
          "_testId": "urn:uuid:5964dc34-e3c1-4386-bb7a-ca6372335d17"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:1752ab67-5cb5-436f-891a-f042580b5de0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5723,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:c863aeb0-0e4b-4d81-8050-3d4b3c8333d2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:4c180aa9-7f47-45b2-8e3f-faec7bec37cd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5983,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 279,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:85548b13-a540-41b4-b640-9b5e936887ae",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:5c9dfaff-83cb-4ab3-8474-4e751f025107",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 684,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:24a67b08-2106-489d-9d72-9f020e76d354",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7021,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 889,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ky5m3QMM4GJ3p9ahv9U31",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
          "_testId": "urn:uuid:dfe13e43-888a-46d5-b2c0-f6f6dd9080bd"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:cf909eaf-2cc7-4af6-b7ee-3a1e393f3457",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 343,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:33dec29a-efbe-4ec0-aead-b352011f74a2",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8254,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:283e7f88-005e-4909-bac8-5a04aac3e7d9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:15f45b6d-39ab-4cfe-9901-368a6be84e76",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8522,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:9b9fb1bf-5902-41b2-ab69-ac5ec51d5d91",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:dc14ea64-a914-4e9f-89df-edc62cc7901c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 324,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ky5m3QMM4GJ3p9ahv9U31",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
          "_testId": "urn:uuid:b8818273-3b22-440f-93ce-3d06b4e89791"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:63311edc-8860-4f41-a22f-2b47f112327f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9114,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:dd9c73b8-291f-4ec0-8994-6cae4e0402d7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:b8b3d12f-2e67-404f-b67f-2486da3594f3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:3ba0893a-00ae-4af2-a7e8-58817a2300ad",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:bdfad4ce-d183-44bb-8d4f-e45700d45935",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:1f7240a9-ae00-49a4-8575-86032a4cd9fa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9722,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:18Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z2Z9jcrjPYvoHzaGk3CpGFHrfT9jAamZ1LdoUFLU5c5HFsxwzQCnBYJjPnNtn28B2ZShEGJ4LNnLmGfjbCxgWpFdW\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:05:13Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:18Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z2Z9jcrjPYvoHzaGk3CpGFHrfT9jAamZ1LdoUFLU5c5HFsxwzQCnBYJjPnNtn28B2ZShEGJ4LNnLmGfjbCxgWpFdW"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ky5m3QMM4GJ3p9ahv9U31",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
          "_testId": "urn:uuid:ed506d58-5b70-44a4-916f-d74fa27e25d2"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:25f12f41-b3e4-4e38-9636-9b7d247559bb",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:d115af2f-5e25-4092-a3ae-8d2bd632a8af",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 128,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:ba193820-34ab-44f5-b8ae-77c8de1ef113",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 612,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:75dd29b6-85c6-4092-bff0-1fcdbcdfe3c5",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10908,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:ebfb8894-4b0e-4b59-8333-86a709d1db58",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 523,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:654b9ca0-fc2f-4398-94b3-6ce1fd33f0ae",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 327,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:20Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z2krm3cnx3bPsum7HuM3q4maZ2UUgsnSTTrr6u5w9wF9Vkvsyx8YUoJtsCM382tq1WxMGgCBpwPsZdT2KhZEWfQXR\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:05:13Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:20Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z2krm3cnx3bPsum7HuM3q4maZ2UUgsnSTTrr6u5w9wF9Vkvsyx8YUoJtsCM382tq1WxMGgCBpwPsZdT2KhZEWfQXR"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-issuer-mock.onrender.com/didkit-http/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ky5m3QMM4GJ3p9ahv9U31",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
          "_testId": "urn:uuid:6cc4ab8f-cdbb-4497-9666-996230405859"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:da446418-bdd9-44ce-972a-2e03cec6b97a",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "Verifiable credentials MUST include a @context property.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:28b032fb-d299-4091-bb11-d8b4f93e2cde",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4456,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:1e018341-ff12-4b40-8116-c6041c2e2596",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:1752ab67-5cb5-436f-891a-f042580b5de0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5723,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:cf909eaf-2cc7-4af6-b7ee-3a1e393f3457",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 343,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:63311edc-8860-4f41-a22f-2b47f112327f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9114,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await injectOrReject(endpoints,\n            './input/credential-no-context-fail-or-inject.json');\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:25f12f41-b3e4-4e38-9636-9b7d247559bb",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable presentations MUST include a @context property.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:64b8b726-55c4-4c57-a966-7eeea9e4728c",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:712bc408-ad98-4af7-86c4-a87fc4e6666c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:c863aeb0-0e4b-4d81-8050-3d4b3c8333d2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:33dec29a-efbe-4ec0-aead-b352011f74a2",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8254,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:dd9c73b8-291f-4ec0-8994-6cae4e0402d7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json')\n          });\n          delete vp['@context'];\n          await assert.rejects(endpoints.verifyVp(vp),\n            'Failed to reject a VP with a missing @context.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:d115af2f-5e25-4092-a3ae-8d2bd632a8af",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 128,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:22f6f8ac-1a24-4267-bd4d-d7eb5c6ea345",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:4786bfa7-3e7f-4f8d-bb39-81ce6a1ab2d1",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5148,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:4c180aa9-7f47-45b2-8e3f-faec7bec37cd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5983,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 279,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:283e7f88-005e-4909-bac8-5a04aac3e7d9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:b8b3d12f-2e67-404f-b67f-2486da3594f3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require(\n          './input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await injectOrReject(endpoints,\n          './input/credential-missing-base-context-fail-or-inject.json');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:ba193820-34ab-44f5-b8ae-77c8de1ef113",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 612,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:c55a2091-9cda-4c6a-b837-9953532cfeb0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:64ae498e-5c65-4d38-bafb-c9fb8d26052a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5340,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:85548b13-a540-41b4-b640-9b5e936887ae",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:15f45b6d-39ab-4cfe-9901-368a6be84e76",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8522,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:3ba0893a-00ae-4af2-a7e8-58817a2300ad",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json')\n        });\n        vp['@context'] = [\n          'https://www.w3.org/ns/credentials/examples/v2',\n          'https://www.w3.org/ns/credentials/v2'\n        ];\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with unordered @context.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:75dd29b6-85c6-4092-bff0-1fcdbcdfe3c5",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10908,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:6abab050-dc2f-4c93-92c4-c157d94c6856",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:22b8e78e-2047-4564-a74d-726bed8e3bd5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 283,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:5c9dfaff-83cb-4ab3-8474-4e751f025107",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 684,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:9b9fb1bf-5902-41b2-ab69-ac5ec51d5d91",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:bdfad4ce-d183-44bb-8d4f-e45700d45935",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json')),\n        'Failed to support multiple `@context` URLs.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json')),\n        'Failed to support objects in the `@context` Array.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:ebfb8894-4b0e-4b59-8333-86a709d1db58",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable Credential `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 523,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "j91p-Fk7mCIxPAxwHWo4C",
              "ctx": null,
              "_testId": "urn:uuid:f8312b3b-5172-41a9-a950-40f72f3b9a07",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4840,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z25nueHgDVx3tKbgE1g4BcWnKXZSZyps8pyhkyGKwF1b4qUHJsDkcduymgsctnDpW9aDXBAcyrTEwYGjvydMXWbV1\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:05:13Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:13Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z25nueHgDVx3tKbgE1g4BcWnKXZSZyps8pyhkyGKwF1b4qUHJsDkcduymgsctnDpW9aDXBAcyrTEwYGjvydMXWbV1"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/presentations/verify",
                  "status": 500
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "uwko43D5gkx2TjkYy_BQb",
              "ctx": null,
              "_testId": "urn:uuid:5395e19d-9cba-4f18-970b-2274f7b57781",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:14Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z45ZhaSD9WcaHn4mLewW56Zk3TT6kzXghUYMrgdTFpttud9BcoYNX3PcaAEaZ6EE9Bu98GRfHW4z1sKP1bepgmoMM\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:05:13Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:14Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z45ZhaSD9WcaHn4mLewW56Zk3TT6kzXghUYMrgdTFpttud9BcoYNX3PcaAEaZ6EE9Bu98GRfHW4z1sKP1bepgmoMM"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "k4CjehAnvbUTNzF88v-To",
              "ctx": null,
              "_testId": "urn:uuid:24a67b08-2106-489d-9d72-9f020e76d354",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7021,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 889,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "HwTfqT8aVYkgAJ2LgDQss",
              "ctx": null,
              "_testId": "urn:uuid:dc14ea64-a914-4e9f-89df-edc62cc7901c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 324,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "ozSoKYbUkklfaCGvAj8Yh",
              "ctx": null,
              "_testId": "urn:uuid:1f7240a9-ae00-49a4-8575-86032a4cd9fa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9722,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:18Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z2Z9jcrjPYvoHzaGk3CpGFHrfT9jAamZ1LdoUFLU5c5HFsxwzQCnBYJjPnNtn28B2ZShEGJ4LNnLmGfjbCxgWpFdW\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:05:13Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:18Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z2Z9jcrjPYvoHzaGk3CpGFHrfT9jAamZ1LdoUFLU5c5HFsxwzQCnBYJjPnNtn28B2ZShEGJ4LNnLmGfjbCxgWpFdW"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo1-ok.json')\n          })),\n          'Failed to support multiple `@context` URLs in a VP.');\n        await assert.doesNotReject(\n          endpoints.verifyVp(await endpoints.createVp({\n            presentation:\n              require('./input/presentation-context-combo2-ok.json')\n          })),\n          'Failed to support objects in the `@context` Array in a VP.');\n        // first create a valid VP\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        // then inject incorrect `@context` values and test verification\n        vp['@context'][1] = 'https://example.com';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 'https ://not-a-url/contexts/example/v1';\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an invalid `@context` URL.');\n        vp['@context'][1] = 123192875;\n        await assert.rejects(endpoints.verifyVp(vp),\n          'Failed to reject a VP with an unsupported `@context` value type ' +\n          '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-3-contexts.js",
              "parent": "OAnbshQyNkMaTVyMx1-7W",
              "ctx": null,
              "_testId": "urn:uuid:654b9ca0-fc2f-4398-94b3-6ce1fd33f0ae",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable Presentation `@context`: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 327,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:13Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:20Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z2krm3cnx3bPsum7HuM3q4maZ2UUgsnSTTrr6u5w9wF9Vkvsyx8YUoJtsCM382tq1WxMGgCBpwPsZdT2KhZEWfQXR\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:05:13Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z3qe2mhVxZMRvjVB6fkzJUjjGmp18Mrxow5X3fSbMQWYbMPtEZEsqUnc6BasKdUEnQ6b5x8sBskqmu1wu4HWMiQ7d"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:20Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z2krm3cnx3bPsum7HuM3q4maZ2UUgsnSTTrr6u5w9wF9Vkvsyx8YUoJtsCM382tq1WxMGgCBpwPsZdT2KhZEWfQXR"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-issuer-mock.onrender.com/didkit-http/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Identifiers",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "Ye-4NsakTJnAE9vy494kD",
              "ctx": null,
              "_testId": "urn:uuid:a52aa9fa-7b35-4aca-83d8-d5af23fd6762",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 493,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Ye-4NsakTJnAE9vy494kD",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8f--tv1gF9aUUDxlrAJxy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
          "_testId": "urn:uuid:5610141f-1fac-41cc-a801-ef251f3a4a1d"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "HfG0vEaV3A5qBWhyz3xzf",
              "ctx": null,
              "_testId": "urn:uuid:6bbbf677-32b9-42bc-8165-033b78956923",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 912,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HfG0vEaV3A5qBWhyz3xzf",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8f--tv1gF9aUUDxlrAJxy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
          "_testId": "urn:uuid:c1da432b-5e27-4f44-9f04-395e39a37890"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "gR0osVCWAS68jkVCAT2kx",
              "ctx": null,
              "_testId": "urn:uuid:175aa1f0-7740-4b83-92c7-a3c7bdc4a7a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13298,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 894,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gR0osVCWAS68jkVCAT2kx",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8f--tv1gF9aUUDxlrAJxy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
          "_testId": "urn:uuid:692df152-4262-43bb-99bd-277061326bc6"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "MD1cf5msx40Ni2zXtBjB4",
              "ctx": null,
              "_testId": "urn:uuid:2f913280-4ef5-4633-916a-67880f096c9a",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 630,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MD1cf5msx40Ni2zXtBjB4",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8f--tv1gF9aUUDxlrAJxy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
          "_testId": "urn:uuid:866ca58d-ddd5-4b45-9c12-374ebebe25b8"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "j0aSiYCHVDmSPtHlWD1QU",
              "ctx": null,
              "_testId": "urn:uuid:b96acdb4-6306-489e-95cd-3bddc583c5b1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 370,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "j0aSiYCHVDmSPtHlWD1QU",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8f--tv1gF9aUUDxlrAJxy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
          "_testId": "urn:uuid:91e498fe-83fd-4463-8d8b-f1ef6352d52b"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "gL96osfwERifLwcnEGWpP",
              "ctx": null,
              "_testId": "urn:uuid:a1b3b2db-8ef2-421c-9f32-1ca822d5159a",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 946,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gL96osfwERifLwcnEGWpP",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8f--tv1gF9aUUDxlrAJxy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
          "_testId": "urn:uuid:ee84ed8e-494b-4b69-8701-bb87e0e11ce9"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:400c855e-c6be-45e5-b4d8-57ae5622a01c",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "Ye-4NsakTJnAE9vy494kD",
              "ctx": null,
              "_testId": "urn:uuid:a52aa9fa-7b35-4aca-83d8-d5af23fd6762",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 493,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "HfG0vEaV3A5qBWhyz3xzf",
              "ctx": null,
              "_testId": "urn:uuid:6bbbf677-32b9-42bc-8165-033b78956923",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 912,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "gR0osVCWAS68jkVCAT2kx",
              "ctx": null,
              "_testId": "urn:uuid:175aa1f0-7740-4b83-92c7-a3c7bdc4a7a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13298,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 894,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "MD1cf5msx40Ni2zXtBjB4",
              "ctx": null,
              "_testId": "urn:uuid:2f913280-4ef5-4633-916a-67880f096c9a",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 630,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "j0aSiYCHVDmSPtHlWD1QU",
              "ctx": null,
              "_testId": "urn:uuid:b96acdb4-6306-489e-95cd-3bddc583c5b1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 370,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-4-identifiers.js",
              "parent": "gL96osfwERifLwcnEGWpP",
              "ctx": null,
              "_testId": "urn:uuid:a1b3b2db-8ef2-421c-9f32-1ca822d5159a",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 946,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:e47eb25b-ef81-45f8-8aec-a75320c7d385",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:77fc0ab7-cf09-4fa7-b031-5fedcf063d6d",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:89a427bd-5b57-4a2e-b926-e6a8ef5fc69e",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16192,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:fa9271e4-24a7-4afc-ad3c-545fa533c292",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:067becc9-da5e-485a-b443-31274e1c620a",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16484,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:b05e3112-33df-4414-b577-7633dc194341",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:25Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z4hBJwTkx3pGqDjr36xUtWFVMaR8VCSZxxsSLDA5oZcbLSteGfPSsGFQQCuTkoPSVy2ZXxF8UPN2JDY1eyRdMCgTx\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:25Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z4hBJwTkx3pGqDjr36xUtWFVMaR8VCSZxxsSLDA5oZcbLSteGfPSsGFQQCuTkoPSVy2ZXxF8UPN2JDY1eyRdMCgTx"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/presentations/verify",
                  "status": 500
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:547203f3-d827-44f4-8366-8a3bc5990bb4",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:09c21006-e714-422d-9c94-eddc61a82394",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:f360f38a-56c6-4369-ad51-5760d9069010",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:d77f27e6-6c6c-4f05-a246-b1e59a82e1d0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:2afb1bb8-6c85-440a-9fcf-b6824576bc6b",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "oWENv5LI4eTryCBvd9pvR",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
          "_testId": "urn:uuid:52ba0d20-459d-4960-b2b1-02709c21110f"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:a6d795cd-fc60-4b03-93e8-92268444ccb9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:0573d39f-aa0a-4165-8fd9-fee60454a331",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:7f2139b7-0722-41d5-a245-95883dfeddf2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17076,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 458,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:ece08f49-2777-43f2-831f-ca965251e8f9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17535,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:854ca6d1-6808-495b-802b-17aa5445deb4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 234,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:cc8d51c1-292f-4ffe-9557-7d5241e9a625",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:26Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"zHRXgj25MiCtsHTK5nf9fhZGK2S9arrThoRDQEFF48Vq6n58h6vAB2dV7zgKq4ufy1m7KbRvgTedSdhdnMEjZsHX\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:26Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "zHRXgj25MiCtsHTK5nf9fhZGK2S9arrThoRDQEFF48Vq6n58h6vAB2dV7zgKq4ufy1m7KbRvgTedSdhdnMEjZsHX"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:7b69f011-257f-4b38-8345-5d9bdf7419a4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18106,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 398,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:32754237-72c0-4043-9805-eae1fba1e220",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 485,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:107168b8-345f-48ec-8ec0-ec06ba9b5fd6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 600,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:e36644c6-6492-4525-a8bd-3db2300189ae",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 601,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:7b7b232d-09c4-41af-a569-2ca28d25be7e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 493,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "oWENv5LI4eTryCBvd9pvR",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
          "_testId": "urn:uuid:473dd863-ceaf-44e9-ba81-c640761f3fba"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:5ea92253-4e8e-4a70-976c-e477cedbf0e5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:e90db7db-4dff-4f67-a203-5a3d2cb48121",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 240,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:bda40500-4e06-451d-9fbe-89f1e369657a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 314,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:287a3cbb-9400-4d4d-bacc-e0ef66938d66",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21439,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 184,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:b524cc05-205a-4fc9-b564-449a6d36ed85",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 140,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:e1e326f5-5571-47e1-b07b-b1e89b2507cc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:796c2013-14d9-4919-94a6-f2cd943c5b5e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21902,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:40d6c4e3-2528-4bf0-8ef1-91e63c897cf6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:b71f4105-2b96-4a9b-94e8-451667bec4b7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:c2d33fb2-8aaa-403a-a8df-628144993ef5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:6f510c8d-3f41-4b50-b662-6b848ee4782e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "oWENv5LI4eTryCBvd9pvR",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
          "_testId": "urn:uuid:a606b24c-46f8-4dfa-b943-da7dca726151"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:e5e291f4-42b3-4061-8574-c2c9c548e722",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:a7cf6af1-09ce-4ef4-874b-585f70dae7e0",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:c9b9bfe9-1676-4e00-9070-00d8bc9f18cf",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:357dd51a-cb49-4047-b525-1131a3d8dc2c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 130,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:87ed7479-7f74-4684-999d-965a225f6e40",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:f59fad29-62aa-480c-bce8-ec9ca2e69ab0",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23343,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:38725d94-e2e5-411d-9e4c-199da607ebc9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23474,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:676de961-9090-4e23-99c9-19114d662c3c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:e257463f-49da-487b-b435-5d786fd3af9e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:20d1b6e6-e8a4-49b7-89fb-58564057de18",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:a01babaa-db69-4032-9c36-5cf090296f5b",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24070,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "oWENv5LI4eTryCBvd9pvR",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
          "_testId": "urn:uuid:fb8fefe2-5d92-4643-819f-f2d097271368"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:da9e9465-e3a7-4817-ba62-e1a2549ca07b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:ace1db9b-25a2-4312-8684-61ca6291e0aa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:e3bea94b-d419-4982-8565-90ead153b690",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:78bc40cd-595f-4bdd-ac14-72769dfd7a5d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:067141f3-7a46-4d4d-b7d1-7a9e39c64bb4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:f63f062c-d648-496a-8e20-d520fd9a21f8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:33Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z4hSbDtgXmKGVuLTG1MEBicuvgYxDjWeLCnQYxEC2Tt9NvFG93vdqLfYJbYJDMTdAEDV5dQU8P9xEKU6komiS9kGf\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:33Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z4hSbDtgXmKGVuLTG1MEBicuvgYxDjWeLCnQYxEC2Tt9NvFG93vdqLfYJbYJDMTdAEDV5dQU8P9xEKU6komiS9kGf"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:ea857d50-57e1-4287-abf3-ed3dc68c59b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:2eb96973-895c-4d9e-8e48-060fd149d481",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:9d8da58e-8ed4-4995-a176-554486c77d80",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:28c458a8-128f-44e5-9679-5f871d71557c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:2fd8c661-2810-48a0-895e-408e18c32b22",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24952,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "oWENv5LI4eTryCBvd9pvR",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
          "_testId": "urn:uuid:d2f4d847-2b4b-473f-93ab-ef6c0e1dd207"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:6b6faea4-0856-49d3-9ee6-c8735644dd01",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:50d095d7-8f6d-4640-9053-1fb6788612cc",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:59036b05-778c-43d7-9421-34e0fa8b3e46",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 769,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:2a8ba3d8-445f-48d4-94e7-3a4f02edffcf",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 270,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:ffdffb19-c939-4c0d-892f-98108d807bbb",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:741f42ed-b93c-4fcf-90a5-9101de765590",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:35Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z5dkHuGtPge9iiw9NNjueiv8hFzH8pavkwj9Vc1svyi9KNtHqA91a6pgb6pBwo76faUjcZSKYyt3GQdXWC24byV88\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:35Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z5dkHuGtPge9iiw9NNjueiv8hFzH8pavkwj9Vc1svyi9KNtHqA91a6pgb6pBwo76faUjcZSKYyt3GQdXWC24byV88"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-issuer-mock.onrender.com/didkit-http/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:40b788f9-5b75-412d-bf30-a18e28788178",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 255,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:9f452ece-d969-4b90-8939-2f7a38943323",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 262,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:93cb266f-a03b-4ab1-ac99-7445ec040b59",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 272,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:777a12f8-e7a3-4faf-a588-1bbdfae24c56",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 291,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:c064c8de-c470-4722-9cb2-2627a43cf44e",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 307,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "oWENv5LI4eTryCBvd9pvR",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
          "_testId": "urn:uuid:a8375307-6416-4cdd-90ba-368991adc9aa"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:25b35e5e-5c5c-4f9b-b987-d5f2377de509",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "Verifiable credentials MUST contain a type property with an associated value.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:e47eb25b-ef81-45f8-8aec-a75320c7d385",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16140,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:a6d795cd-fc60-4b03-93e8-92268444ccb9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:5ea92253-4e8e-4a70-976c-e477cedbf0e5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:e5e291f4-42b3-4061-8574-c2c9c548e722",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:da9e9465-e3a7-4817-ba62-e1a2549ca07b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:6b6faea4-0856-49d3-9ee6-c8735644dd01",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable presentations MUST contain a type property with an associated value.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:77fc0ab7-cf09-4fa7-b031-5fedcf063d6d",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:0573d39f-aa0a-4165-8fd9-fee60454a331",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:e90db7db-4dff-4f67-a203-5a3d2cb48121",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 240,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:a7cf6af1-09ce-4ef4-874b-585f70dae7e0",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:ace1db9b-25a2-4312-8684-61ca6291e0aa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:50d095d7-8f6d-4640-9053-1fb6788612cc",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:89a427bd-5b57-4a2e-b926-e6a8ef5fc69e",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16192,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:7f2139b7-0722-41d5-a245-95883dfeddf2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17076,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 458,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:bda40500-4e06-451d-9fbe-89f1e369657a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 314,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:c9b9bfe9-1676-4e00-9070-00d8bc9f18cf",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 264,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:e3bea94b-d419-4982-8565-90ead153b690",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:59036b05-778c-43d7-9421-34e0fa8b3e46",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 769,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If more than one (type) value is provided, the order does not matter.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
          "cells": [
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:fa9271e4-24a7-4afc-ad3c-545fa533c292",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:ece08f49-2777-43f2-831f-ca965251e8f9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17535,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:287a3cbb-9400-4d4d-bacc-e0ef66938d66",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21439,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 184,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:357dd51a-cb49-4047-b525-1131a3d8dc2c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 130,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:78bc40cd-595f-4bdd-ac14-72769dfd7a5d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:2a8ba3d8-445f-48d4-94e7-3a4f02edffcf",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 270,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable Credential objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:067becc9-da5e-485a-b443-31274e1c620a",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16484,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:854ca6d1-6808-495b-802b-17aa5445deb4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 234,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:b524cc05-205a-4fc9-b564-449a6d36ed85",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 140,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:87ed7479-7f74-4684-999d-965a225f6e40",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:067141f3-7a46-4d4d-b7d1-7a9e39c64bb4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:ffdffb19-c939-4c0d-892f-98108d807bbb",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable Presentation objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:b05e3112-33df-4414-b577-7633dc194341",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:25Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z4hBJwTkx3pGqDjr36xUtWFVMaR8VCSZxxsSLDA5oZcbLSteGfPSsGFQQCuTkoPSVy2ZXxF8UPN2JDY1eyRdMCgTx\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:25Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z4hBJwTkx3pGqDjr36xUtWFVMaR8VCSZxxsSLDA5oZcbLSteGfPSsGFQQCuTkoPSVy2ZXxF8UPN2JDY1eyRdMCgTx"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/presentations/verify",
                  "status": 500
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:cc8d51c1-292f-4ffe-9557-7d5241e9a625",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:26Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"zHRXgj25MiCtsHTK5nf9fhZGK2S9arrThoRDQEFF48Vq6n58h6vAB2dV7zgKq4ufy1m7KbRvgTedSdhdnMEjZsHX\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:26Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "zHRXgj25MiCtsHTK5nf9fhZGK2S9arrThoRDQEFF48Vq6n58h6vAB2dV7zgKq4ufy1m7KbRvgTedSdhdnMEjZsHX"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:e1e326f5-5571-47e1-b07b-b1e89b2507cc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:f59fad29-62aa-480c-bce8-ec9ca2e69ab0",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23343,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:f63f062c-d648-496a-8e20-d520fd9a21f8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:33Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z4hSbDtgXmKGVuLTG1MEBicuvgYxDjWeLCnQYxEC2Tt9NvFG93vdqLfYJbYJDMTdAEDV5dQU8P9xEKU6komiS9kGf\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:33Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z4hSbDtgXmKGVuLTG1MEBicuvgYxDjWeLCnQYxEC2Tt9NvFG93vdqLfYJbYJDMTdAEDV5dQU8P9xEKU6komiS9kGf"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json')\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            {name: 'HTTPError'},\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:741f42ed-b93c-4fcf-90a5-9101de765590",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:05:35Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z5dkHuGtPge9iiw9NNjueiv8hFzH8pavkwj9Vc1svyi9KNtHqA91a6pgb6pBwo76faUjcZSKYyt3GQdXWC24byV88\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:05:35Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z5dkHuGtPge9iiw9NNjueiv8hFzH8pavkwj9Vc1svyi9KNtHqA91a6pgb6pBwo76faUjcZSKYyt3GQdXWC24byV88"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-issuer-mock.onrender.com/didkit-http/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            }
          ]
        },
        {
          "id": "`credentialStatus` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:547203f3-d827-44f4-8366-8a3bc5990bb4",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:7b69f011-257f-4b38-8345-5d9bdf7419a4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18106,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 398,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:796c2013-14d9-4919-94a6-f2cd943c5b5e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21902,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:38725d94-e2e5-411d-9e4c-199da607ebc9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23474,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:ea857d50-57e1-4287-abf3-ed3dc68c59b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:40b788f9-5b75-412d-bf30-a18e28788178",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 255,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`termsOfUse` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:09c21006-e714-422d-9c94-eddc61a82394",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:32754237-72c0-4043-9805-eae1fba1e220",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 485,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:40d6c4e3-2528-4bf0-8ef1-91e63c897cf6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:676de961-9090-4e23-99c9-19114d662c3c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:2eb96973-895c-4d9e-8e48-060fd149d481",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:9f452ece-d969-4b90-8939-2f7a38943323",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 262,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`evidence` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:f360f38a-56c6-4369-ad51-5760d9069010",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:107168b8-345f-48ec-8ec0-ec06ba9b5fd6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 600,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:b71f4105-2b96-4a9b-94e8-451667bec4b7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:e257463f-49da-487b-b435-5d786fd3af9e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:9d8da58e-8ed4-4995-a176-554486c77d80",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:93cb266f-a03b-4ab1-ac99-7445ec040b59",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 272,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`refreshService` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:d77f27e6-6c6c-4f05-a246-b1e59a82e1d0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:e36644c6-6492-4525-a8bd-3db2300189ae",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 601,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:c2d33fb2-8aaa-403a-a8df-628144993ef5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:20d1b6e6-e8a4-49b7-89fb-58564057de18",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:28c458a8-128f-44e5-9679-5f871d71557c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:777a12f8-e7a3-4faf-a588-1bbdfae24c56",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 291,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`credentialSchema` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "zdXJ19i8msYab4Eu8Dj7Q",
              "ctx": null,
              "_testId": "urn:uuid:2afb1bb8-6c85-440a-9fcf-b6824576bc6b",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "MybUQxpNjzA7zZsuadbBm",
              "ctx": null,
              "_testId": "urn:uuid:7b7b232d-09c4-41af-a569-2ca28d25be7e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 493,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "NXNEogsaDeNN72e89narS",
              "ctx": null,
              "_testId": "urn:uuid:6f510c8d-3f41-4b50-b662-6b848ee4782e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22507,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "5saWQ4LUfxH01NcQnVywk",
              "ctx": null,
              "_testId": "urn:uuid:a01babaa-db69-4032-9c36-5cf090296f5b",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24070,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "FTZqd6aYCTejELEpYpFN0",
              "ctx": null,
              "_testId": "urn:uuid:2fd8c661-2810-48a0-895e-408e18c32b22",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24952,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-5-types.js",
              "parent": "Oq-2kcp_5jH6ReA-pEKqe",
              "ctx": null,
              "_testId": "urn:uuid:c064c8de-c470-4722-9cb2-2627a43cf44e",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 307,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Names and Descriptions",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "_testId": "urn:uuid:75fd92b0-1bf3-483c-8adf-97a0ef8f9337",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 458,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "_testId": "urn:uuid:f059d530-f902-4476-82b3-f3e535503c07",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 297,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "_testId": "urn:uuid:b1588b7f-11e4-4e4d-80cf-dbc8afdfe4b5",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28932,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 255,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "_testId": "urn:uuid:c6d8a0ce-1493-4f7f-887d-4233292e692d",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 190,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fr3gKnXEYDXHOOf-_5__1",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
          "_testId": "urn:uuid:eb733acf-3017-4abf-88ed-d416b43f70de"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "_testId": "urn:uuid:e61f4bb1-37e9-41c4-8c51-57726151787a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 763,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "_testId": "urn:uuid:197603f5-5f44-4426-a77a-979d54504953",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1240,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "_testId": "urn:uuid:96e04ebb-177d-462e-a642-a25b3f3ce7b0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 982,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "_testId": "urn:uuid:4007e2fb-3437-4e09-9a38-0ea6f3456409",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32363,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 729,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fr3gKnXEYDXHOOf-_5__1",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
          "_testId": "urn:uuid:f7ab410a-b396-4c9d-8a86-583635ef4387"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "_testId": "urn:uuid:f8cbc219-12c3-44e1-a18d-cac7215af865",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 375,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "name": {
                          "@value": "Example Credential",
                          "@language": "en"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"name\":{\"@value\":\"Example Credential\",\"@language\":\"en\"},\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Issue Credential' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should be string\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be string",
                          "details": {
                            "instance": {
                              "credential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2"
                                ],
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "name": {
                                  "@value": "Example Credential",
                                  "@language": "en"
                                },
                                "credentialSubject": {
                                  "id": "did:example:subject"
                                },
                                "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                              }
                            },
                            "params": {
                              "type": "string"
                            },
                            "path": ".credential.name",
                            "public": true,
                            "schemaPath": "#/properties/credential/properties/name/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": {
                              "@value": "Example Credential",
                              "@language": "en"
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Issue Credential' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "_testId": "urn:uuid:c251262b-fd51-4450-a855-9515b2f96172",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "description": {
                          "@value": "An Example Credential",
                          "@language": "en"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"description\":{\"@value\":\"An Example Credential\",\"@language\":\"en\"},\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Issue Credential' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should be string\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be string",
                          "details": {
                            "instance": {
                              "credential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2"
                                ],
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "description": {
                                  "@value": "An Example Credential",
                                  "@language": "en"
                                },
                                "credentialSubject": {
                                  "id": "did:example:subject"
                                },
                                "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                              }
                            },
                            "params": {
                              "type": "string"
                            },
                            "path": ".credential.description",
                            "public": true,
                            "schemaPath": "#/properties/credential/properties/description/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": {
                              "@value": "An Example Credential",
                              "@language": "en"
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Issue Credential' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "_testId": "urn:uuid:96d4032b-70a3-4f6e-8779-07c98bf97a7c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33678,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 283,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": {
                          "name": {
                            "@value": "ExampleIssuer",
                            "@language": "en",
                            "@direction": "ltr"
                          },
                          "id": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        }
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"name\":{\"@value\":\"ExampleIssuer\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"id\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "DataError",
                    "message": "Invalid credential.",
                    "details": {
                      "error": {
                        "message": "Safe mode validation error.",
                        "name": "jsonld.ValidationError",
                        "details": {
                          "event": {
                            "type": [
                              "JsonLdEvent"
                            ],
                            "code": "rdfDirection not set",
                            "level": "warning",
                            "message": "rdfDirection not set for @direction.",
                            "details": {}
                          }
                        }
                      },
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "DataError: Invalid credential.\n    at _throwWrappedError (file:///home/node/app/node_modules/@bedrock/vc-issuer/lib/http.js:141:17)\n    at file:///home/node/app/node_modules/@bedrock/vc-issuer/lib/http.js:115:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "DataError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "_testId": "urn:uuid:d8beced3-92bd-42b0-9802-2a1b50725b1a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33961,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 266,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": {
                          "description": {
                            "@value": "An Example Issuer",
                            "@language": "en",
                            "@direction": "ltr"
                          },
                          "id": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        }
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"description\":{\"@value\":\"An Example Issuer\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"id\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "DataError",
                    "message": "Invalid credential.",
                    "details": {
                      "error": {
                        "message": "Safe mode validation error.",
                        "name": "jsonld.ValidationError",
                        "details": {
                          "event": {
                            "type": [
                              "JsonLdEvent"
                            ],
                            "code": "rdfDirection not set",
                            "level": "warning",
                            "message": "rdfDirection not set for @direction.",
                            "details": {}
                          }
                        }
                      },
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "DataError: Invalid credential.\n    at _throwWrappedError (file:///home/node/app/node_modules/@bedrock/vc-issuer/lib/http.js:141:17)\n    at file:///home/node/app/node_modules/@bedrock/vc-issuer/lib/http.js:115:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "DataError"
                  }
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fr3gKnXEYDXHOOf-_5__1",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
          "_testId": "urn:uuid:3175637f-95d1-4248-a070-e75580d6e864"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "_testId": "urn:uuid:d70aec0a-9484-4e7c-974c-01c099bb241c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34228,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 468,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "_testId": "urn:uuid:8b60472c-a2a9-4c6c-9347-d6b287cd9740",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 470,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "_testId": "urn:uuid:8d367c08-7107-411b-b812-f6f8ce238510",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35166,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 486,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "_testId": "urn:uuid:bc247be0-7eff-4c73-87d5-7eebe2651252",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 477,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fr3gKnXEYDXHOOf-_5__1",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
          "_testId": "urn:uuid:b20dbe25-14bd-4d02-a667-8f6fde2196e6"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "_testId": "urn:uuid:b8619de2-59ec-4f06-b588-cf72cff134b9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 318,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "_testId": "urn:uuid:a92d5e53-66fa-4a61-b62a-783dc654216d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36448,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 263,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "_testId": "urn:uuid:5b481b6d-05b9-40fb-b50e-c40661d322f5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 249,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "_testId": "urn:uuid:2ad3836f-c662-4838-9fe0-114d8af1c90b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 253,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fr3gKnXEYDXHOOf-_5__1",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
          "_testId": "urn:uuid:7179bc95-9ac0-4d06-a236-a6ffea7c1ee3"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "_testId": "urn:uuid:9400d877-07d1-4388-a5ed-71a247f83a99",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37215,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 901,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "_testId": "urn:uuid:1ad720c9-6edc-4fad-a9aa-209d298ba1e0",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38116,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "_testId": "urn:uuid:e4cb5f97-c925-4b1c-a4d7-7ede9d95bbf1",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "_testId": "urn:uuid:98050a9e-1147-40c6-8faa-84929d8d55c8",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 799,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fr3gKnXEYDXHOOf-_5__1",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
          "_testId": "urn:uuid:0c21eb47-5cc5-4eb5-9a18-7ebf6de2aa57"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:11657f0b-e8f0-40b5-aed9-6ff4b8fb0317",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "_testId": "urn:uuid:75fd92b0-1bf3-483c-8adf-97a0ef8f9337",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 458,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "_testId": "urn:uuid:e61f4bb1-37e9-41c4-8c51-57726151787a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 763,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "_testId": "urn:uuid:f8cbc219-12c3-44e1-a18d-cac7215af865",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 375,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "name": {
                          "@value": "Example Credential",
                          "@language": "en"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"name\":{\"@value\":\"Example Credential\",\"@language\":\"en\"},\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Issue Credential' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should be string\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be string",
                          "details": {
                            "instance": {
                              "credential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2"
                                ],
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "name": {
                                  "@value": "Example Credential",
                                  "@language": "en"
                                },
                                "credentialSubject": {
                                  "id": "did:example:subject"
                                },
                                "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                              }
                            },
                            "params": {
                              "type": "string"
                            },
                            "path": ".credential.name",
                            "public": true,
                            "schemaPath": "#/properties/credential/properties/name/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": {
                              "@value": "Example Credential",
                              "@language": "en"
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Issue Credential' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "_testId": "urn:uuid:d70aec0a-9484-4e7c-974c-01c099bb241c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34228,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 468,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "_testId": "urn:uuid:b8619de2-59ec-4f06-b588-cf72cff134b9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 318,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "_testId": "urn:uuid:9400d877-07d1-4388-a5ed-71a247f83a99",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37215,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 901,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "_testId": "urn:uuid:f059d530-f902-4476-82b3-f3e535503c07",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 297,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "_testId": "urn:uuid:197603f5-5f44-4426-a77a-979d54504953",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1240,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "_testId": "urn:uuid:c251262b-fd51-4450-a855-9515b2f96172",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "description": {
                          "@value": "An Example Credential",
                          "@language": "en"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"description\":{\"@value\":\"An Example Credential\",\"@language\":\"en\"},\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Issue Credential' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should be string\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be string",
                          "details": {
                            "instance": {
                              "credential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2"
                                ],
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "description": {
                                  "@value": "An Example Credential",
                                  "@language": "en"
                                },
                                "credentialSubject": {
                                  "id": "did:example:subject"
                                },
                                "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                              }
                            },
                            "params": {
                              "type": "string"
                            },
                            "path": ".credential.description",
                            "public": true,
                            "schemaPath": "#/properties/credential/properties/description/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": {
                              "@value": "An Example Credential",
                              "@language": "en"
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Issue Credential' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "_testId": "urn:uuid:8b60472c-a2a9-4c6c-9347-d6b287cd9740",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 470,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "_testId": "urn:uuid:a92d5e53-66fa-4a61-b62a-783dc654216d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36448,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 263,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "_testId": "urn:uuid:1ad720c9-6edc-4fad-a9aa-209d298ba1e0",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38116,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1126,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "_testId": "urn:uuid:b1588b7f-11e4-4e4d-80cf-dbc8afdfe4b5",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28932,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 255,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "_testId": "urn:uuid:96e04ebb-177d-462e-a642-a25b3f3ce7b0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 982,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "_testId": "urn:uuid:96d4032b-70a3-4f6e-8779-07c98bf97a7c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33678,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 283,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": {
                          "name": {
                            "@value": "ExampleIssuer",
                            "@language": "en",
                            "@direction": "ltr"
                          },
                          "id": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        }
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"name\":{\"@value\":\"ExampleIssuer\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"id\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "DataError",
                    "message": "Invalid credential.",
                    "details": {
                      "error": {
                        "message": "Safe mode validation error.",
                        "name": "jsonld.ValidationError",
                        "details": {
                          "event": {
                            "type": [
                              "JsonLdEvent"
                            ],
                            "code": "rdfDirection not set",
                            "level": "warning",
                            "message": "rdfDirection not set for @direction.",
                            "details": {}
                          }
                        }
                      },
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "DataError: Invalid credential.\n    at _throwWrappedError (file:///home/node/app/node_modules/@bedrock/vc-issuer/lib/http.js:141:17)\n    at file:///home/node/app/node_modules/@bedrock/vc-issuer/lib/http.js:115:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "DataError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "_testId": "urn:uuid:8d367c08-7107-411b-b812-f6f8ce238510",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35166,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 486,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "_testId": "urn:uuid:5b481b6d-05b9-40fb-b50e-c40661d322f5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 249,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "_testId": "urn:uuid:e4cb5f97-c925-4b1c-a4d7-7ede9d95bbf1",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1199,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "niq9Ko-kq8ucf8q-djiT7",
              "ctx": null,
              "_testId": "urn:uuid:c6d8a0ce-1493-4f7f-887d-4233292e692d",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 190,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "4oPkqZ94HhMHFs37aLL4Y",
              "ctx": null,
              "_testId": "urn:uuid:4007e2fb-3437-4e09-9a38-0ea6f3456409",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32363,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 729,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "WRXxtp_Bdr1SNrlGCOVR8",
              "ctx": null,
              "_testId": "urn:uuid:d8beced3-92bd-42b0-9802-2a1b50725b1a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33961,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 266,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": {
                          "description": {
                            "@value": "An Example Issuer",
                            "@language": "en",
                            "@direction": "ltr"
                          },
                          "id": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        }
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"description\":{\"@value\":\"An Example Issuer\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"id\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "DataError",
                    "message": "Invalid credential.",
                    "details": {
                      "error": {
                        "message": "Safe mode validation error.",
                        "name": "jsonld.ValidationError",
                        "details": {
                          "event": {
                            "type": [
                              "JsonLdEvent"
                            ],
                            "code": "rdfDirection not set",
                            "level": "warning",
                            "message": "rdfDirection not set for @direction.",
                            "details": {}
                          }
                        }
                      },
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "DataError: Invalid credential.\n    at _throwWrappedError (file:///home/node/app/node_modules/@bedrock/vc-issuer/lib/http.js:141:17)\n    at file:///home/node/app/node_modules/@bedrock/vc-issuer/lib/http.js:115:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "type": "DataError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "aujKGh1d5aR6u64zY-WnS",
              "ctx": null,
              "_testId": "urn:uuid:bc247be0-7eff-4c73-87d5-7eebe2651252",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35653,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 477,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "ieH3YDf-bwSOzl1pHJsKs",
              "ctx": null,
              "_testId": "urn:uuid:2ad3836f-c662-4838-9fe0-114d8af1c90b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 253,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-6-names-and-descriptions.js",
              "parent": "Xj1D1GV3uIDVzmYhQqEi2",
              "ctx": null,
              "_testId": "urn:uuid:98050a9e-1147-40c6-8faa-84929d8d55c8",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 799,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Issuer",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "1KEFAjN3n5JRUwtucdBZ9",
              "ctx": null,
              "_testId": "urn:uuid:ceaa2dea-1976-4f89-bb50-6e8c8e53f950",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "1KEFAjN3n5JRUwtucdBZ9",
              "ctx": null,
              "_testId": "urn:uuid:d08e199a-56d1-47e8-bd26-e64469214688",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 271,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1KEFAjN3n5JRUwtucdBZ9",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yTnKWPcOKjufsg4jQeALB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
          "_testId": "urn:uuid:b65be727-2320-4b30-92e9-6bfc5b8d7681"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "fWk9FYYcCmKWnLavb0NE9",
              "ctx": null,
              "_testId": "urn:uuid:e9fc3405-fe3a-41e1-bbdd-49598ca936a8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "fWk9FYYcCmKWnLavb0NE9",
              "ctx": null,
              "_testId": "urn:uuid:b9c4b8f3-7a43-46db-9645-17388e914c20",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 222,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fWk9FYYcCmKWnLavb0NE9",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yTnKWPcOKjufsg4jQeALB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
          "_testId": "urn:uuid:f244f53d-4031-4b01-a77f-af4e98de974a"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "vA3uWUMJPc64DDrp0Z_NE",
              "ctx": null,
              "_testId": "urn:uuid:91eec304-d52e-4f5d-ad2f-2a55e08a5802",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 329,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "vA3uWUMJPc64DDrp0Z_NE",
              "ctx": null,
              "_testId": "urn:uuid:d353fd17-7f6b-4ea9-9b62-437a906aa035",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vA3uWUMJPc64DDrp0Z_NE",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yTnKWPcOKjufsg4jQeALB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
          "_testId": "urn:uuid:bda16177-c776-42b4-829a-a68150bb6c40"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "9W9AmGAgHIU5lOJB7pz7h",
              "ctx": null,
              "_testId": "urn:uuid:8122a52f-c142-4256-802f-beee7a8aadac",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42626,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "9W9AmGAgHIU5lOJB7pz7h",
              "ctx": null,
              "_testId": "urn:uuid:ffd3aff0-d3f4-4f87-9a70-6d0475faaaad",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 467,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9W9AmGAgHIU5lOJB7pz7h",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yTnKWPcOKjufsg4jQeALB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
          "_testId": "urn:uuid:3dc2cee9-38ab-4936-ab74-4160273601f1"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "rbkcje3yiTgfVrgGgWD0u",
              "ctx": null,
              "_testId": "urn:uuid:1c43bc8d-8b23-446b-af12-4eaba7a2d81e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "rbkcje3yiTgfVrgGgWD0u",
              "ctx": null,
              "_testId": "urn:uuid:9e78b0f9-63c5-455d-88c3-5d78a6fc5a45",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "rbkcje3yiTgfVrgGgWD0u",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yTnKWPcOKjufsg4jQeALB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
          "_testId": "urn:uuid:bab89ea7-1fcb-4446-9a9b-a83e10b47695"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "KhPWIj3dlt1OIw3fHTvvr",
              "ctx": null,
              "_testId": "urn:uuid:01e3c22d-752e-4bfe-b661-cc9269d89a4f",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43465,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "KhPWIj3dlt1OIw3fHTvvr",
              "ctx": null,
              "_testId": "urn:uuid:e4ed9008-ad3f-4b33-8788-42ea8b869246",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 691,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KhPWIj3dlt1OIw3fHTvvr",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yTnKWPcOKjufsg4jQeALB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
          "_testId": "urn:uuid:e1d501e5-74de-492c-8865-ca2d6fa13a0e"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:6e1b9eaa-3aba-4a8b-b8a4-fc96088ab6e0",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "A verifiable credential MUST have an issuer property.",
          "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
          "cells": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "1KEFAjN3n5JRUwtucdBZ9",
              "ctx": null,
              "_testId": "urn:uuid:ceaa2dea-1976-4f89-bb50-6e8c8e53f950",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "fWk9FYYcCmKWnLavb0NE9",
              "ctx": null,
              "_testId": "urn:uuid:e9fc3405-fe3a-41e1-bbdd-49598ca936a8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 239,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "vA3uWUMJPc64DDrp0Z_NE",
              "ctx": null,
              "_testId": "urn:uuid:91eec304-d52e-4f5d-ad2f-2a55e08a5802",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 329,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "9W9AmGAgHIU5lOJB7pz7h",
              "ctx": null,
              "_testId": "urn:uuid:8122a52f-c142-4256-802f-beee7a8aadac",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42626,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "rbkcje3yiTgfVrgGgWD0u",
              "ctx": null,
              "_testId": "urn:uuid:1c43bc8d-8b23-446b-af12-4eaba7a2d81e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "KhPWIj3dlt1OIw3fHTvvr",
              "ctx": null,
              "_testId": "urn:uuid:01e3c22d-752e-4bfe-b661-cc9269d89a4f",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43465,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
          "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "1KEFAjN3n5JRUwtucdBZ9",
              "ctx": null,
              "_testId": "urn:uuid:d08e199a-56d1-47e8-bd26-e64469214688",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 271,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "fWk9FYYcCmKWnLavb0NE9",
              "ctx": null,
              "_testId": "urn:uuid:b9c4b8f3-7a43-46db-9645-17388e914c20",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41886,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 222,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "vA3uWUMJPc64DDrp0Z_NE",
              "ctx": null,
              "_testId": "urn:uuid:d353fd17-7f6b-4ea9-9b62-437a906aa035",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "9W9AmGAgHIU5lOJB7pz7h",
              "ctx": null,
              "_testId": "urn:uuid:ffd3aff0-d3f4-4f87-9a70-6d0475faaaad",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 467,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "rbkcje3yiTgfVrgGgWD0u",
              "ctx": null,
              "_testId": "urn:uuid:9e78b0f9-63c5-455d-88c3-5d78a6fc5a45",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-7-issuer.js",
              "parent": "KhPWIj3dlt1OIw3fHTvvr",
              "ctx": null,
              "_testId": "urn:uuid:e4ed9008-ad3f-4b33-8788-42ea8b869246",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 691,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Credential Subject",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "pJp6rksJcvnBVQknGfcex",
              "ctx": null,
              "_testId": "urn:uuid:09596a86-b388-4be2-bc36-ea8a985d3a17",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "pJp6rksJcvnBVQknGfcex",
              "ctx": null,
              "_testId": "urn:uuid:4166caa8-5b14-49d5-b11f-6f693d6b62d5",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pJp6rksJcvnBVQknGfcex",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dHGTLsB3WtJNFZ3V5iUpj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
          "_testId": "urn:uuid:93eb1a71-5ab3-4356-9a6a-a61de7d59ce5"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "7RDkT9IZoWoDbBsRmbJIg",
              "ctx": null,
              "_testId": "urn:uuid:0292e698-3c2b-46d9-b9aa-3236652090e2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44408,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "7RDkT9IZoWoDbBsRmbJIg",
              "ctx": null,
              "_testId": "urn:uuid:d257cacf-28d0-4e59-acc2-8ae3d5a4e432",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7RDkT9IZoWoDbBsRmbJIg",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dHGTLsB3WtJNFZ3V5iUpj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
          "_testId": "urn:uuid:e7c19f23-cf2f-420d-ac15-f68846301b1a"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "6GdfGxkuUIlOPrvzog909",
              "ctx": null,
              "_testId": "urn:uuid:a7da1fb8-831e-4b12-ab1d-15c235c456d8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "6GdfGxkuUIlOPrvzog909",
              "ctx": null,
              "_testId": "urn:uuid:ded67693-f7d8-40f1-a412-bc87da052e0a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6GdfGxkuUIlOPrvzog909",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dHGTLsB3WtJNFZ3V5iUpj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
          "_testId": "urn:uuid:7c806ea0-f26a-42ef-bff3-d600a84ca291"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "7G0QDn4-jvV6q3LqHN7lA",
              "ctx": null,
              "_testId": "urn:uuid:ce4d4809-ad04-4aeb-9cd8-ed1f75356b6e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "7G0QDn4-jvV6q3LqHN7lA",
              "ctx": null,
              "_testId": "urn:uuid:41a0150e-dfb8-47a3-be52-ae60b7f6b0ee",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7G0QDn4-jvV6q3LqHN7lA",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dHGTLsB3WtJNFZ3V5iUpj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
          "_testId": "urn:uuid:10d1f767-cf76-4bc2-9384-c3e20f99219b"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "a2vQ1kUGb0YuooUe-cggb",
              "ctx": null,
              "_testId": "urn:uuid:c53a247c-7bb6-44e7-adda-209207a04836",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "a2vQ1kUGb0YuooUe-cggb",
              "ctx": null,
              "_testId": "urn:uuid:d4154738-d67f-4fd2-9e9f-d388906cca00",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "a2vQ1kUGb0YuooUe-cggb",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dHGTLsB3WtJNFZ3V5iUpj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
          "_testId": "urn:uuid:808f91d7-adc1-48a4-af19-4d36ce18e3b3"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "AbbS_T0comKDGxrbOPpkC",
              "ctx": null,
              "_testId": "urn:uuid:9f425b4f-4b42-4be2-bd2a-7b38b9ef75f7",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "AbbS_T0comKDGxrbOPpkC",
              "ctx": null,
              "_testId": "urn:uuid:62d8edbf-5726-4cbd-a6fd-0737ccf47f42",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45325,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 564,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "AbbS_T0comKDGxrbOPpkC",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dHGTLsB3WtJNFZ3V5iUpj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
          "_testId": "urn:uuid:7a0d250c-56ef-4d08-b9ee-18707ec09824"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:912f6730-6db4-4191-9bd3-f23f044fba05",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "A verifiable credential MUST contain a credentialSubject property.",
          "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
          "cells": [
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "pJp6rksJcvnBVQknGfcex",
              "ctx": null,
              "_testId": "urn:uuid:09596a86-b388-4be2-bc36-ea8a985d3a17",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "7RDkT9IZoWoDbBsRmbJIg",
              "ctx": null,
              "_testId": "urn:uuid:0292e698-3c2b-46d9-b9aa-3236652090e2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44408,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "6GdfGxkuUIlOPrvzog909",
              "ctx": null,
              "_testId": "urn:uuid:a7da1fb8-831e-4b12-ab1d-15c235c456d8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "7G0QDn4-jvV6q3LqHN7lA",
              "ctx": null,
              "_testId": "urn:uuid:ce4d4809-ad04-4aeb-9cd8-ed1f75356b6e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "a2vQ1kUGb0YuooUe-cggb",
              "ctx": null,
              "_testId": "urn:uuid:c53a247c-7bb6-44e7-adda-209207a04836",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST contain a credentialSubject property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.`;\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-no-subject-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to rejet a VC without a `credentialSubject`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "AbbS_T0comKDGxrbOPpkC",
              "ctx": null,
              "_testId": "urn:uuid:9f425b4f-4b42-4be2-bd2a-7b38b9ef75f7",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A verifiable credential MUST contain a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20contain%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45193,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
          "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "pJp6rksJcvnBVQknGfcex",
              "ctx": null,
              "_testId": "urn:uuid:4166caa8-5b14-49d5-b11f-6f693d6b62d5",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "7RDkT9IZoWoDbBsRmbJIg",
              "ctx": null,
              "_testId": "urn:uuid:d257cacf-28d0-4e59-acc2-8ae3d5a4e432",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "6GdfGxkuUIlOPrvzog909",
              "ctx": null,
              "_testId": "urn:uuid:ded67693-f7d8-40f1-a412-bc87da052e0a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "7G0QDn4-jvV6q3LqHN7lA",
              "ctx": null,
              "_testId": "urn:uuid:41a0150e-dfb8-47a3-be52-ae60b7f6b0ee",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "a2vQ1kUGb0YuooUe-cggb",
              "ctx": null,
              "_testId": "urn:uuid:d4154738-d67f-4fd2-9e9f-d388906cca00",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-8-credential-subject.js",
              "parent": "AbbS_T0comKDGxrbOPpkC",
              "ctx": null,
              "_testId": "urn:uuid:62d8edbf-5726-4cbd-a6fd-0737ccf47f42",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the credentialSubject property is a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45325,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 564,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Validity Period",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:cb76bfa4-ba03-49cf-b7b1-118006efd440",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45890,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:56e48b5b-8918-4224-8b5c-f47e6035424c",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46018,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:42077752-0736-4e29-8322-fcef273ade0d",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:710a8b1c-7528-442c-b7de-1d86d90cea80",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:157af22f-e61f-4580-afef-e148f24729cd",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46323,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IoG7CkYVyvPYbLGNupXEd",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
          "_testId": "urn:uuid:a5636a8f-3b6b-47e4-81d5-3f1171d7b012"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:23169d80-df10-4e83-9e55-24924af40381",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46323,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 578,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:83ba62c7-6e10-4577-bef5-2b466d7337eb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46902,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"validFrom\":\"2023-02-26T01:19:19Z\",\"validUntil\":\"2023-02-26T01:19:20Z\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "validFrom": "2023-02-26T01:19:19Z",
                        "validUntil": "2023-02-26T01:19:20Z",
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/issue?suite=Ed25519Signature2020",
                  "status": 400,
                  "data": {
                    "id": "EXPIRED",
                    "message": "Expired"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:9c6229d4-d646-4c64-9e32-abb901b74773",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:4de52f0e-8c87-432b-81c8-6afd75a3730d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 186,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:7d4cf4c5-4510-499a-909d-7faec90ac825",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47495,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IoG7CkYVyvPYbLGNupXEd",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
          "_testId": "urn:uuid:2de04cc2-04ef-40fc-b5f6-a80a685eccec"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:ece4f88f-1010-4871-9db8-cd1397d971d3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47495,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 344,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:ba49110b-9c63-4e1e-88be-55d18a19991f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:bfbd046b-336e-40f2-b23d-ea271621629e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48185,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 414,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:f2e78806-1064-4e29-a980-ee1ff994ffcf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48599,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:3d4c5b76-1d44-4beb-92d8-546fc9ee23c5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IoG7CkYVyvPYbLGNupXEd",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
          "_testId": "urn:uuid:ff834e31-89ec-4a07-b45a-31b0b4710d3f"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:a03ce5c4-a167-44c7-8455-286a14ed8263",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48847,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:afc1d465-05e1-44bb-ac42-b341890a287f",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:62136a58-00a5-4370-88d3-dae4e8e76523",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 230,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:abda09c6-bc3a-4e40-8826-1530c7dddefe",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 222,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:45a2624e-f75d-4772-ae50-4be5e184f3e5",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IoG7CkYVyvPYbLGNupXEd",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
          "_testId": "urn:uuid:6f677a21-9832-4506-b712-0b7e4b23a893"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:65d1a59e-2dec-4ced-8066-95c4ea02f082",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 184,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:97175158-816e-4b9c-9b35-943556003bcf",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50076,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 166,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:d3b9f4d9-3827-49df-8f2d-2fe11298c3b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:913d0e4e-3719-4d27-a484-aecf5673cc13",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50365,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:6fa6c61b-f67f-4ed8-8e11-87b7a7bf73ee",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IoG7CkYVyvPYbLGNupXEd",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
          "_testId": "urn:uuid:6cb94609-fef0-4e38-8f50-23390f5bf6d2"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:6a99d8a1-a5a4-49f9-8062-88e194d240eb",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 534,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:680fb28e-8e4c-47d6-ae6f-bdf750db67e5",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 697,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:b0b81df6-e2f0-4314-ac67-022c5808f24f",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51704,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:176f8e00-7e41-49c5-991c-ec2340103c97",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 502,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:4c69b782-b26f-441e-9117-ec484e73c251",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52631,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IoG7CkYVyvPYbLGNupXEd",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
          "_testId": "urn:uuid:e114f2f5-01e7-42c2-8c94-9b5918cb1e0e"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:d00cb0a4-c6e7-4a82-8cbe-583ba17d41d7",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:cb76bfa4-ba03-49cf-b7b1-118006efd440",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45890,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:23169d80-df10-4e83-9e55-24924af40381",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46323,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 578,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:ece4f88f-1010-4871-9db8-cd1397d971d3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47495,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 344,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:a03ce5c4-a167-44c7-8455-286a14ed8263",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48847,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:65d1a59e-2dec-4ced-8066-95c4ea02f082",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 184,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:6a99d8a1-a5a4-49f9-8062-88e194d240eb",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 534,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:56e48b5b-8918-4224-8b5c-f47e6035424c",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46018,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:83ba62c7-6e10-4577-bef5-2b466d7337eb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46902,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"validFrom\":\"2023-02-26T01:19:19Z\",\"validUntil\":\"2023-02-26T01:19:20Z\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "validFrom": "2023-02-26T01:19:19Z",
                        "validUntil": "2023-02-26T01:19:20Z",
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/issue?suite=Ed25519Signature2020",
                  "status": 400,
                  "data": {
                    "id": "EXPIRED",
                    "message": "Expired"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:ba49110b-9c63-4e1e-88be-55d18a19991f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:afc1d465-05e1-44bb-ac42-b341890a287f",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:97175158-816e-4b9c-9b35-943556003bcf",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50076,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 166,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:680fb28e-8e4c-47d6-ae6f-bdf750db67e5",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 697,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
          "cells": [
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:42077752-0736-4e29-8322-fcef273ade0d",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:9c6229d4-d646-4c64-9e32-abb901b74773",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:bfbd046b-336e-40f2-b23d-ea271621629e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48185,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 414,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:62136a58-00a5-4370-88d3-dae4e8e76523",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 230,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:d3b9f4d9-3827-49df-8f2d-2fe11298c3b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:b0b81df6-e2f0-4314-ac67-022c5808f24f",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51704,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
          "cells": [
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:710a8b1c-7528-442c-b7de-1d86d90cea80",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:4de52f0e-8c87-432b-81c8-6afd75a3730d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 186,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:f2e78806-1064-4e29-a980-ee1ff994ffcf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48599,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:abda09c6-bc3a-4e40-8826-1530c7dddefe",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 222,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:913d0e4e-3719-4d27-a484-aecf5673cc13",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50365,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        await testTemporality(endpoints);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:176f8e00-7e41-49c5-991c-ec2340103c97",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 502,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
          "cells": [
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "0_BMGbqW3M3ecF8qY02Sz",
              "ctx": null,
              "_testId": "urn:uuid:157af22f-e61f-4580-afef-e148f24729cd",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46323,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "U9HV8I5cYYqoiwi2UD1FM",
              "ctx": null,
              "_testId": "urn:uuid:7d4cf4c5-4510-499a-909d-7faec90ac825",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47495,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "DYFYrAlbKF0vcDSX4OgDv",
              "ctx": null,
              "_testId": "urn:uuid:3d4c5b76-1d44-4beb-92d8-546fc9ee23c5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "kKjvbawS9ioUNznYxN1MB",
              "ctx": null,
              "_testId": "urn:uuid:45a2624e-f75d-4772-ae50-4be5e184f3e5",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "s5Xzxr8kNCzqdVJJQ-SNj",
              "ctx": null,
              "_testId": "urn:uuid:6fa6c61b-f67f-4ed8-8e11-87b7a7bf73ee",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.`;\n        // TODO: add test using regular expression from spec.\n        // https://w3c.github.io/vc-data-model/#example-regular-expression-to-detect-a-valid-xml-schema-1-1-part-2-datetimestamp\n        // eslint-disable-next-line max-len, no-unused-vars\n        const regexp = /-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))/;\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/4-9-validity-period.js",
              "parent": "181UFCkEBl7kqJhgTvfbd",
              "ctx": null,
              "_testId": "urn:uuid:4c69b782-b26f-441e-9117-ec484e73c251",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=Time%20values%20that%20are%20incorrectly%20serialized%20without%20an%20offset%20MUST%20be%20interpreted%20as%20UTC.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52631,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Status",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "X6Oj1Uzh7DsriD-xUlBoJ",
              "ctx": null,
              "_testId": "urn:uuid:58bd29b7-4329-4e15-8aa2-b90a3fa55561",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52631,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 351,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "X6Oj1Uzh7DsriD-xUlBoJ",
              "ctx": null,
              "_testId": "urn:uuid:1508a6a5-4ada-4662-aea4-55b56493a3a0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52983,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "X6Oj1Uzh7DsriD-xUlBoJ",
              "ctx": null,
              "_testId": "urn:uuid:db6afa91-ca91-456a-8a7b-b36e0d618556",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "X6Oj1Uzh7DsriD-xUlBoJ",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KLIxALKWe_u3tAZ8Ju0dV",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
          "_testId": "urn:uuid:fd9df169-626b-466f-96ca-402cbdf49e54"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6N9qcpZCzb9bQJImqyRmL",
              "ctx": null,
              "_testId": "urn:uuid:05954c7f-9a7b-4735-b280-a43212302282",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 323,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6N9qcpZCzb9bQJImqyRmL",
              "ctx": null,
              "_testId": "urn:uuid:ebe83f27-76ae-41cb-9f13-afb347669a4e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6N9qcpZCzb9bQJImqyRmL",
              "ctx": null,
              "_testId": "urn:uuid:7e91c255-0f99-47b2-9fd8-27d968649a68",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6N9qcpZCzb9bQJImqyRmL",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KLIxALKWe_u3tAZ8Ju0dV",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
          "_testId": "urn:uuid:2946b181-e49a-49e3-88f0-ee4c8ef63784"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "PZ-eiCvaEsEtEfO8y2U-K",
              "ctx": null,
              "_testId": "urn:uuid:43b11d6d-cb57-4291-af7d-1846bdc2277f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "PZ-eiCvaEsEtEfO8y2U-K",
              "ctx": null,
              "_testId": "urn:uuid:5b2e9476-12ec-4a39-b264-2cf1b60aa901",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "PZ-eiCvaEsEtEfO8y2U-K",
              "ctx": null,
              "_testId": "urn:uuid:ff26ea21-69cd-4021-a21b-1e17b802a4e8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PZ-eiCvaEsEtEfO8y2U-K",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KLIxALKWe_u3tAZ8Ju0dV",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
          "_testId": "urn:uuid:09b265e1-7849-4ecc-a0f8-220c52d4d8ea"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "FWA7qSR9shMyViPKJrMzv",
              "ctx": null,
              "_testId": "urn:uuid:6cd76595-3eea-4545-8eb7-d0e43de695ce",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 168,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "FWA7qSR9shMyViPKJrMzv",
              "ctx": null,
              "_testId": "urn:uuid:2e06e5b1-046a-4227-9d85-f446ed15d378",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 212,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "FWA7qSR9shMyViPKJrMzv",
              "ctx": null,
              "_testId": "urn:uuid:9fcceb3a-0c5d-4c89-81a8-5e4fe16d9812",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FWA7qSR9shMyViPKJrMzv",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KLIxALKWe_u3tAZ8Ju0dV",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
          "_testId": "urn:uuid:ae82eaca-a0e6-47bb-9f1a-9669596fc57b"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "VmwaBU-Ok0CFgfmKMzYdA",
              "ctx": null,
              "_testId": "urn:uuid:e8022529-0611-453b-b93d-ff19360fc06a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 128,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "VmwaBU-Ok0CFgfmKMzYdA",
              "ctx": null,
              "_testId": "urn:uuid:2625df26-71e2-4cc2-8353-ad13bd88e2ae",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54418,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "VmwaBU-Ok0CFgfmKMzYdA",
              "ctx": null,
              "_testId": "urn:uuid:60fb5c69-6131-4ead-bdfc-8d541c1154bc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "VmwaBU-Ok0CFgfmKMzYdA",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KLIxALKWe_u3tAZ8Ju0dV",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
          "_testId": "urn:uuid:da1c689d-f556-42af-91ba-da7fb80a3cbb"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6tWG3gmi-wHqWI1iCDc2s",
              "ctx": null,
              "_testId": "urn:uuid:bc27c84e-b6c4-426f-b651-695625ae7608",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 432,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6tWG3gmi-wHqWI1iCDc2s",
              "ctx": null,
              "_testId": "urn:uuid:e3074709-a7d6-4fc6-bfd1-9f4aa5e367f5",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 438,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6tWG3gmi-wHqWI1iCDc2s",
              "ctx": null,
              "_testId": "urn:uuid:aee84970-cba1-4753-a822-1972b8ab9016",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6tWG3gmi-wHqWI1iCDc2s",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KLIxALKWe_u3tAZ8Ju0dV",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
          "_testId": "urn:uuid:7ad4a3bb-ab76-45e3-8ffb-38d43ed3ff39"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:ddb3becf-f7f1-45ff-80a4-a983dcff917a",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
          "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
          "cells": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "X6Oj1Uzh7DsriD-xUlBoJ",
              "ctx": null,
              "_testId": "urn:uuid:58bd29b7-4329-4e15-8aa2-b90a3fa55561",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52631,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 351,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6N9qcpZCzb9bQJImqyRmL",
              "ctx": null,
              "_testId": "urn:uuid:05954c7f-9a7b-4735-b280-a43212302282",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 323,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "PZ-eiCvaEsEtEfO8y2U-K",
              "ctx": null,
              "_testId": "urn:uuid:43b11d6d-cb57-4291-af7d-1846bdc2277f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "FWA7qSR9shMyViPKJrMzv",
              "ctx": null,
              "_testId": "urn:uuid:6cd76595-3eea-4545-8eb7-d0e43de695ce",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 168,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "VmwaBU-Ok0CFgfmKMzYdA",
              "ctx": null,
              "_testId": "urn:uuid:e8022529-0611-453b-b93d-ff19360fc06a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 128,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6tWG3gmi-wHqWI1iCDc2s",
              "ctx": null,
              "_testId": "urn:uuid:bc27c84e-b6c4-426f-b651-695625ae7608",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.4 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 432,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
          "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
          "cells": [
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "X6Oj1Uzh7DsriD-xUlBoJ",
              "ctx": null,
              "_testId": "urn:uuid:1508a6a5-4ada-4662-aea4-55b56493a3a0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52983,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6N9qcpZCzb9bQJImqyRmL",
              "ctx": null,
              "_testId": "urn:uuid:ebe83f27-76ae-41cb-9f13-afb347669a4e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "PZ-eiCvaEsEtEfO8y2U-K",
              "ctx": null,
              "_testId": "urn:uuid:5b2e9476-12ec-4a39-b264-2cf1b60aa901",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "FWA7qSR9shMyViPKJrMzv",
              "ctx": null,
              "_testId": "urn:uuid:2e06e5b1-046a-4227-9d85-f446ed15d378",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 212,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "VmwaBU-Ok0CFgfmKMzYdA",
              "ctx": null,
              "_testId": "urn:uuid:2625df26-71e2-4cc2-8353-ad13bd88e2ae",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54418,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6tWG3gmi-wHqWI1iCDc2s",
              "ctx": null,
              "_testId": "urn:uuid:e3074709-a7d6-4fc6-bfd1-9f4aa5e367f5",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 438,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Credential status specifications MUST NOT enable tracking of individuals",
          "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
          "cells": [
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "X6Oj1Uzh7DsriD-xUlBoJ",
              "ctx": null,
              "_testId": "urn:uuid:db6afa91-ca91-456a-8a7b-b36e0d618556",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53093,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6N9qcpZCzb9bQJImqyRmL",
              "ctx": null,
              "_testId": "urn:uuid:7e91c255-0f99-47b2-9fd8-27d968649a68",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "PZ-eiCvaEsEtEfO8y2U-K",
              "ctx": null,
              "_testId": "urn:uuid:ff26ea21-69cd-4021-a21b-1e17b802a4e8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53909,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "FWA7qSR9shMyViPKJrMzv",
              "ctx": null,
              "_testId": "urn:uuid:9fcceb3a-0c5d-4c89-81a8-5e4fe16d9812",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "VmwaBU-Ok0CFgfmKMzYdA",
              "ctx": null,
              "_testId": "urn:uuid:60fb5c69-6131-4ead-bdfc-8d541c1154bc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            },
            {
              "type": "test",
              "title": "Credential status specifications MUST NOT enable tracking of individuals",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals`;\n        this.test.cell.skipMessage = 'Not testable with automation.';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/410-status.js",
              "parent": "6tWG3gmi-wHqWI1iCDc2s",
              "ctx": null,
              "_testId": "urn:uuid:aee84970-cba1-4753-a822-1972b8ab9016",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Credential status specifications MUST NOT enable tracking of individuals",
                "skipMessage": "Not testable with automation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=Credential%20status%20specifications%20MUST%20NOT%20enable%20tracking%20of%20individuals",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55438,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Not testable with automation."
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Data Schemas",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "AKmBj0rQTH1CLvLO1Q81a",
              "ctx": null,
              "_testId": "urn:uuid:c94cfc82-7f1f-4750-b6c1-86eed2f0b7c1",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55439,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "AKmBj0rQTH1CLvLO1Q81a",
              "ctx": null,
              "_testId": "urn:uuid:629da502-b33a-4e07-9793-64fe55f88c8f",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55518,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "AKmBj0rQTH1CLvLO1Q81a",
              "ctx": null,
              "_testId": "urn:uuid:a7a830f9-c0f3-4df7-ae3a-5923cae35c0e",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55600,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "AKmBj0rQTH1CLvLO1Q81a",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1dmJWJrFa-dmmOdxlqTTc",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
          "_testId": "urn:uuid:8e05d957-03ca-4d96-9608-04c6cc903a1c"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "BsVr1z6vgzSQIEmAbiY7w",
              "ctx": null,
              "_testId": "urn:uuid:11a2e05d-541f-451b-9175-27aaeb00abba",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "BsVr1z6vgzSQIEmAbiY7w",
              "ctx": null,
              "_testId": "urn:uuid:ae63c780-9946-4cd9-9069-0f97bed42cba",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "BsVr1z6vgzSQIEmAbiY7w",
              "ctx": null,
              "_testId": "urn:uuid:faa01e92-371b-4e37-a6b2-514a73a860ac",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BsVr1z6vgzSQIEmAbiY7w",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1dmJWJrFa-dmmOdxlqTTc",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
          "_testId": "urn:uuid:f50e60d2-418c-4eac-9660-4b39b3ea9dfe"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "aLXwNvFCHtEIlo2qvgOcR",
              "ctx": null,
              "_testId": "urn:uuid:5ee6f8a2-482c-4466-80bf-8f544dfd9da1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56102,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 301,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "aLXwNvFCHtEIlo2qvgOcR",
              "ctx": null,
              "_testId": "urn:uuid:a7d030bd-2c7c-4339-8e75-5b1acdfb7681",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "aLXwNvFCHtEIlo2qvgOcR",
              "ctx": null,
              "_testId": "urn:uuid:7e3d363b-cc34-4a02-b672-7c562b84665b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aLXwNvFCHtEIlo2qvgOcR",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1dmJWJrFa-dmmOdxlqTTc",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
          "_testId": "urn:uuid:ec225bf4-bb4b-4a26-b6f5-b0f389374798"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "A6PJ36aHkTvIJwn00kRYs",
              "ctx": null,
              "_testId": "urn:uuid:ca9d8bad-f9fa-4c45-9bc1-3846988c3acf",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "A6PJ36aHkTvIJwn00kRYs",
              "ctx": null,
              "_testId": "urn:uuid:f4987156-5a3c-40c1-919c-6b1fa9a79127",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "A6PJ36aHkTvIJwn00kRYs",
              "ctx": null,
              "_testId": "urn:uuid:0ef9db9a-d87e-424b-a8ee-d9ee6ae5e4e0",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "A6PJ36aHkTvIJwn00kRYs",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1dmJWJrFa-dmmOdxlqTTc",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
          "_testId": "urn:uuid:27b8c43b-c414-4e49-a7cd-4ec2982fceec"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "EjbCravRsQqZVMUaOwj0T",
              "ctx": null,
              "_testId": "urn:uuid:ae25aa85-528c-4da5-836a-a8430b2219cb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57113,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "EjbCravRsQqZVMUaOwj0T",
              "ctx": null,
              "_testId": "urn:uuid:30d92e04-60fc-4c6d-a3dc-cfa679ee58b7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "EjbCravRsQqZVMUaOwj0T",
              "ctx": null,
              "_testId": "urn:uuid:7730ff50-a7f0-4d1c-9512-debc86fbbd4b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "EjbCravRsQqZVMUaOwj0T",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1dmJWJrFa-dmmOdxlqTTc",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
          "_testId": "urn:uuid:93fa5227-db7c-4ae9-a39c-73def6ab0027"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "T9Gtjf3yiAOOuRW5XEJfS",
              "ctx": null,
              "_testId": "urn:uuid:2bb1139c-2ce7-42e7-80d2-9f489d93b512",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 483,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "T9Gtjf3yiAOOuRW5XEJfS",
              "ctx": null,
              "_testId": "urn:uuid:f1fbc369-43c3-4af4-a591-82f296c8c482",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 376,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "T9Gtjf3yiAOOuRW5XEJfS",
              "ctx": null,
              "_testId": "urn:uuid:126a657b-ec1a-4d32-8de9-84d92e3eeec2",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "T9Gtjf3yiAOOuRW5XEJfS",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1dmJWJrFa-dmmOdxlqTTc",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
          "_testId": "urn:uuid:fd1ca100-de57-4371-97fc-6860d7dc8281"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:a78a716c-7e36-49f8-8687-7a88f6af7e3c",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
          "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
          "cells": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "AKmBj0rQTH1CLvLO1Q81a",
              "ctx": null,
              "_testId": "urn:uuid:c94cfc82-7f1f-4750-b6c1-86eed2f0b7c1",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55439,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "BsVr1z6vgzSQIEmAbiY7w",
              "ctx": null,
              "_testId": "urn:uuid:11a2e05d-541f-451b-9175-27aaeb00abba",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "aLXwNvFCHtEIlo2qvgOcR",
              "ctx": null,
              "_testId": "urn:uuid:5ee6f8a2-482c-4466-80bf-8f544dfd9da1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56102,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 301,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "A6PJ36aHkTvIJwn00kRYs",
              "ctx": null,
              "_testId": "urn:uuid:ca9d8bad-f9fa-4c45-9bc1-3846988c3acf",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "EjbCravRsQqZVMUaOwj0T",
              "ctx": null,
              "_testId": "urn:uuid:ae25aa85-528c-4da5-836a-a8430b2219cb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57113,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "T9Gtjf3yiAOOuRW5XEJfS",
              "ctx": null,
              "_testId": "urn:uuid:2bb1139c-2ce7-42e7-80d2-9f489d93b512",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 483,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
          "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
          "cells": [
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "AKmBj0rQTH1CLvLO1Q81a",
              "ctx": null,
              "_testId": "urn:uuid:629da502-b33a-4e07-9793-64fe55f88c8f",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55518,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "BsVr1z6vgzSQIEmAbiY7w",
              "ctx": null,
              "_testId": "urn:uuid:ae63c780-9946-4cd9-9069-0f97bed42cba",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "aLXwNvFCHtEIlo2qvgOcR",
              "ctx": null,
              "_testId": "urn:uuid:a7d030bd-2c7c-4339-8e75-5b1acdfb7681",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "A6PJ36aHkTvIJwn00kRYs",
              "ctx": null,
              "_testId": "urn:uuid:f4987156-5a3c-40c1-919c-6b1fa9a79127",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "EjbCravRsQqZVMUaOwj0T",
              "ctx": null,
              "_testId": "urn:uuid:30d92e04-60fc-4c6d-a3dc-cfa679ee58b7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "T9Gtjf3yiAOOuRW5XEJfS",
              "ctx": null,
              "_testId": "urn:uuid:f1fbc369-43c3-4af4-a591-82f296c8c482",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 376,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
          "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
          "cells": [
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "AKmBj0rQTH1CLvLO1Q81a",
              "ctx": null,
              "_testId": "urn:uuid:a7a830f9-c0f3-4df7-ae3a-5923cae35c0e",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55600,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "BsVr1z6vgzSQIEmAbiY7w",
              "ctx": null,
              "_testId": "urn:uuid:faa01e92-371b-4e37-a6b2-514a73a860ac",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "aLXwNvFCHtEIlo2qvgOcR",
              "ctx": null,
              "_testId": "urn:uuid:7e3d363b-cc34-4a02-b672-7c562b84665b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56566,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "A6PJ36aHkTvIJwn00kRYs",
              "ctx": null,
              "_testId": "urn:uuid:0ef9db9a-d87e-424b-a8ee-d9ee6ae5e4e0",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "EjbCravRsQqZVMUaOwj0T",
              "ctx": null,
              "_testId": "urn:uuid:7730ff50-a7f0-4d1c-9512-debc86fbbd4b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/411-data-schemas.js",
              "parent": "T9Gtjf3yiAOOuRW5XEJfS",
              "ctx": null,
              "_testId": "urn:uuid:126a657b-ec1a-4d32-8de9-84d92e3eeec2",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated type property"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Verifiable Presentations",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "x7EwkDAwFL44QYkGUQeiD",
              "ctx": null,
              "_testId": "urn:uuid:45509835-912a-4093-8199-481727f49346",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "x7EwkDAwFL44QYkGUQeiD",
              "ctx": null,
              "_testId": "urn:uuid:64d53b99-ed98-44b5-ae31-52a4d56ff098",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "x7EwkDAwFL44QYkGUQeiD",
              "ctx": null,
              "_testId": "urn:uuid:a4bf4b8a-23ae-4658-93c0-e338f5d5c1ce",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm\"}},{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:other-subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z4HA5gAmJCTXcKMtzWKg5K13h4Nn7XKHWVTredna8akDawJvrQCynL1udrAt5paNbv2tndYgmfA79Kagcn2ixkFGZ\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm"
                            }
                          },
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:other-subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:06:06Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z4HA5gAmJCTXcKMtzWKg5K13h4Nn7XKHWVTredna8akDawJvrQCynL1udrAt5paNbv2tndYgmfA79Kagcn2ixkFGZ"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/presentations/verify",
                  "status": 500
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "x7EwkDAwFL44QYkGUQeiD",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wjSkCCQpPTl0RMUkEHR0S",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:48e31b8c-06ab-429b-b822-6c87fdd0aabc"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "njZDbzOW8xT3ZVPDCM10v",
              "ctx": null,
              "_testId": "urn:uuid:cdbce314-64d5-45b8-bd9c-1638943ca482",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "njZDbzOW8xT3ZVPDCM10v",
              "ctx": null,
              "_testId": "urn:uuid:1ed3b31a-a871-46c1-ae4a-931364366dc0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "njZDbzOW8xT3ZVPDCM10v",
              "ctx": null,
              "_testId": "urn:uuid:cdc912fd-4d08-4ed4-ac39-9f30887788a1",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm\"}},{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:other-subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z4HA5gAmJCTXcKMtzWKg5K13h4Nn7XKHWVTredna8akDawJvrQCynL1udrAt5paNbv2tndYgmfA79Kagcn2ixkFGZ\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm"
                            }
                          },
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:other-subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:06:06Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z4HA5gAmJCTXcKMtzWKg5K13h4Nn7XKHWVTredna8akDawJvrQCynL1udrAt5paNbv2tndYgmfA79Kagcn2ixkFGZ"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "njZDbzOW8xT3ZVPDCM10v",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wjSkCCQpPTl0RMUkEHR0S",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:3b8a38c4-fae9-409a-9ce7-c6e2497e2c88"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "EDMs2yD5AOYftjxbTJD3_",
              "ctx": null,
              "_testId": "urn:uuid:5731d515-df7b-4cab-986c-c0441541d8bd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58455,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "EDMs2yD5AOYftjxbTJD3_",
              "ctx": null,
              "_testId": "urn:uuid:a7060abf-3acd-4c33-b9ec-bf4e533e3a89",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "EDMs2yD5AOYftjxbTJD3_",
              "ctx": null,
              "_testId": "urn:uuid:246a1864-6323-4d91-b902-14e805d697e4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58461,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 395,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "EDMs2yD5AOYftjxbTJD3_",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wjSkCCQpPTl0RMUkEHR0S",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:4c8723e2-2757-4ae3-865b-2397c41449be"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HGFvmSsa75Z_bHbek2ABI",
              "ctx": null,
              "_testId": "urn:uuid:3300acca-9a5d-4bb0-9069-fbeec70d2326",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HGFvmSsa75Z_bHbek2ABI",
              "ctx": null,
              "_testId": "urn:uuid:b5502ed7-4d6a-4908-8732-326f1aa6e58e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HGFvmSsa75Z_bHbek2ABI",
              "ctx": null,
              "_testId": "urn:uuid:db7dbf93-578d-4151-9319-e3dd1f4e5b1d",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 172,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HGFvmSsa75Z_bHbek2ABI",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wjSkCCQpPTl0RMUkEHR0S",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:51f981c5-5dcc-4800-8093-d79c4da5b1ae"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HXEScdIYFS3svowRaFiI7",
              "ctx": null,
              "_testId": "urn:uuid:e4b2db1e-9905-4436-9a5e-350eae84793b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HXEScdIYFS3svowRaFiI7",
              "ctx": null,
              "_testId": "urn:uuid:c6381c4b-07d3-414d-ab46-81b231b8cb1e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HXEScdIYFS3svowRaFiI7",
              "ctx": null,
              "_testId": "urn:uuid:af843722-e3b9-4e60-8354-0ae778a76320",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm\"}},{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:other-subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:07Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z5q7MGiVJFwLxAtme84zhDxFgb77YVN5w3JGvz37AVfKzWoFLtx7FsPV372vmPcvQWwa31KoQi3YaqbpsDAD8JrB\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm"
                            }
                          },
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:other-subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:06:07Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z5q7MGiVJFwLxAtme84zhDxFgb77YVN5w3JGvz37AVfKzWoFLtx7FsPV372vmPcvQWwa31KoQi3YaqbpsDAD8JrB"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HXEScdIYFS3svowRaFiI7",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wjSkCCQpPTl0RMUkEHR0S",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:e66ce456-9d69-46bf-8b52-1b2668501b8d"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "VwaQBaL8UD3IotxZCcQHd",
              "ctx": null,
              "_testId": "urn:uuid:335fb1bc-98ec-4a68-a8c6-40513f952a5a",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "VwaQBaL8UD3IotxZCcQHd",
              "ctx": null,
              "_testId": "urn:uuid:8f3469e0-b082-471f-982b-97e742b7a16a",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "VwaQBaL8UD3IotxZCcQHd",
              "ctx": null,
              "_testId": "urn:uuid:3a88489b-f9c7-4f55-8125-09a652a9d556",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm\"}},{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:other-subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:07Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z5q7MGiVJFwLxAtme84zhDxFgb77YVN5w3JGvz37AVfKzWoFLtx7FsPV372vmPcvQWwa31KoQi3YaqbpsDAD8JrB\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm"
                            }
                          },
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:other-subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:06:07Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z5q7MGiVJFwLxAtme84zhDxFgb77YVN5w3JGvz37AVfKzWoFLtx7FsPV372vmPcvQWwa31KoQi3YaqbpsDAD8JrB"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-issuer-mock.onrender.com/didkit-http/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "VwaQBaL8UD3IotxZCcQHd",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "wjSkCCQpPTl0RMUkEHR0S",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:168bf9d6-27a8-4070-80ef-480ef0eef8ea"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:183e8b09-df41-4123-991f-438ed9b25bea",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
          "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
          "cells": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "x7EwkDAwFL44QYkGUQeiD",
              "ctx": null,
              "_testId": "urn:uuid:45509835-912a-4093-8199-481727f49346",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "njZDbzOW8xT3ZVPDCM10v",
              "ctx": null,
              "_testId": "urn:uuid:cdbce314-64d5-45b8-bd9c-1638943ca482",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "EDMs2yD5AOYftjxbTJD3_",
              "ctx": null,
              "_testId": "urn:uuid:5731d515-df7b-4cab-986c-c0441541d8bd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58455,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HGFvmSsa75Z_bHbek2ABI",
              "ctx": null,
              "_testId": "urn:uuid:3300acca-9a5d-4bb0-9069-fbeec70d2326",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HXEScdIYFS3svowRaFiI7",
              "ctx": null,
              "_testId": "urn:uuid:e4b2db1e-9905-4436-9a5e-350eae84793b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            },
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        if('id' in presentationWithCredential) {\n          presentationWithCredential.id.should.be.a('string',\n            'VP `id` value MUST be a string.');\n          (new URL(presentationWithCredential.id)).should.not.throw(\n            'VP `id` value MUST be a URL.');\n        } else {\n          this.test.cell.skipMessage = 'No ID field present.';\n          this.skip();\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "VwaQBaL8UD3IotxZCcQHd",
              "ctx": null,
              "_testId": "urn:uuid:335fb1bc-98ec-4a68-a8c6-40513f952a5a",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.4 Identifiers MUST be followed.",
                "skipMessage": "No ID field present."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.4%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "pending",
              "err": {
                "message": "No ID field present."
              }
            }
          ]
        },
        {
          "id": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
          "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "x7EwkDAwFL44QYkGUQeiD",
              "ctx": null,
              "_testId": "urn:uuid:64d53b99-ed98-44b5-ae31-52a4d56ff098",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "njZDbzOW8xT3ZVPDCM10v",
              "ctx": null,
              "_testId": "urn:uuid:1ed3b31a-a871-46c1-ae4a-931364366dc0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "EDMs2yD5AOYftjxbTJD3_",
              "ctx": null,
              "_testId": "urn:uuid:a7060abf-3acd-4c33-b9ec-bf4e533e3a89",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HGFvmSsa75Z_bHbek2ABI",
              "ctx": null,
              "_testId": "urn:uuid:b5502ed7-4d6a-4908-8732-326f1aa6e58e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HXEScdIYFS3svowRaFiI7",
              "ctx": null,
              "_testId": "urn:uuid:c6381c4b-07d3-414d-ab46-81b231b8cb1e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.`;\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json')\n        });\n        presentationWithCredential.should.have.property('type').that.contains(\n          'VerifiablePresentation',\n          'VP MUST include the `VerifiablePresentation` type value.'\n        );\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "VwaQBaL8UD3IotxZCcQHd",
              "ctx": null,
              "_testId": "urn:uuid:8f3469e0-b082-471f-982b-97e742b7a16a",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.5 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.5%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
          "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
          "cells": [
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "x7EwkDAwFL44QYkGUQeiD",
              "ctx": null,
              "_testId": "urn:uuid:a4bf4b8a-23ae-4658-93c0-e338f5d5c1ce",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm\"}},{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:other-subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z4HA5gAmJCTXcKMtzWKg5K13h4Nn7XKHWVTredna8akDawJvrQCynL1udrAt5paNbv2tndYgmfA79Kagcn2ixkFGZ\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm"
                            }
                          },
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:other-subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:06:06Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z4HA5gAmJCTXcKMtzWKg5K13h4Nn7XKHWVTredna8akDawJvrQCynL1udrAt5paNbv2tndYgmfA79Kagcn2ixkFGZ"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/presentations/verify",
                  "status": 500
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "njZDbzOW8xT3ZVPDCM10v",
              "ctx": null,
              "_testId": "urn:uuid:cdc912fd-4d08-4ed4-ac39-9f30887788a1",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 58,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm\"}},{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:other-subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z4HA5gAmJCTXcKMtzWKg5K13h4Nn7XKHWVTredna8akDawJvrQCynL1udrAt5paNbv2tndYgmfA79Kagcn2ixkFGZ\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm"
                            }
                          },
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:other-subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:06:06Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z4HA5gAmJCTXcKMtzWKg5K13h4Nn7XKHWVTredna8akDawJvrQCynL1udrAt5paNbv2tndYgmfA79Kagcn2ixkFGZ"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "EDMs2yD5AOYftjxbTJD3_",
              "ctx": null,
              "_testId": "urn:uuid:246a1864-6323-4d91-b902-14e805d697e4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58461,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 395,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HGFvmSsa75Z_bHbek2ABI",
              "ctx": null,
              "_testId": "urn:uuid:db7dbf93-578d-4151-9319-e3dd1f4e5b1d",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 172,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "HXEScdIYFS3svowRaFiI7",
              "ctx": null,
              "_testId": "urn:uuid:af843722-e3b9-4e60-8354-0ae778a76320",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm\"}},{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:other-subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:07Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z5q7MGiVJFwLxAtme84zhDxFgb77YVN5w3JGvz37AVfKzWoFLtx7FsPV372vmPcvQWwa31KoQi3YaqbpsDAD8JrB\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm"
                            }
                          },
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:other-subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:06:07Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z5q7MGiVJFwLxAtme84zhDxFgb77YVN5w3JGvz37AVfKzWoFLtx7FsPV372vmPcvQWwa31KoQi3YaqbpsDAD8JrB"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        // TODO: Test with remote presentation creation or querying if/when\n        // supported by the implementation\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json')\n        });\n        await assert.doesNotReject(endpoints.verifyVp(\n          presentationWithCredentials\n        ), 'Failed to verify a valid VP.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-as-string-fail.json')),\n        'Failed to reject a VP containing a VC represented as a string.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "VwaQBaL8UD3IotxZCcQHd",
              "ctx": null,
              "_testId": "urn:uuid:3a88489b-f9c7-4f55-8125-09a652a9d556",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The verifiableCredential property MAY be present. The value MUST beone or more verifiable credential and/or enveloped verifiable credential objects (the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-presentations:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm\"}},{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:other-subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:06Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-09-23T16:06:07Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\",\"proofValue\":\"z5q7MGiVJFwLxAtme84zhDxFgb77YVN5w3JGvz37AVfKzWoFLtx7FsPV372vmPcvQWwa31KoQi3YaqbpsDAD8JrB\"}},\"options\":{\"challenge\":\"uIS7baBtthCYm7LhZBP1GFw\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiablePresentation"
                        ],
                        "verifiableCredential": [
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z38b5RsioTY9kcdBDd13irHnBGmBKXSpB51Gf1fphzc7n3Tbbwf4cA9shqXtgpUSZEVxSkvGwi1Jv73QGck3WfDEm"
                            }
                          },
                          {
                            "@context": [
                              "https://www.w3.org/ns/credentials/v2"
                            ],
                            "type": [
                              "VerifiableCredential"
                            ],
                            "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "credentialSubject": {
                              "id": "did:example:other-subject"
                            },
                            "proof": {
                              "type": "DataIntegrityProof",
                              "created": "2024-09-23T16:06:06Z",
                              "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                              "cryptosuite": "eddsa-2022",
                              "proofPurpose": "assertionMethod",
                              "proofValue": "z4yGwYERtsSgz7YHCJ3QuDQZwJAigUs1rShsXynUbUMipJ1Y85TF7oJpanR2Jtdv8xJtpZ6e9mjZrHukxanjh5NqF"
                            }
                          }
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-09-23T16:06:07Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uIS7baBtthCYm7LhZBP1GFw",
                          "proofValue": "z5q7MGiVJFwLxAtme84zhDxFgb77YVN5w3JGvz37AVfKzWoFLtx7FsPV372vmPcvQWwa31KoQi3YaqbpsDAD8JrB"
                        }
                      },
                      "options": {
                        "challenge": "uIS7baBtthCYm7LhZBP1GFw"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-issuer-mock.onrender.com/didkit-http/presentations/verify",
                  "status": 400
                },
                "operator": "doesNotReject"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "VP - Presentations Including Holder Claims",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "vTS--vd1P-Wl-4Fz8hHdL",
              "ctx": null,
              "_testId": "urn:uuid:6ea4c442-f6f3-4574-a680-0b6cc4541505",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "vTS--vd1P-Wl-4Fz8hHdL",
              "ctx": null,
              "_testId": "urn:uuid:4e6ef8c1-257e-4ca9-9105-01efb1826109",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vTS--vd1P-Wl-4Fz8hHdL",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "FmyGm7SM9CNXgJX1ftqOo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:da22a8f7-c904-45d9-847d-e476213df015"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "cyHyC2HBWQXBBr4I86RH8",
              "ctx": null,
              "_testId": "urn:uuid:e5a6b433-da83-4021-8670-798843185db2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "cyHyC2HBWQXBBr4I86RH8",
              "ctx": null,
              "_testId": "urn:uuid:859b5130-ba9d-4f53-9670-2bf3ef850268",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "cyHyC2HBWQXBBr4I86RH8",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "FmyGm7SM9CNXgJX1ftqOo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:e2341146-c0d3-45ec-9986-6f659a2cc76f"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "7OCKzh10lF0amgQae3R99",
              "ctx": null,
              "_testId": "urn:uuid:16569a06-424b-4b6b-b52a-8fc0ec31122c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "7OCKzh10lF0amgQae3R99",
              "ctx": null,
              "_testId": "urn:uuid:627bb49f-ab98-48b4-98b5-254cdcdaa7e4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7OCKzh10lF0amgQae3R99",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "FmyGm7SM9CNXgJX1ftqOo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:e6cff79c-d36c-4b08-9d4c-afb5c5bc1682"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "E19Odxf4-AQy49oOMc-lO",
              "ctx": null,
              "_testId": "urn:uuid:d9d87e6a-ef1f-4486-ae8b-60861145495f",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "E19Odxf4-AQy49oOMc-lO",
              "ctx": null,
              "_testId": "urn:uuid:f700c686-4369-4234-9e8a-3c4938546d2c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "E19Odxf4-AQy49oOMc-lO",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "FmyGm7SM9CNXgJX1ftqOo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:a5fd28ab-c9cd-4985-8f56-fbcd6578274c"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "qN1cfDvlgshee4UEE2-HM",
              "ctx": null,
              "_testId": "urn:uuid:32760f41-d4dd-40ce-8484-23d943c15edc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "qN1cfDvlgshee4UEE2-HM",
              "ctx": null,
              "_testId": "urn:uuid:3411cef4-184c-4132-910c-4ff5814ea416",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "qN1cfDvlgshee4UEE2-HM",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "FmyGm7SM9CNXgJX1ftqOo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:a95405bf-b2f4-4e0c-b006-4c0803d0ec1b"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "BDUf-45vuNahAqsq9zRwb",
              "ctx": null,
              "_testId": "urn:uuid:81b2e6ba-4d33-44bd-9f1b-330bc5c341ab",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "BDUf-45vuNahAqsq9zRwb",
              "ctx": null,
              "_testId": "urn:uuid:5be2d424-93a5-4155-a736-d719cabeea30",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BDUf-45vuNahAqsq9zRwb",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "FmyGm7SM9CNXgJX1ftqOo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
          "_testId": "urn:uuid:b4c04a2f-0e03-4796-919b-fad12724d9dc"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:d2af822a-57a2-49a8-b3d4-3ddba6f0a1e7",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
          "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
          "cells": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "vTS--vd1P-Wl-4Fz8hHdL",
              "ctx": null,
              "_testId": "urn:uuid:6ea4c442-f6f3-4574-a680-0b6cc4541505",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "cyHyC2HBWQXBBr4I86RH8",
              "ctx": null,
              "_testId": "urn:uuid:e5a6b433-da83-4021-8670-798843185db2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "7OCKzh10lF0amgQae3R99",
              "ctx": null,
              "_testId": "urn:uuid:16569a06-424b-4b6b-b52a-8fc0ec31122c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "E19Odxf4-AQy49oOMc-lO",
              "ctx": null,
              "_testId": "urn:uuid:d9d87e6a-ef1f-4486-ae8b-60861145495f",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "qN1cfDvlgshee4UEE2-HM",
              "ctx": null,
              "_testId": "urn:uuid:32760f41-d4dd-40ce-8484-23d943c15edc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "BDUf-45vuNahAqsq9zRwb",
              "ctx": null,
              "_testId": "urn:uuid:81b2e6ba-4d33-44bd-9f1b-330bc5c341ab",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ]
        },
        {
          "id": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
          "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
          "cells": [
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "vTS--vd1P-Wl-4Fz8hHdL",
              "ctx": null,
              "_testId": "urn:uuid:4e6ef8c1-257e-4ca9-9105-01efb1826109",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "cyHyC2HBWQXBBr4I86RH8",
              "ctx": null,
              "_testId": "urn:uuid:859b5130-ba9d-4f53-9670-2bf3ef850268",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "7OCKzh10lF0amgQae3R99",
              "ctx": null,
              "_testId": "urn:uuid:627bb49f-ab98-48b4-98b5-254cdcdaa7e4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "E19Odxf4-AQy49oOMc-lO",
              "ctx": null,
              "_testId": "urn:uuid:f700c686-4369-4234-9e8a-3c4938546d2c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "qN1cfDvlgshee4UEE2-HM",
              "ctx": null,
              "_testId": "urn:uuid:3411cef4-184c-4132-910c-4ff5814ea416",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413-verifiable-presentations.js",
              "parent": "BDUf-45vuNahAqsq9zRwb",
              "ctx": null,
              "_testId": "urn:uuid:5be2d424-93a5-4155-a736-d719cabeea30",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "VP - Enveloped Verifiable Credentials",
      "ctx": null,
      "suites": [
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        await assert.doesNotReject(endpoints.verifyVp(require(\n          './input/presentation-enveloped-vc-ok.json')),\n        'Failed to accept a VP containing a enveloped VC.');\n        // TODO: add more `@context` variations to test handling?\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-enveloped-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing an enveloped VC with a missing ' +\n        '`type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "A_7eotokaynT_gPs3qu8n",
              "ctx": null,
              "_testId": "urn:uuid:1ddd9b89-7562-49f4-823c-8bf85b7e57d9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59234,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        issuedVc.should.have.property('id').that.does\n          .include('data:',\n            `Expecting id field to be a 'data:' scheme URL [RFC2397].`);\n        const extractedCredential = extractIfEnveloped(issuedVc);\n        shouldBeCredential(extractedCredential);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "A_7eotokaynT_gPs3qu8n",
              "ctx": null,
              "_testId": "urn:uuid:60e22898-2d67-48cd-bac3-ca44efeb0eb4",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59333,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          issuedVc.should.have.property('type').that.does\n            .include('EnvelopedVerifiableCredential',\n              `Expecting type field to be EnvelopedVerifiableCredential`);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "A_7eotokaynT_gPs3qu8n",
              "ctx": null,
              "_testId": "urn:uuid:40cb0c81-b114-4e2f-96e5-cd966b6cff12",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "A_7eotokaynT_gPs3qu8n",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "A_7eotokaynT_gPs3qu8n",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59206,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xdv9VcFIJ--e5LDuk3eVZ",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
          "_testId": "urn:uuid:858781b3-8172-4643-871b-05be84cd9c76"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:20287365-d478-48f0-8b4f-c703c7246cde",
      "columns": [
        "OpSecId"
      ],
      "rows": [
        {
          "id": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
          "cells": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        await assert.doesNotReject(endpoints.verifyVp(require(\n          './input/presentation-enveloped-vc-ok.json')),\n        'Failed to accept a VP containing a enveloped VC.');\n        // TODO: add more `@context` variations to test handling?\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-enveloped-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing an enveloped VC with a missing ' +\n        '`type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "A_7eotokaynT_gPs3qu8n",
              "ctx": null,
              "_testId": "urn:uuid:1ddd9b89-7562-49f4-823c-8bf85b7e57d9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59234,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
          "cells": [
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        issuedVc.should.have.property('id').that.does\n          .include('data:',\n            `Expecting id field to be a 'data:' scheme URL [RFC2397].`);\n        const extractedCredential = extractIfEnveloped(issuedVc);\n        shouldBeCredential(extractedCredential);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "A_7eotokaynT_gPs3qu8n",
              "ctx": null,
              "_testId": "urn:uuid:60e22898-2d67-48cd-bac3-ca44efeb0eb4",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59333,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type value of the object MUST be EnvelopedVerifiableCredential.",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
          "cells": [
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          issuedVc.should.have.property('type').that.does\n            .include('EnvelopedVerifiableCredential',\n              `Expecting type field to be EnvelopedVerifiableCredential`);\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "A_7eotokaynT_gPs3qu8n",
              "ctx": null,
              "_testId": "urn:uuid:40cb0c81-b114-4e2f-96e5-cd966b6cff12",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "VP - Enveloped Verifiable Presentations",
      "ctx": null,
      "suites": [
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test, dynamic presentation from issued\n        this.test.cell.skipMessage = 'Missing Enveloped VP';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "2ielMzjNzGIGTtovmXc3I",
              "ctx": null,
              "_testId": "urn:uuid:b16d7059-73e7-4210-b168-ed7a55f18593",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
                "skipMessage": "Missing Enveloped VP"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Missing Enveloped VP"
              }
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        this.test.cell.skipMessage = 'Missing Enveloped VP';\n        this.skip();\n        createdVp.should.have.property('id').that.does\n          .include('data:',\n            `Expecting id field to be a 'data:' scheme URL [RFC2397].`);\n        // TODO extract and test Presentation\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "2ielMzjNzGIGTtovmXc3I",
              "ctx": null,
              "_testId": "urn:uuid:0d1f2fb1-a73b-474a-b988-e802bbdd8854",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
                "skipMessage": "Missing Enveloped VP"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Missing Enveloped VP"
              }
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        this.test.cell.skipMessage = 'Missing Enveloped VP';\n        this.skip();\n        createdVp.should.have.property('type').that.does\n          .include('EnvelopedVerifiablePresentation',\n            `Expecting type field to be EnvelopedVerifiablePresentation`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "2ielMzjNzGIGTtovmXc3I",
              "ctx": null,
              "_testId": "urn:uuid:2fcf9965-ae8f-41c5-8245-769b5472b780",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
                "skipMessage": "Missing Enveloped VP"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Missing Enveloped VP"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2ielMzjNzGIGTtovmXc3I",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n        try {\n          createdVp = await endpoints.createVp({\n            presentation: require('./input/presentation-vc-ok.json')\n          });\n        } catch(e) {\n          console.error(\n            `Holder: ${name} failed to create \"presentation-vc-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2ielMzjNzGIGTtovmXc3I",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "puPbz95lMTBRlQ_7ZwM9O",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
          "_testId": "urn:uuid:9b60b83f-2c52-4868-815c-ed613f89f6b7"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:0d5da14c-8bcd-47de-bdfc-82816c679247",
      "columns": [
        "OpSecId"
      ],
      "rows": [
        {
          "id": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
          "cells": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test, dynamic presentation from issued\n        this.test.cell.skipMessage = 'Missing Enveloped VP';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "2ielMzjNzGIGTtovmXc3I",
              "ctx": null,
              "_testId": "urn:uuid:b16d7059-73e7-4210-b168-ed7a55f18593",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
                "skipMessage": "Missing Enveloped VP"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Missing Enveloped VP"
              }
            }
          ]
        },
        {
          "id": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
          "cells": [
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        this.test.cell.skipMessage = 'Missing Enveloped VP';\n        this.skip();\n        createdVp.should.have.property('id').that.does\n          .include('data:',\n            `Expecting id field to be a 'data:' scheme URL [RFC2397].`);\n        // TODO extract and test Presentation\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "2ielMzjNzGIGTtovmXc3I",
              "ctx": null,
              "_testId": "urn:uuid:0d1f2fb1-a73b-474a-b988-e802bbdd8854",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
                "skipMessage": "Missing Enveloped VP"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Missing Enveloped VP"
              }
            }
          ]
        },
        {
          "id": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
          "cells": [
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        this.test.cell.skipMessage = 'Missing Enveloped VP';\n        this.skip();\n        createdVp.should.have.property('type').that.does\n          .include('EnvelopedVerifiablePresentation',\n            `Expecting type field to be EnvelopedVerifiablePresentation`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/413.2-envelopes.js",
              "parent": "2ielMzjNzGIGTtovmXc3I",
              "ctx": null,
              "_testId": "urn:uuid:2fcf9965-ae8f-41c5-8245-769b5472b780",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
                "skipMessage": "Missing Enveloped VP"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "Missing Enveloped VP"
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Advanced Concepts",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:0a8cba75-e611-4cea-abc3-3e19cf28e3fa",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:c9275e97-3bda-4f06-9d72-5f2e804742af",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:19a54153-d074-458c-9cdd-47e2707c82dc",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:302fabee-ff46-44e5-a533-c980015db67b",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59611,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:c187f25e-a65c-4db9-be43-38de1a76fd74",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:7ff4c4d7-0abd-4c53-ab78-ab92bc55c8a9",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59704,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:23b51370-1bf4-40ba-b880-c2298463c42e",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59728,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:519b4492-2672-455d-9b55-4208c2f173ed",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:c64f955a-c5ee-47f5-876e-9cdb095101c5",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:61622f82-0706-4cb1-94bb-17748f4d74a6",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59853,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"ACA-py\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QnGZeV9DPALpm-Xoszfn8",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
          "_testId": "urn:uuid:06dea774-ebda-496d-b87b-b26fa88317ad"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:e5171832-c40a-4c40-80f6-1307664edf7c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59853,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:6ab212e9-cc56-488d-b353-5a0be8bb46fb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 277,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:f8c372e8-cb18-48b9-bdde-867c9ee90fbb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:b1ed6eb6-15fb-4eac-bc48-5aad98d15a9d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 298,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:7b17394d-f505-48ca-bbec-25480241fe8d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 403,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:44f430be-bede-44ae-aea7-cd4d405d4d43",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61092,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:22ec6164-382a-452e-87cf-0f0b818af90d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61500,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 189,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:e4ed6fa4-fdfe-47e4-b132-63799042b34f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:5e7b22d7-54bc-48be-b027-255d880617d6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:5f1b6503-1b11-4379-b758-825d2eb7fea9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62002,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QnGZeV9DPALpm-Xoszfn8",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
          "_testId": "urn:uuid:08ec6ea9-f239-40ca-91d4-cf87a6548dce"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:36ef907e-5b12-4d38-9e0a-8ed375ec4651",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:346206d8-9b77-4c4b-a0d8-7f60e86e9e7a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 406,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:37e3aa07-6854-468e-a421-6c2062caaf38",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:313ea2c3-9352-45e4-b2a7-2c2ed5cc6eb6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:caa389ff-f62c-4acd-acc4-b0ada6a05594",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:26ad36db-f1bd-4033-a6b0-a35821cb475b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:6dea114e-797f-4eb8-a2c3-23a7500397f1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62914,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:60d8615d-09bf-49c3-83ee-1a2beadeb718",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:0592f0be-e610-4507-b7db-60fa41629881",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:d539ee68-8664-4cc9-932c-cf446ba3071c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63208,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QnGZeV9DPALpm-Xoszfn8",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
          "_testId": "urn:uuid:145bf70e-f0ba-4384-a84d-10019920c319"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:16665e37-7541-43b3-a992-dfe042061d0e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63208,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:fd8d6c0f-cee2-4fbb-a386-c1aa275ed513",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:c2ee2b71-6492-465b-9d1e-a9d26cff6fbe",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63483,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:e12cce3b-9072-4327-8280-1a2291d61658",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:b02490f2-96ac-4a2f-8534-20214e053fd3",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:7a36cc6a-9fa3-4da4-a83e-57b28d4e7d63",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:b8f4f75d-4dce-478e-b98b-b0c8041583a4",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:0daddfd1-6819-4e81-9d0c-4e3b8c4ae0af",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:6678469b-e079-4d4c-acfe-c6bb304e01c6",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64117,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:ea41d7b8-358e-4b2f-905f-66ee18d5289b",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"OpSecId\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QnGZeV9DPALpm-Xoszfn8",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
          "_testId": "urn:uuid:b0136ef0-fb18-43db-acde-92ed82b4ec72"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:15fe923e-c91b-4f0b-8d58-9a61134f2403",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:f8f8929d-a301-4cdb-97d8-3413dc56e4cd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:6f40d2c4-aabd-4bfe-a3bf-7166e1feb119",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64454,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:c17b6594-8b6d-4ec7-bdf3-df46fbccd75f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64509,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:a4a74dad-b660-478a-abc0-fe9399fccb98",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:8facdd66-e76e-4766-bc1b-3ee2b82980cd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:2eda6d4b-2498-4506-9cd4-59ae2c45f0ca",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64648,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:9d50ac02-11a7-4f24-8393-f1b16c756acd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:b01f3020-4fbf-4e4d-8d91-a44b116505aa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:af8b702f-44c7-40f7-9e89-87d406562c5f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QnGZeV9DPALpm-Xoszfn8",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
          "_testId": "urn:uuid:876f8561-da26-4f26-b133-1e228ce4dbe6"
        },
        {
          "title": "VC Issuer Mock",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:8edd9b11-769c-4799-976b-583eee54c2ae",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 535,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:8977a1e6-f88d-4a08-ab56-eca9bf45589d",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:f322bd69-8c38-4ec8-8b49-67f2764bad55",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 333,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:19de25c9-6bfb-403d-8051-ab3c7184fffb",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66066,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:ae554b21-c339-4212-92a8-2e14338c355c",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 275,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:ec0c123b-5151-4e5e-9c84-ab90076cbb06",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:be370525-2375-4717-b498-8757165d36e7",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66613,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:0fff6765-0121-4721-bb76-f844eada0ee6",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 442,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:6ab478fe-7887-4151-8e69-246d9b8fa71d",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:2763cf4e-da4e-402b-abd2-24771ab9e87b",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"VC Issuer Mock\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "QnGZeV9DPALpm-Xoszfn8",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
          "_testId": "urn:uuid:86151b58-5659-4e4b-bea3-1bd72e1cae2a"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PRUrQbL_fMUUN19iyMC1Z",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:1aaeea20-8a47-4c35-adfd-7007ddb3295a",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "OpSecId",
        "SpruceID",
        "VC Issuer Mock"
      ],
      "rows": [
        {
          "id": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
          "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
          "cells": [
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:0a8cba75-e611-4cea-abc3-3e19cf28e3fa",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:e5171832-c40a-4c40-80f6-1307664edf7c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59853,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:36ef907e-5b12-4d38-9e0a-8ed375ec4651",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:16665e37-7541-43b3-a992-dfe042061d0e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63208,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:15fe923e-c91b-4f0b-8d58-9a61134f2403",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        {name: 'HTTPError'},\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:8edd9b11-769c-4799-976b-583eee54c2ae",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "When processing the active context defined by the base JSON-LD Context document defined in this specification, compliant JSON-LD-based processors produce an error when a JSON-LD context redefines any term."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 535,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the relatedResource property MUST be one or more objects of the following form:",
          "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
          "cells": [
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:c9275e97-3bda-4f06-9d72-5f2e804742af",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:6ab212e9-cc56-488d-b353-5a0be8bb46fb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 277,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:346206d8-9b77-4c4b-a0d8-7f60e86e9e7a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 406,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:fd8d6c0f-cee2-4fbb-a386-c1aa275ed513",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:f8f8929d-a301-4cdb-97d8-3413dc56e4cd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the relatedResource property MUST be one or more objects of the following form:",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A`;\n        this.test.cell.skipMessage = 'TBD';\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-ok.json'\n        )), 'Failed to accept a VC with valid relatedResource objects.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/relatedResource/relatedResource-with-mediaType-ok.json'\n        )),\n        'Failed to accept a VC with valid relatedResource.mediaType values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-list-of-strings-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource as an array of strings.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:8977a1e6-f88d-4a08-ab56-eca9bf45589d",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the relatedResource property MUST be one or more objects of the following form:",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20value%20of%20the%20relatedResource%20property%20MUST%20be%20one%20or%20more%20objects%20of%20the%20following%20form%3A",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            }
          ]
        },
        {
          "id": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
          "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
          "cells": [
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:19a54153-d074-458c-9cdd-47e2707c82dc",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59579,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:f8c372e8-cb18-48b9-bdde-867c9ee90fbb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:37e3aa07-6854-468e-a421-6c2062caaf38",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:c2ee2b71-6492-465b-9d1e-a9d26cff6fbe",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63483,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:6f40d2c4-aabd-4bfe-a3bf-7166e1feb119",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64454,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-missing-id-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no `id` field.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:f322bd69-8c38-4ec8-8b49-67f2764bad55",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The identifier for the resource is REQUIRED and conforms to the format defined in Section 4.4 Identifiers. The value MUST be unique among the list of related resource objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=The%20identifier%20for%20the%20resource%20is%20REQUIRED%20and%20conforms%20to%20the%20format%20defined%20in%20Section%204.4%20Identifiers.%20The%20value%20MUST%20be%20unique%20among%20the%20list%20of%20related%20resource%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 333,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            }
          ]
        },
        {
          "id": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
          "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
          "cells": [
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:302fabee-ff46-44e5-a533-c980015db67b",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59611,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:b1ed6eb6-15fb-4eac-bc48-5aad98d15a9d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 298,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:313ea2c3-9352-45e4-b2a7-2c2ed5cc6eb6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:e12cce3b-9072-4327-8280-1a2291d61658",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:c17b6594-8b6d-4ec7-bdf3-df46fbccd75f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64509,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/relatedResource/relatedResource-no-digest-fail.json'\n        )),\n        {name: 'HTTPError'},\n        'Failed to reject a VC with a relatedResource with no digest info.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:19de25c9-6bfb-403d-8051-ab3c7184fffb",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Each object associated with relatedResource MUST contain at least a digestSRI or a digestMultibase value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#integrity-of-related-resources:~:text=Each%20object%20associated%20with%20relatedResource%20MUST%20contain%20at%20least%20a%20digestSRI%20or%20a%20digestMultibase%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66066,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            }
          ]
        },
        {
          "id": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
          "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:c187f25e-a65c-4db9-be43-38de1a76fd74",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:7b17394d-f505-48ca-bbec-25480241fe8d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 403,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:caa389ff-f62c-4acd-acc4-b0ada6a05594",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:b02490f2-96ac-4a2f-8534-20214e053fd3",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:a4a74dad-b660-478a-abc0-fe9399fccb98",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:ae554b21-c339-4212-92a8-2e14338c355c",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 275,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each refreshService value MUST specify its type.",
          "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
          "cells": [
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:7ff4c4d7-0abd-4c53-ab78-ab92bc55c8a9",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59704,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:44f430be-bede-44ae-aea7-cd4d405d4d43",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61092,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 408,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:26ad36db-f1bd-4033-a6b0-a35821cb475b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:7a36cc6a-9fa3-4da4-a83e-57b28d4e7d63",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:8facdd66-e76e-4766-bc1b-3ee2b82980cd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          {name: 'HTTPError'},\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:ec0c123b-5151-4e5e-9c84-ab90076cbb06",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
          "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:23b51370-1bf4-40ba-b880-c2298463c42e",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59728,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:22ec6164-382a-452e-87cf-0f0b818af90d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61500,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 189,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:6dea114e-797f-4eb8-a2c3-23a7500397f1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62914,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:b8f4f75d-4dce-478e-b98b-b0c8041583a4",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:2eda6d4b-2498-4506-9cd4-59ae2c45f0ca",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64648,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:be370525-2375-4717-b498-8757165d36e7",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66613,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
          "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
          "cells": [
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:519b4492-2672-455d-9b55-4208c2f173ed",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:e4ed6fa4-fdfe-47e4-b132-63799042b34f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "expected": {
                  "name": "HTTPError"
                },
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:60d8615d-09bf-49c3-83ee-1a2beadeb718",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:0daddfd1-6819-4e81-9d0c-4e3b8c4ae0af",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:9d50ac02-11a7-4f24-8393-f1b16c756acd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')),\n        {name: 'HTTPError'});\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:0fff6765-0121-4721-bb76-f844eada0ee6",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 442,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
          "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:c64f955a-c5ee-47f5-876e-9cdb095101c5",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:5e7b22d7-54bc-48be-b027-255d880617d6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:0592f0be-e610-4507-b7db-60fa41629881",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:6678469b-e079-4d4c-acfe-c6bb304e01c6",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64117,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:b01f3020-4fbf-4e4d-8d91-a44b116505aa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If present, the value associated with the evidence property is a single object or a set of one or more objects.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:6ab478fe-7887-4151-8e69-246d9b8fa71d",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "If present, the value associated with the evidence property is a single object or a set of one or more objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=If%20present%2C%20the%20value%20associated%20with%20the%20evidence%20property%20is%20a%20single%20object%20or%20a%20set%20of%20one%20or%20more%20objects.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
          "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
          "cells": [
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "Atir9TjyMB61LHPuzR4Oc",
              "ctx": null,
              "_testId": "urn:uuid:61622f82-0706-4cb1-94bb-17748f4d74a6",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59853,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "db5a5fDzpM-vu_c7UGmY3",
              "ctx": null,
              "_testId": "urn:uuid:5f1b6503-1b11-4379-b758-825d2eb7fea9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62002,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "3C7HK06axTTnRSPuFNoMC",
              "ctx": null,
              "_testId": "urn:uuid:d539ee68-8664-4cc9-932c-cf446ba3071c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63208,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "cF1iCCa7YaESiZZusCPNc",
              "ctx": null,
              "_testId": "urn:uuid:ea41d7b8-358e-4b2f-905f-66ee18d5289b",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "4Di7Ylvd35ZV8ifqL1UW_",
              "ctx": null,
              "_testId": "urn:uuid:af8b702f-44c7-40f7-9e89-87d406562c5f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            },
            {
              "type": "test",
              "title": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.`;\n        // TODO: implement\n        this.test.cell.skipMessage = 'TBD';\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/50-advanced-concepts.js",
              "parent": "JrqL8ngVm5xrckda_aPUV",
              "ctx": null,
              "_testId": "urn:uuid:2763cf4e-da4e-402b-abd2-24771ab9e87b",
              "cell": {
                "columnId": "VC Issuer Mock",
                "rowId": "In order to avoid collisions regarding how the following properties are used, implementations MUST specify a type property in the value associated with the reserved property.",
                "skipMessage": "TBD"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#reserved-extension-points:~:text=In%20order%20to%20avoid%20collisions%20regarding%20how%20the%20following%20properties%20are%20used%2C%20implementations%20MUST%20specify%20a%20type%20property%20in%20the%20value%20associated%20with%20the%20reserved%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending",
              "err": {
                "message": "TBD"
              }
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "shortName": "vc2.0-test-suite",
    "group": "vc",
    "specStatus": "base",
    "subtitle": "Verifiable Credentials Data Model v2.0 Interoperability Report",
    "github": "https://github.com/w3c/vc-data-model-2.0-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-data-model-2.0-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "otherLinks": [
      {
        "key": "Related Specifications",
        "data": [
          {
            "value": "The Verifiable Credentials Data Model v2.0",
            "href": "https://www.w3.org/TR/vc-data-model-2.0/"
          }
        ]
      }
    ],
    "editors": [
      {
        "name": "Charles E. Lehner",
        "url": "https://www.w3.org/wiki/User:Cel"
      },
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Charles E. Lehner",
        "url": "https://www.w3.org/wiki/User:Cel"
      },
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "VC v2.0 Interoperability Report",
  "stats": [
    "Tests passed 258/309 83%",
    "Tests failed 51/309 17%",
    "Failures 51",
    "Tests skipped 45",
    "Total tests 354"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}