{
  "matrices": [
    {
      "title": "Basic Conformance",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Conforming document (compliance): VCDM \"MUST be enforced.\" (\"all relevant normative statements in Sections 4. Basic Concepts, 5. Advanced Concepts, and 6. Syntaxes\")",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Y8LMRR4xIHyMU5lXXpJIL",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc),\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc),\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Y8LMRR4xIHyMU5lXXpJIL",
              "ctx": null,
              "_testId": "urn:uuid:206e0b5d-828e-47af-9ba7-c51db48415d7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 359,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 448,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Y8LMRR4xIHyMU5lXXpJIL",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yQtXYH_aszY-AjG5Yscpf",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:23680020-a051-40e2-b068-71c9cb266647"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Conforming document (compliance): VCDM \"MUST be enforced.\" (\"all relevant normative statements in Sections 4. Basic Concepts, 5. Advanced Concepts, and 6. Syntaxes\")",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "oNvzTmhhQohadZRt0P8rF",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc),\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc),\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "oNvzTmhhQohadZRt0P8rF",
              "ctx": null,
              "_testId": "urn:uuid:39a8fc85-0a16-4603-93df-9bd41f6ee5cf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 633,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "oNvzTmhhQohadZRt0P8rF",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yQtXYH_aszY-AjG5Yscpf",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:49230138-c352-465b-83d7-bd2021d6b794"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Conforming document (compliance): VCDM \"MUST be enforced.\" (\"all relevant normative statements in Sections 4. Basic Concepts, 5. Advanced Concepts, and 6. Syntaxes\")",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "U5eLtWBNd6VB0iAk4cMru",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc),\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc),\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "U5eLtWBNd6VB0iAk4cMru",
              "ctx": null,
              "_testId": "urn:uuid:c9729a7a-cfea-4a7d-a831-9f71d5d7bc0f",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1441,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4641,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "U5eLtWBNd6VB0iAk4cMru",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yQtXYH_aszY-AjG5Yscpf",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:dbb4e311-0139-4bf6-a74b-29bf000225ad"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Conforming document (compliance): VCDM \"MUST be enforced.\" (\"all relevant normative statements in Sections 4. Basic Concepts, 5. Advanced Concepts, and 6. Syntaxes\")",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "96uXKSYdPOCUGqufABoet",
              "ctx": null,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc),\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc),\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "96uXKSYdPOCUGqufABoet",
              "ctx": null,
              "_testId": "urn:uuid:3e74b117-4e4d-40f3-9e72-f1f8653b5749",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 750,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "96uXKSYdPOCUGqufABoet",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yQtXYH_aszY-AjG5Yscpf",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:7909dc10-eead-4326-b96f-5cf5df4d39cc"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:50eeafe7-3fcd-43e6-b881-fc67c87d8d20",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "verifiers MUST produce errors when non-conforming documents are detected.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
          "cells": [
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc),\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc),\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Y8LMRR4xIHyMU5lXXpJIL",
              "ctx": null,
              "_testId": "urn:uuid:206e0b5d-828e-47af-9ba7-c51db48415d7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 359,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 448,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc),\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc),\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "oNvzTmhhQohadZRt0P8rF",
              "ctx": null,
              "_testId": "urn:uuid:39a8fc85-0a16-4603-93df-9bd41f6ee5cf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 633,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc),\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc),\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "U5eLtWBNd6VB0iAk4cMru",
              "ctx": null,
              "_testId": "urn:uuid:c9729a7a-cfea-4a7d-a831-9f71d5d7bc0f",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1441,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4641,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifiers MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.`;\n        const doc = {\n          type: ['NonconformingDocument']\n        };\n        await assert.rejects(endpoints.verify(doc),\n          'Failed to reject malformed VC.');\n        await assert.rejects(endpoints.verifyVp(doc),\n          'Failed to reject malformed VP.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "96uXKSYdPOCUGqufABoet",
              "ctx": null,
              "_testId": "urn:uuid:3e74b117-4e4d-40f3-9e72-f1f8653b5749",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "verifiers MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 750,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Contexts",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')),\n          'Failed to reject a VC without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:dd446340-01da-43be-924b-b04492d5448b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VP with intact `@context`.');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')),\n          'Failed to reject a VP without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:6547a68b-c297-4001-add3-d369a385bb3f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')),\n        'Failed to reject a VC that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:6326ecfb-ec8d-4e62-83b6-cbc8401daaec",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 399,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vp['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.');\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')),\n        'Failed to reject a VP that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:0886a61a-2500-4d2c-a894-4145f9310178",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'),\n        'Failed to support multiple `@context` URLs.'));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'),\n        'Failed to support objects in the `@context` Array.'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:0c8d8194-e8e8-47cf-b3fe-4c32c5b1ffca",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1301,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mlXWNtmx563Fb_C7JHKF9",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:34789ab7-b3b2-483d-9a48-121953eb45b1"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')),\n          'Failed to reject a VC without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:eca71ca8-9a6f-43bd-b421-5098067b0a9a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 773,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VP with intact `@context`.');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')),\n          'Failed to reject a VP without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:7158320d-0494-4213-b9c0-07d4b9e30940",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10665,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 734,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')),\n        'Failed to reject a VC that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:1679b949-2efd-49cc-a175-078ed7f853d7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 350,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vp['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.');\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')),\n        'Failed to reject a VP that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:b54ab5a0-22db-4d14-a834-aa733cd02fba",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 320,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'),\n        'Failed to support multiple `@context` URLs.'));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'),\n        'Failed to support objects in the `@context` Array.'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:171aee06-bd14-4365-a538-5030abd53ed4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12070,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 860,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mlXWNtmx563Fb_C7JHKF9",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:0123a61a-aec0-45ef-8e46-df97a52598e7"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')),\n          'Failed to reject a VC without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:228290dd-d04d-44eb-a513-cdecd54194f5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 529,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VP with intact `@context`.');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')),\n          'Failed to reject a VP without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:6c344621-b237-41a5-9020-ffc31a12944e",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')),\n        'Failed to reject a VC that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:acd09709-04f6-41b3-a989-c4468f67b5c1",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13535,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 175,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vp['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.');\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')),\n        'Failed to reject a VP that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:e3ceee3c-addf-4c2f-9070-125bf304f654",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'),\n        'Failed to support multiple `@context` URLs.'));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'),\n        'Failed to support objects in the `@context` Array.'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:60676f04-3d50-4764-a507-afb66b4f71cd",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 564,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mlXWNtmx563Fb_C7JHKF9",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:0909cd5a-a02a-4e40-ab25-92664fb8adb3"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')),\n          'Failed to reject a VC without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:1e555021-ba28-49bb-a447-be8e1a21c63c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 678,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VP with intact `@context`.');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')),\n          'Failed to reject a VP without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:697ee8d6-672b-4c17-b843-63b43adb418c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')),\n        'Failed to reject a VC that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:65542814-ed38-4928-bd87-80cef20eb196",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15120,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 191,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vp['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.');\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')),\n        'Failed to reject a VP that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:72a2849b-5177-4e19-9fc7-8b379a00ba7e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15312,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'),\n        'Failed to support multiple `@context` URLs.'));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'),\n        'Failed to support objects in the `@context` Array.'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:2151b418-562d-41fa-9726-7599a0c0bdb6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 389,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mlXWNtmx563Fb_C7JHKF9",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:352673f1-eab3-42e8-8e89-82e25bd8536d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:3375ed8f-9059-43dc-b527-3f2e767d5e65",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "Verifiable credentials MUST include a @context property.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')),\n          'Failed to reject a VC without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:dd446340-01da-43be-924b-b04492d5448b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1154,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')),\n          'Failed to reject a VC without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:eca71ca8-9a6f-43bd-b421-5098067b0a9a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 773,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')),\n          'Failed to reject a VC without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:228290dd-d04d-44eb-a513-cdecd54194f5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 529,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          // positive @context test\n          const vc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n          vc.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VC with intact `@context`.');\n          // negative @context test\n          await assert.rejects(endpoints.issue(\n            require('./input/credential-no-context-fail.json')),\n          'Failed to reject a VC without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:1e555021-ba28-49bb-a447-be8e1a21c63c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 678,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable presentations MUST include a @context property.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VP with intact `@context`.');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')),\n          'Failed to reject a VP without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:6547a68b-c297-4001-add3-d369a385bb3f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VP with intact `@context`.');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')),\n          'Failed to reject a VP without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:7158320d-0494-4213-b9c0-07d4b9e30940",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10665,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 734,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VP with intact `@context`.');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')),\n          'Failed to reject a VP without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:6c344621-b237-41a5-9020-ffc31a12944e",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST include a @context property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.`;\n          const vp = await endpoints.createVp({\n            presentation: require('./input/presentation-ok.json'),\n            options: createOptions\n          });\n          vp.should.have.property('@context').to.be.an('array',\n            'Failed to respond with a VP with intact `@context`.');\n          await assert.rejects(endpoints.verifyVp(\n            require('./input/presentation-no-context-fail.json')),\n          'Failed to reject a VP without an `@context`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:697ee8d6-672b-4c17-b843-63b43adb418c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations MUST include a @context property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20include%20a%20%40context%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')),\n        'Failed to reject a VC that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:6326ecfb-ec8d-4e62-83b6-cbc8401daaec",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 399,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')),\n        'Failed to reject a VC that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:1679b949-2efd-49cc-a175-078ed7f853d7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 350,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')),\n        'Failed to reject a VC that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:acd09709-04f6-41b3-a989-c4468f67b5c1",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13535,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 175,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        //positive issue test\n        const vc = await endpoints.issue(require('./input/credential-ok.json'));\n        assert(Array.isArray(vc['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vc['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.'\n        );\n        // negative issue test\n        await assert.rejects(endpoints.issue(\n          require('./input/credential-missing-base-context-fail.json')),\n        'Failed to reject a VC that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:65542814-ed38-4928-bd87-80cef20eb196",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15120,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 191,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vp['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.');\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')),\n        'Failed to reject a VP that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:0886a61a-2500-4d2c-a894-4145f9310178",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vp['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.');\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')),\n        'Failed to reject a VP that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:b54ab5a0-22db-4d14-a834-aa733cd02fba",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 320,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vp['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.');\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')),\n        'Failed to reject a VP that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:e3ceee3c-addf-4c2f-9070-125bf304f654",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.`;\n        const vp = await endpoints.createVp({\n          presentation: require('./input/presentation-ok.json'),\n          options: createOptions\n        });\n        assert(Array.isArray(vp['@context']),\n          'Failed to support `@context` as an Array.');\n        assert.strictEqual(vp['@context'][0], baseContextUrl,\n          'Failed to keep `@context` order intact.');\n        await assert.rejects(endpoints.verifyVp(\n          require('./input/presentation-missing-base-context-fail.json')),\n        'Failed to reject a VP that lacked the VC base context URL.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:72a2849b-5177-4e19-9fc7-8b379a00ba7e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations: The value of the @context property MUST be an ordered set where the first item is a URL with the value https://www.w3.org/ns/credentials/v2."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20%40context%20property%20MUST%20be%20an%20ordered%20set%20where%20the%20first%20item%20is%20a%20URL%20with%20the%20value%20https%3A//www.w3.org/ns/credentials/v2.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15312,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'),\n        'Failed to support multiple `@context` URLs.'));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'),\n        'Failed to support objects in the `@context` Array.'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "910pkVm5n_NbSJleTwsR5",
              "ctx": null,
              "_testId": "urn:uuid:0c8d8194-e8e8-47cf-b3fe-4c32c5b1ffca",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1301,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'),\n        'Failed to support multiple `@context` URLs.'));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'),\n        'Failed to support objects in the `@context` Array.'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JkwwUiZIf56YVk5a5HKM_",
              "ctx": null,
              "_testId": "urn:uuid:171aee06-bd14-4365-a538-5030abd53ed4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12070,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 860,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'),\n        'Failed to support multiple `@context` URLs.'));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'),\n        'Failed to support objects in the `@context` Array.'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "DBb_UvlUndRCQZrRRGCHK",
              "ctx": null,
              "_testId": "urn:uuid:60676f04-3d50-4764-a507-afb66b4f71cd",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 564,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\"",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo1-ok.json'),\n        'Failed to support multiple `@context` URLs.'));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-context-combo2-ok.json'),\n        'Failed to support objects in the `@context` Array.'));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo3-fail.json')),\n        'Failed to reject a VC with an invalid `@context` URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-context-combo4-fail.json')),\n        'Failed to reject a VC with an unsupported `@context` value type ' +\n        '(number).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "R_X2S16hPlbO4gH5ZN0Dj",
              "ctx": null,
              "_testId": "urn:uuid:2151b418-562d-41fa-9726-7599a0c0bdb6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credential @context: \"Subsequent items in the ordered set MUST be composed of any combination of URLs and/or objects where each is processable as a JSON-LD Context.\""
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Subsequent%20items%20in%20the%20ordered%20set%20MUST%20be%20composed%20of%20any%20combination%20of%20URLs%20and/or%20objects%2C%20where%20each%20is%20processable%20as%20a%20JSON%2DLD%20Context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 389,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Identifiers",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "8NXfv6O6m2JtoV34KlgjA",
              "ctx": null,
              "_testId": "urn:uuid:35517e6b-701a-48f3-901b-b445ea98dbb2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2496,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8NXfv6O6m2JtoV34KlgjA",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yW1SOOb6H6TRgO4Wy9naN",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:49f1225d-caf7-4d5a-8d8f-dba4519a6706"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "LPug9V92MQWQ5SwS6xTzY",
              "ctx": null,
              "_testId": "urn:uuid:90d75896-59f6-434f-ae25-675b3d5b3ed8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1349,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "LPug9V92MQWQ5SwS6xTzY",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yW1SOOb6H6TRgO4Wy9naN",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:be5ca83e-12cf-4bc5-b6cd-880e5de20f83"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FsXyJTW0L-bXPCW8_Sk7V",
              "ctx": null,
              "_testId": "urn:uuid:85d9b05f-0585-415c-8a62-b8589064d345",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 957,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FsXyJTW0L-bXPCW8_Sk7V",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yW1SOOb6H6TRgO4Wy9naN",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:7404c7ff-38a1-4a20-9349-c2b53c57f154"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "PmX0vMsLf2mmzmdYH7fnW",
              "ctx": null,
              "_testId": "urn:uuid:184e40bf-2606-4e11-9859-f28f0400c926",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20599,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 727,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PmX0vMsLf2mmzmdYH7fnW",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "yW1SOOb6H6TRgO4Wy9naN",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:02e17bd9-8680-4354-b410-8a9cbc67feba"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:8ba6d0c3-84d4-4a71-8147-33a508e8bb45",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "8NXfv6O6m2JtoV34KlgjA",
              "ctx": null,
              "_testId": "urn:uuid:35517e6b-701a-48f3-901b-b445ea98dbb2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2496,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "LPug9V92MQWQ5SwS6xTzY",
              "ctx": null,
              "_testId": "urn:uuid:90d75896-59f6-434f-ae25-675b3d5b3ed8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1349,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FsXyJTW0L-bXPCW8_Sk7V",
              "ctx": null,
              "_testId": "urn:uuid:85d9b05f-0585-415c-8a62-b8589064d345",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 957,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-id-other-ok.json')),\n        'Failed to accept a VC with a DID credentialSubject identifier.');\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-id-nonidentifier-fail.json')),\n          'Failed to reject a credential with a `null` identifier.');\n\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-single-ok.json')),\n        'Failed to accept a VC with a valid identifier.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-id-subject-single-ok.json')),\n        'Failed to accept a VC with a valid credentialSubject identifier');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-multi-fail.json')),\n        'Failed to reject a VC with multiple `id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-id-subject-multi-fail.json')),\n        'Failed to reject a VC with multiple credentialSubject identifiers.');\n\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-id-not-url-fail.json')),\n          'Failed to reject a credential with an invalid identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "PmX0vMsLf2mmzmdYH7fnW",
              "ctx": null,
              "_testId": "urn:uuid:184e40bf-2606-4e11-9859-f28f0400c926",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the id property MUST be a single URL, which MAY be dereferenceable."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20present%2C%20the%20value%20of%20the%20id%20property%20MUST%20be%20a%20single%20URL%2C%20which%20MAY%20be%20dereferenceable.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20599,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 727,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Types",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:ffa10693-b682-4027-8253-fc95e6bfbb4f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:ccabb46f-a42f-4ee2-bee6-5fc4df739b2b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:a9582ba8-0d96-422e-97e0-b9c445e6e57b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1128,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:2d8aedf4-d807-496a-8dcf-e5b558727019",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22600,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 601,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:3306381c-ef33-4cc0-987e-482aca8a5f5e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 228,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:fdd60e32-a934-4aaf-a402-ba5520d27ca4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:05:43Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\",\"proofValue\":\"zbeFrUnS9dqNdCP49bHKyHt7KB6T4A92dLcS4G46RMxTwiwWA4rUy8x14pRSmNXxQhH6GGze5Xcjumt28pkY5WAw\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-04T05:05:43Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ",
                          "proofValue": "zbeFrUnS9dqNdCP49bHKyHt7KB6T4A92dLcS4G46RMxTwiwWA4rUy8x14pRSmNXxQhH6GGze5Xcjumt28pkY5WAw"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ],
                        "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:229f3f0f-a129-492a-bad7-46b48362c6a0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 607,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:494975f6-5057-45f0-85f4-3c5b3357fbdc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 796,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:e9851b41-821b-461b-80d3-d2fa9129585a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 698,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:ba4f09ba-d8d6-4ee2-aff7-a52e27eb2a89",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 696,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:892a8654-7aea-4eb5-a2e0-2092ea17c1fc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 611,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "S1ddOa9KyhlvS-_0S_x1C",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:e8355712-5a1f-4202-944b-298ed4124faa"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:337f356d-182c-42c9-8276-5e6ff1f5d72e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:fa10b3ea-5c1d-41d4-bbae-6250678280c2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:885e3093-9af2-4a99-b884-d907c946a50e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 471,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:6f7f190b-1029-4531-a116-6f53ecae2ac1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27714,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 256,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:d379d754-7b87-41cd-bc63-44a3522b2acc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27971,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:ccba1618-4eba-4cec-810d-4ef431ffa328",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 191,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:74908f99-c57a-41b5-a11b-efc6bc1a1249",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:51bdaad4-211b-4120-9a31-89e9aeb466ab",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 237,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:e4fa33f9-dea6-4084-b14f-c0b77919e354",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:3df99f64-ce03-4035-9993-19a8397c1fe6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29113,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 280,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:774c62a3-8f0d-4457-98b4-8242da762b3a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29394,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 263,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "S1ddOa9KyhlvS-_0S_x1C",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:71ec211c-84ab-44d0-a2bc-9f20f8170d51"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:577ab73d-1ae5-4327-8147-0c0be3ac4669",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29658,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 344,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:cddea173-d721-4b22-82b4-7beed998e704",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:5cd7e97b-32be-45b9-8747-37ef35ac8656",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 538,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:e2073cd1-3732-491f-86e5-8c086472bcd5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:f2e20420-1c7e-4325-a487-5ce147eae11d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30861,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 173,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:a0c39960-ff75-4c5d-80d5-a1a62c69545e",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:05:51Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\",\"proofValue\":\"zY5fvvsA3zUC2iqKz7Bw9e5M5YuRfLiSJn2MmB4ictrjdtgbxym23dNE866ccEAwTRLw85FUxbaYuzVNc5siaUyD\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-04T05:05:51Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ",
                          "proofValue": "zY5fvvsA3zUC2iqKz7Bw9e5M5YuRfLiSJn2MmB4ictrjdtgbxym23dNE866ccEAwTRLw85FUxbaYuzVNc5siaUyD"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ],
                        "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://agent.opsec.id/vc/presentations/verify",
                  "status": 500
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:71970bc3-94e4-4c6a-a105-83c6e4f021cc",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:44a10f90-2651-4b48-b1f6-125ccf75904d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 173,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:86b68d10-b502-4c42-8901-486db03e8e68",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 177,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:1fea68cd-316c-4039-91f2-00f4108b015c",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:d6a2f758-82c8-415d-b9c0-de7c14ae2d4b",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "S1ddOa9KyhlvS-_0S_x1C",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:99ab84bc-a7ac-49c4-9154-b0ce2d8a2dec"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:dc0e9c41-b394-44ec-a2f6-0b5f720de279",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:f4b943d1-dc58-4423-8642-84f337127ac1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:1b9758f7-0433-4a3c-b0b8-3d8a2dbcc1ac",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32232,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 445,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:fb670ed7-f915-457a-b320-5ab7bc8fcc91",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:a2a194c5-3c64-4276-bfae-1b84fd396e01",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:87e4517f-5c51-4990-8428-2f1a7425d8b0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:a066bcba-df43-4084-b729-ca41d5e1d606",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:5a3dc224-7306-41e7-a185-1813ad384c57",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:7bf2936c-03bc-4e18-83e0-f2ef7efa4f38",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:5ffc08ea-c0fc-46e3-bdfe-1f27b4fdcd27",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:b61f7e8a-8e2d-47dd-97d9-dd61662d067d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34114,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "S1ddOa9KyhlvS-_0S_x1C",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:2e962fa2-fc65-4602-bce0-60aefe485c07"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:55d24362-d72c-4eb1-b5d7-6deba137f88f",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "Verifiable credentials MUST contain a type property with an associated value.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:ffa10693-b682-4027-8253-fc95e6bfbb4f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:337f356d-182c-42c9-8276-5e6ff1f5d72e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:577ab73d-1ae5-4327-8147-0c0be3ac4669",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29658,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 344,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable credentials MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(\n          endpoints.issue(require('./input/credential-no-type-fail.json')),\n          'Failed to reject a VC without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:dc0e9c41-b394-44ec-a2f6-0b5f720de279",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable credentials MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable presentations MUST contain a type property with an associated value.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:ccabb46f-a42f-4ee2-bee6-5fc4df739b2b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:fa10b3ea-5c1d-41d4-bbae-6250678280c2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:cddea173-d721-4b22-82b4-7beed998e704",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Verifiable presentations MUST contain a type property with an associated value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.`;\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-no-type-fail.json')),\n        'Failed to reject a VP without a type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:f4b943d1-dc58-4423-8642-84f337127ac1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable presentations MUST contain a type property with an associated value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=Verifiable%20credentials%20and%20verifiable%20presentations%20MUST%20contain%20a%20type%20property%20with%20an%20associated%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:a9582ba8-0d96-422e-97e0-b9c445e6e57b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1128,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:885e3093-9af2-4a99-b884-d907c946a50e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 471,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:5cd7e97b-32be-45b9-8747-37ef35ac8656",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 538,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the type property MUST be one or more terms and/or absolute URL strings.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.`;\n        // type is URL: OK\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-type-url-ok.json')),\n        'Failed to accept a VC with an additional type as a URL.');\n        // type mapping to URL: OK\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-mapped-url-ok.json')),\n        'Failed to accept a VC with an additional type defined in the ' +\n        '`@context`.');\n        // type mapped not to URL: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-mapped-nonurl-fail.json')),\n        'Failed to reject a VC with type mapped to an invalid URL.');\n        // type not mapped: fail\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-type-unmapped-fail.json')),\n        'Failed to reject a VC with an unmapped (via `@context`) type.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:1b9758f7-0433-4a3c-b0b8-3d8a2dbcc1ac",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the type property MUST be one or more terms and/or absolute URL strings."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=The%20value%20of%20the%20type%20property%20MUST%20be%20one%20or%20more%20terms%20and/or%20absolute%20URL%20strings.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32232,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 445,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If more than one (type) value is provided, the order does not matter.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
          "cells": [
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:2d8aedf4-d807-496a-8dcf-e5b558727019",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22600,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 601,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:6f7f190b-1029-4531-a116-6f53ecae2ac1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27714,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 256,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:e2073cd1-3732-491f-86e5-8c086472bcd5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If more than one (type) value is provided, the order does not matter.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.`;\n        //issue VC with multiple urls in type property\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-1-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'last).');\n        //issue another VC with same urls in a different order\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-type-urls-order-2-ok.json')),\n        'Failed to accept a VC with different type array ordering (VC type ' +\n        'middle).');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:fb670ed7-f915-457a-b320-5ab7bc8fcc91",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If more than one (type) value is provided, the order does not matter."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=If%20more%20than%20one%20value%20is%20provided%2C%20the%20order%20does%20not%20matter.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable Credential objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:3306381c-ef33-4cc0-987e-482aca8a5f5e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 228,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:d379d754-7b87-41cd-bc63-44a3522b2acc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27971,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:f2e20420-1c7e-4325-a487-5ce147eae11d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30861,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 173,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Credential objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-optional-type-ok.json')),\n          'Failed to accept a VC with additional type.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-missing-required-type-fail.json')),\n          'Failed to reject a VC missing the `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:a2a194c5-3c64-4276-bfae-1b84fd396e01",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Credential objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Verifiable Presentation objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:fdd60e32-a934-4aaf-a402-ba5520d27ca4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:05:43Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\",\"proofValue\":\"zbeFrUnS9dqNdCP49bHKyHt7KB6T4A92dLcS4G46RMxTwiwWA4rUy8x14pRSmNXxQhH6GGze5Xcjumt28pkY5WAw\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-04T05:05:43Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ",
                          "proofValue": "zbeFrUnS9dqNdCP49bHKyHt7KB6T4A92dLcS4G46RMxTwiwWA4rUy8x14pRSmNXxQhH6GGze5Xcjumt28pkY5WAw"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ],
                        "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:ccba1618-4eba-4cec-810d-4ef431ffa328",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 191,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:a0c39960-ff75-4c5d-80d5-a1a62c69545e",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31035,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",{\"CredentialManagerPresentation\":\"https://example.org/examples#CredentialManagerPresentation\"}],\"type\":[\"VerifiablePresentation\",\"CredentialManagerPresentation\"],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:05:51Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\",\"proofValue\":\"zY5fvvsA3zUC2iqKz7Bw9e5M5YuRfLiSJn2MmB4ictrjdtgbxym23dNE866ccEAwTRLw85FUxbaYuzVNc5siaUyD\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\"}}",
                    "method": "POST",
                    "json": {
                      "verifiablePresentation": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          {
                            "CredentialManagerPresentation": "https://example.org/examples#CredentialManagerPresentation"
                          }
                        ],
                        "type": [
                          "VerifiablePresentation",
                          "CredentialManagerPresentation"
                        ],
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-04T05:05:51Z",
                          "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "cryptosuite": "eddsa-2022",
                          "proofPurpose": "authentication",
                          "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ",
                          "proofValue": "zY5fvvsA3zUC2iqKz7Bw9e5M5YuRfLiSJn2MmB4ictrjdtgbxym23dNE866ccEAwTRLw85FUxbaYuzVNc5siaUyD"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ],
                        "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://agent.opsec.id/vc/presentations/verify",
                  "status": 500
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "Verifiable Presentation objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          const presentationOptionalType = await endpoints.createVp({\n            presentation: require('./input/presentation-optional-type-ok.json'),\n            options: createOptions\n          });\n          await assert.doesNotReject(endpoints.verifyVp(\n            presentationOptionalType,\n            verifyPresentationOptions\n          ), 'Failed to accept VP with `@context` mapped type.');\n          await assert.rejects(\n            endpoints.verifyVp(require(\n              './input/presentation-missing-required-type-fail.json')),\n            'Failed to reject VP missing `VerifiableCredential` type.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:87e4517f-5c51-4990-8428-2f1a7425d8b0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Verifiable Presentation objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`credentialStatus` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:229f3f0f-a129-492a-bad7-46b48362c6a0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 607,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:74908f99-c57a-41b5-a11b-efc6bc1a1249",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 233,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:71970bc3-94e4-4c6a-a105-83c6e4f021cc",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialStatus` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-status-ok.json')),\n          'Failed to accept a VC with `credentialStatus` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-status-missing-type-fail.json')),\n          'Failed to reject a VC with `credentialStatus` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:a066bcba-df43-4084-b729-ca41d5e1d606",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`credentialStatus` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`termsOfUse` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:494975f6-5057-45f0-85f4-3c5b3357fbdc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 796,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:51bdaad4-211b-4120-9a31-89e9aeb466ab",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 237,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:44a10f90-2651-4b48-b1f6-125ccf75904d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 173,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`termsOfUse` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(require(\n            './input/credential-termsofuse-ok.json')),\n          'Failed to accept a VC with `termsOfUse` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-termsofuse-missing-type-fail.json')),\n          'Failed to reject a VC with `termsOfUse` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:5a3dc224-7306-41e7-a185-1813ad384c57",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`termsOfUse` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`evidence` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:e9851b41-821b-461b-80d3-d2fa9129585a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 698,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:e4fa33f9-dea6-4084-b14f-c0b77919e354",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:86b68d10-b502-4c42-8901-486db03e8e68",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 177,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`evidence` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-evidence-ok.json')),\n          'Failed to accept a VC with `evidence` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-evidence-missing-type-fail.json')),\n          'Failed to reject a VC with `evidence` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:7bf2936c-03bc-4e18-83e0-f2ef7efa4f38",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`evidence` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`refreshService` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:ba4f09ba-d8d6-4ee2-aff7-a52e27eb2a89",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 696,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:3df99f64-ce03-4035-9993-19a8397c1fe6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29113,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 280,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:1fea68cd-316c-4039-91f2-00f4108b015c",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`refreshService` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-refresh-type-ok.json')),\n          'Failed to accept a VC with `refreshService` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')),\n          'Failed to reject a VC with `refreshService` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:5ffc08ea-c0fc-46e3-bdfe-1f27b4fdcd27",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`refreshService` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "`credentialSchema` objects MUST have a type specified.",
          "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "xJ-55cEUL1UoCPIwMMXE2",
              "ctx": null,
              "_testId": "urn:uuid:892a8654-7aea-4eb5-a2e0-2092ea17c1fc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 611,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dPEJrgQLUC3IzRUoa9yRZ",
              "ctx": null,
              "_testId": "urn:uuid:774c62a3-8f0d-4457-98b4-8242da762b3a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29394,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 263,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "uIgalg7Z48MuDI7WXlMpx",
              "ctx": null,
              "_testId": "urn:uuid:d6a2f758-82c8-415d-b9c0-de7c14ae2d4b",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "`credentialSchema` objects MUST have a type specified.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.`;\n          await assert.doesNotReject(endpoints.issue(\n            require('./input/credential-schema-type-ok.json')),\n          'Failed to accept a VC with `credentialSchema` with a `type`.');\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-schema-no-type-fail.json')),\n          'Failed to reject `credentialSchema` without a `type`.');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "IGMiz-jLW7NaduSApfOEl",
              "ctx": null,
              "_testId": "urn:uuid:b61f7e8a-8e2d-47dd-97d9-dd61662d067d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "`credentialSchema` objects MUST have a type specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#types:~:text=the%20following%20table%20lists%20the%20objects%20that%20MUST%20have%20a%20type%20specified.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34114,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Names and Descriptions",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "_testId": "urn:uuid:0cbd2493-84ad-46bf-9528-aaf6a76e0b3f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34315,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "_testId": "urn:uuid:4cb4be89-6c4b-436b-af65-7e63d2c53e4b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "_testId": "urn:uuid:b3da6d21-2e76-4dce-a768-fd523f391da3",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1403,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "_testId": "urn:uuid:fa3bd8d3-c885-40c8-8eea-cbdc2b8c7af4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39293,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1198,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cpEK0lnI0Rlk7r5vrd53x",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:e3563fd7-ac94-4e63-b542-df2b74ad115d"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "_testId": "urn:uuid:0fdf7f47-2237-4bbd-b408-0f21afe1685b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 573,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "name": {
                          "@value": "Example Credential",
                          "@language": "en",
                          "@direction": "ltr"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"name\":{\"@value\":\"Example Credential\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 500,
                  "data": {
                    "message": "An unspecified error occurred.",
                    "name": "OperationError",
                    "type": "OperationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "_testId": "urn:uuid:841b4779-74c6-4f77-a2e0-fa562b881a90",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 497,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "description": {
                          "@value": "An Example Credential",
                          "@language": "en",
                          "@direction": "ltr"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"description\":{\"@value\":\"An Example Credential\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 500,
                  "data": {
                    "message": "An unspecified error occurred.",
                    "name": "OperationError",
                    "type": "OperationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "_testId": "urn:uuid:b822c74f-cc8d-4f85-86c9-7afe2c7ce00b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 490,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": {
                          "name": {
                            "@value": "ExampleIssuer",
                            "@language": "en",
                            "@direction": "ltr"
                          },
                          "id": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        }
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"name\":{\"@value\":\"ExampleIssuer\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"id\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 500,
                  "data": {
                    "message": "An unspecified error occurred.",
                    "name": "OperationError",
                    "type": "OperationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "_testId": "urn:uuid:23020b33-8555-4272-b5da-a0dc4165053b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 476,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": {
                          "description": {
                            "@value": "An Example Issuer",
                            "@language": "en",
                            "@direction": "ltr"
                          },
                          "id": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        }
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"description\":{\"@value\":\"An Example Issuer\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"id\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 500,
                  "data": {
                    "message": "An unspecified error occurred.",
                    "name": "OperationError",
                    "type": "OperationError"
                  }
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cpEK0lnI0Rlk7r5vrd53x",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:76e4ef93-b4df-4d85-80b1-3a6307179e4a"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "_testId": "urn:uuid:a2489717-b6f6-47e9-88e0-2d5c93f2a8e7",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42527,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 996,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "_testId": "urn:uuid:826886de-9e57-42ae-b868-5efb747c2d5d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 690,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "_testId": "urn:uuid:348d76ac-4f99-488f-a405-b64ad9d1c1c5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 618,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "_testId": "urn:uuid:46363fc3-77b8-45ee-ad4c-5e569f3ee9c6",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 606,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cpEK0lnI0Rlk7r5vrd53x",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:9060d9f1-a3c5-44a2-a508-36705cc9a2c1"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "_testId": "urn:uuid:0e8a60b5-a300-4613-9b2c-20eb651676aa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45439,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 840,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "_testId": "urn:uuid:c03f8cb6-b2a8-4c62-bf76-7943d8eab81f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 577,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "_testId": "urn:uuid:296e6b0f-c84f-4bac-8a90-b2425a5df698",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 601,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "_testId": "urn:uuid:72d76509-12a4-44c3-9dcc-62cc566b28e0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 572,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cpEK0lnI0Rlk7r5vrd53x",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:48d8fee6-bf4e-4b00-bb3a-100b9387e386"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:fe16e443-4c5b-4e52-8ecd-2a51c673de51",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "_testId": "urn:uuid:0cbd2493-84ad-46bf-9528-aaf6a76e0b3f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34315,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "_testId": "urn:uuid:0fdf7f47-2237-4bbd-b408-0f21afe1685b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 573,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "name": {
                          "@value": "Example Credential",
                          "@language": "en",
                          "@direction": "ltr"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"name\":{\"@value\":\"Example Credential\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 500,
                  "data": {
                    "message": "An unspecified error occurred.",
                    "name": "OperationError",
                    "type": "OperationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "_testId": "urn:uuid:a2489717-b6f6-47e9-88e0-2d5c93f2a8e7",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42527,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 996,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-ok.json`)),\n        'Failed to accept a VC with a `name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-optional-ok.json`)),\n        'Failed to accept a VC without a `name` property.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-en-ok.json`)),\n        'Failed to accept a VC using `name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `name` containing extra properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "_testId": "urn:uuid:0e8a60b5-a300-4613-9b2c-20eb651676aa",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45439,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 840,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "_testId": "urn:uuid:4cb4be89-6c4b-436b-af65-7e63d2c53e4b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36690,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "_testId": "urn:uuid:841b4779-74c6-4f77-a2e0-fa562b881a90",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 497,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "description": {
                          "@value": "An Example Credential",
                          "@language": "en",
                          "@direction": "ltr"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"description\":{\"@value\":\"An Example Credential\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 500,
                  "data": {
                    "message": "An unspecified error occurred.",
                    "name": "OperationError",
                    "type": "OperationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "_testId": "urn:uuid:826886de-9e57-42ae-b868-5efb747c2d5d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43524,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 690,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-ok.json`)),\n        'Failed to accept a VC with `description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-optional-ok.json`)),\n        'Failed to accept a VC with `description` missing.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-description-language-en-ok.json`)),\n        'Failed to accept a VC using `description` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/credential-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `description` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/credential-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `description` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/credential-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "_testId": "urn:uuid:c03f8cb6-b2a8-4c62-bf76-7943d8eab81f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 577,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "_testId": "urn:uuid:b3da6d21-2e76-4dce-a768-fd523f391da3",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1403,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "_testId": "urn:uuid:b822c74f-cc8d-4f85-86c9-7afe2c7ce00b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 490,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": {
                          "name": {
                            "@value": "ExampleIssuer",
                            "@language": "en",
                            "@direction": "ltr"
                          },
                          "id": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        }
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"name\":{\"@value\":\"ExampleIssuer\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"id\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 500,
                  "data": {
                    "message": "An unspecified error occurred.",
                    "name": "OperationError",
                    "type": "OperationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "_testId": "urn:uuid:348d76ac-4f99-488f-a405-b64ad9d1c1c5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 618,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.name`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` in a defined language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-name-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.name` with language & direction ' +\n        'expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-name-ok.json`)),\n        'Failed to accept a VC with `issuer.name` in multiple languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-name-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.name` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "_testId": "urn:uuid:296e6b0f-c84f-4bac-8a90-b2425a5df698",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (on `issuer`), the value of the name property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20name%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 601,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
          "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
          "cells": [
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "_OCnF1Q90-a9e3Zj3ODM-",
              "ctx": null,
              "_testId": "urn:uuid:fa3bd8d3-c885-40c8-8eea-cbdc2b8c7af4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39293,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "jt0IDcriuI8GJVHfKiVsj",
              "ctx": null,
              "_testId": "urn:uuid:23020b33-8555-4272-b5da-a0dc4165053b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42050,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 476,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": {
                          "description": {
                            "@value": "An Example Issuer",
                            "@language": "en",
                            "@direction": "ltr"
                          },
                          "id": "did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf"
                        },
                        "credentialSubject": {
                          "id": "did:example:subject"
                        }
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":{\"description\":{\"@value\":\"An Example Issuer\",\"@language\":\"en\",\"@direction\":\"ltr\"},\"id\":\"did:key:z6MkhnwBZSeedjZmTVekVKF7ocwSHhFpeUyBEUGmGPP7sYdf\"},\"credentialSubject\":{\"id\":\"did:example:subject\"}}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1A26NEYyG47sREgmpcWAxsKw/credentials/issue",
                  "status": 500,
                  "data": {
                    "message": "An unspecified error occurred.",
                    "name": "OperationError",
                    "type": "OperationError"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "tf5P0h1EGiweyvs6vsTIa",
              "ctx": null,
              "_testId": "urn:uuid:46363fc3-77b8-45ee-ad4c-5e569f3ee9c6",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 606,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` as a string.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-optional-ok.json`)),\n        'Failed to accept a VC without `issuer.description`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-description-language-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` in a defined ' +\n        'language.');\n        await assert.doesNotReject(endpoints.issue(require(\n          // eslint-disable-next-line max-len\n          `${fixturePath}/issuer-description-language-direction-en-ok.json`)),\n        'Failed to accept a VC using `issuer.description` with language & ' +\n        'direction expressed.');\n        await assert.doesNotReject(endpoints.issue(require(\n          `${fixturePath}/issuer-multi-language-description-ok.json`)),\n        'Failed to accept a VC with `issuer.description` in multiple ' +\n        'languages.');\n        await assert.rejects(endpoints.issue(require(\n          `${fixturePath}/issuer-description-extra-prop-en-fail.json`)),\n        'Failed to reject a VC with `issuer.description` containing extra ' +\n        'properties.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MoC6MFTkqjpWIsKxep7wt",
              "ctx": null,
              "_testId": "urn:uuid:72d76509-12a4-44c3-9dcc-62cc566b28e0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (on `issuer`), the value of the description property MUST be a string or a language value object as described in 11.1 Language and Base Direction."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#names-and-descriptions:~:text=If%20present%2C%20the%20value%20of%20the%20description%20property%20MUST%20be%20a%20string%20or%20a%20language%20value%20object%20as%20described%20in%2011.1%20Language%20and%20Base%20Direction.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 572,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Credential Subject",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')),\n        'Failed to rejet a VC without a `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "mbpr89edI9Bc-P0d7w7KC",
              "ctx": null,
              "_testId": "urn:uuid:bbd24e43-e3a5-44e1-80b5-f4e1b6f10bb8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 656,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        // TODO: reconsider whether an empty object is a violation; as long as\n        // at least one claim object is included...is there any harm in throwing\n        // out the empties?\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "mbpr89edI9Bc-P0d7w7KC",
              "ctx": null,
              "_testId": "urn:uuid:2c03fba4-ac1c-4bc7-9c0f-1fcbb79bb92e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1120,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "mbpr89edI9Bc-P0d7w7KC",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i4ERJjnLR2omv-fn4EWcS",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:7a7c3473-f698-4e1b-9ae1-15b6a5e1d999"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')),\n        'Failed to rejet a VC without a `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "1U_66AIrLKb_O8kSUzFKU",
              "ctx": null,
              "_testId": "urn:uuid:b9db9c79-6b79-474c-8be7-fe6b48802cc7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        // TODO: reconsider whether an empty object is a violation; as long as\n        // at least one claim object is included...is there any harm in throwing\n        // out the empties?\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "1U_66AIrLKb_O8kSUzFKU",
              "ctx": null,
              "_testId": "urn:uuid:92325197-8bd0-44f6-b540-dd852e953dc2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 329,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1U_66AIrLKb_O8kSUzFKU",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i4ERJjnLR2omv-fn4EWcS",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:7028b32f-a9f0-488f-85d3-cfc2ac8b81bb"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')),\n        'Failed to rejet a VC without a `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "I-veWYKysKCGWrYh_6x6r",
              "ctx": null,
              "_testId": "urn:uuid:356c6f65-e722-4601-873b-e3aa7e6a1846",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 347,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        // TODO: reconsider whether an empty object is a violation; as long as\n        // at least one claim object is included...is there any harm in throwing\n        // out the empties?\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "I-veWYKysKCGWrYh_6x6r",
              "ctx": null,
              "_testId": "urn:uuid:68dd6195-3b06-4edb-a97c-f59e22bc3cbb",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50602,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 388,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "I-veWYKysKCGWrYh_6x6r",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i4ERJjnLR2omv-fn4EWcS",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:e3c211fa-c3f2-456e-9b3d-69dc0ee24ff5"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')),\n        'Failed to rejet a VC without a `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "HX3ZLKRfWzTlzdG2Urgy2",
              "ctx": null,
              "_testId": "urn:uuid:da6af898-f80f-4a43-9417-16f0b3c90f0a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        // TODO: reconsider whether an empty object is a violation; as long as\n        // at least one claim object is included...is there any harm in throwing\n        // out the empties?\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "HX3ZLKRfWzTlzdG2Urgy2",
              "ctx": null,
              "_testId": "urn:uuid:eaabd74a-68e8-4348-acf5-c05858060f56",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 282,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HX3ZLKRfWzTlzdG2Urgy2",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i4ERJjnLR2omv-fn4EWcS",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:3e190bcc-855d-4c5a-9bf1-9f88a180380c"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:34447733-8dd3-440d-8c8d-b4e1c3f8317f",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "A verifiable credential MUST have a credentialSubject property.",
          "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
          "cells": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')),\n        'Failed to rejet a VC without a `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "mbpr89edI9Bc-P0d7w7KC",
              "ctx": null,
              "_testId": "urn:uuid:bbd24e43-e3a5-44e1-80b5-f4e1b6f10bb8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 656,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')),\n        'Failed to rejet a VC without a `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "1U_66AIrLKb_O8kSUzFKU",
              "ctx": null,
              "_testId": "urn:uuid:b9db9c79-6b79-474c-8be7-fe6b48802cc7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')),\n        'Failed to rejet a VC without a `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "I-veWYKysKCGWrYh_6x6r",
              "ctx": null,
              "_testId": "urn:uuid:356c6f65-e722-4601-873b-e3aa7e6a1846",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 347,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have a credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-no-subject-fail.json')),\n        'Failed to rejet a VC without a `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "HX3ZLKRfWzTlzdG2Urgy2",
              "ctx": null,
              "_testId": "urn:uuid:da6af898-f80f-4a43-9417-16f0b3c90f0a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable credential MUST have a credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=A%20verifiable%20credential%20MUST%20have%20a%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
          "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        // TODO: reconsider whether an empty object is a violation; as long as\n        // at least one claim object is included...is there any harm in throwing\n        // out the empties?\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "mbpr89edI9Bc-P0d7w7KC",
              "ctx": null,
              "_testId": "urn:uuid:2c03fba4-ac1c-4bc7-9c0f-1fcbb79bb92e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1120,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        // TODO: reconsider whether an empty object is a violation; as long as\n        // at least one claim object is included...is there any harm in throwing\n        // out the empties?\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "1U_66AIrLKb_O8kSUzFKU",
              "ctx": null,
              "_testId": "urn:uuid:92325197-8bd0-44f6-b540-dd852e953dc2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 329,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        // TODO: reconsider whether an empty object is a violation; as long as\n        // at least one claim object is included...is there any harm in throwing\n        // out the empties?\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "I-veWYKysKCGWrYh_6x6r",
              "ctx": null,
              "_testId": "urn:uuid:68dd6195-3b06-4edb-a97c-f59e22bc3cbb",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50602,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 388,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-subject-no-claims-fail.json')),\n        'Failed to reject a VC with an empty `credentialSubject`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-subject-multiple-ok.json')),\n        'Failed to accept a VC with multiple `credentialSubject`s.');\n        // TODO: reconsider whether an empty object is a violation; as long as\n        // at least one claim object is included...is there any harm in throwing\n        // out the empties?\n        await assert.rejects(\n          endpoints.issue(require(\n            './input/credential-subject-multiple-empty-fail.json')),\n          'Failed to reject VC containing an empty `credentialSubject`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "HX3ZLKRfWzTlzdG2Urgy2",
              "ctx": null,
              "_testId": "urn:uuid:eaabd74a-68e8-4348-acf5-c05858060f56",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the credentialSubject property is defined as a set of objects where each object MUST be the subject of one or more claims, which MUST be serialized inside the credentialSubject property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#credential-subject:~:text=The%20value%20of%20the%20credentialSubject%20property%20is%20defined%20as%20a%20set%20of%20objects%20where%20each%20object%20MUST%20be%20the%20subject%20of%20one%20or%20more%20claims%2C%20which%20MUST%20be%20serialized%20inside%20the%20credentialSubject%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 282,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Issuer",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JnsI7SqBfI2Y6KoeddDvO",
              "ctx": null,
              "_testId": "urn:uuid:60aabeee-94ef-42b5-8bb9-51171916e67c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51365,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 322,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JnsI7SqBfI2Y6KoeddDvO",
              "ctx": null,
              "_testId": "urn:uuid:500f409d-d8a5-4d2f-b46c-89826ff07612",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 713,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "JnsI7SqBfI2Y6KoeddDvO",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0_oQksCvkVDYCx1WvERKa",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:a348cbb9-95d5-4f97-b40c-b781dd70a87d"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6AzcELNwXUT8TuI6Da6u7",
              "ctx": null,
              "_testId": "urn:uuid:24f1e930-bf77-490f-a583-885bb2a31b91",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6AzcELNwXUT8TuI6Da6u7",
              "ctx": null,
              "_testId": "urn:uuid:d16c0bba-9028-4c6c-85e8-971dcaeaecfd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 296,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6AzcELNwXUT8TuI6Da6u7",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0_oQksCvkVDYCx1WvERKa",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:79a5288c-8165-4c37-b4ac-28899b058091"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "v_7yYs1THafn3euyI8UVF",
              "ctx": null,
              "_testId": "urn:uuid:a1ea86fb-45d7-44cb-b01e-febabe1c2ecc",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "v_7yYs1THafn3euyI8UVF",
              "ctx": null,
              "_testId": "urn:uuid:adc95d2e-13ea-42cb-aa12-50809da2818a",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 365,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "v_7yYs1THafn3euyI8UVF",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0_oQksCvkVDYCx1WvERKa",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:fb004115-4980-4952-bc67-23225167ceaa"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-SM7P0lqBFCo_heRBi2dp",
              "ctx": null,
              "_testId": "urn:uuid:131373a3-3901-4cf4-b44c-cb7bc5f7d59e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-SM7P0lqBFCo_heRBi2dp",
              "ctx": null,
              "_testId": "urn:uuid:1a833442-831c-486a-91f2-211d8251c4ef",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-SM7P0lqBFCo_heRBi2dp",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0_oQksCvkVDYCx1WvERKa",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:5590f90a-f953-4398-a4d7-670763da17db"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:5ff8ec1f-7ea5-4835-a872-c03fb3e5b39c",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "A verifiable credential MUST have an issuer property.",
          "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
          "cells": [
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JnsI7SqBfI2Y6KoeddDvO",
              "ctx": null,
              "_testId": "urn:uuid:60aabeee-94ef-42b5-8bb9-51171916e67c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51365,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 322,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6AzcELNwXUT8TuI6Da6u7",
              "ctx": null,
              "_testId": "urn:uuid:24f1e930-bf77-490f-a583-885bb2a31b91",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "v_7yYs1THafn3euyI8UVF",
              "ctx": null,
              "_testId": "urn:uuid:a1ea86fb-45d7-44cb-b01e-febabe1c2ecc",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 117,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A verifiable credential MUST have an issuer property.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.`;\n          const vc = await endpoints.issue(\n            require('./input/credential-ok.json'));\n          vc.hasOwnProperty('issuer');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-SM7P0lqBFCo_heRBi2dp",
              "ctx": null,
              "_testId": "urn:uuid:131373a3-3901-4cf4-b44c-cb7bc5f7d59e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable credential MUST have an issuer property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=A%20verifiable%20credential%20MUST%20have%20an%20issuer%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53332,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
          "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "JnsI7SqBfI2Y6KoeddDvO",
              "ctx": null,
              "_testId": "urn:uuid:500f409d-d8a5-4d2f-b46c-89826ff07612",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 713,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6AzcELNwXUT8TuI6Da6u7",
              "ctx": null,
              "_testId": "urn:uuid:d16c0bba-9028-4c6c-85e8-971dcaeaecfd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 296,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "v_7yYs1THafn3euyI8UVF",
              "ctx": null,
              "_testId": "urn:uuid:adc95d2e-13ea-42cb-aa12-50809da2818a",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 365,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-issuer-object-ok.json')));\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-no-url-fail.json')),\n        'Failed to reject an issuer identifier that was not a URL.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-null-fail.json')),\n        'Failed to reject a null issuer identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-null-fail.json')),\n        'Failed to reject an issuer object containing a null identifier.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-issuer-object-id-no-url-fail.json')),\n        'Failed to reject an issuer object containing a non-URL identifier.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-SM7P0lqBFCo_heRBi2dp",
              "ctx": null,
              "_testId": "urn:uuid:1a833442-831c-486a-91f2-211d8251c4ef",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the issuer property MUST be either a URL, or an object containing an id property whose value is a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#issuer:~:text=The%20value%20of%20the%20issuer%20property%20MUST%20be%20either%20a%20URL%2C%20or%20an%20object%20containing%20an%20id%20property%20whose%20value%20is%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Validity Period",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "_testId": "urn:uuid:3650ee72-9415-47df-a262-7ef3b319a671",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 519,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "_testId": "urn:uuid:81df3559-e485-46d8-827d-975c6c02109b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"validFrom\":\"2023-02-26T01:19:19Z\",\"validUntil\":\"2023-02-26T01:19:20Z\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "validFrom": "2023-02-26T01:19:19Z",
                        "validUntil": "2023-02-26T01:19:20Z",
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/issue?suite=Ed25519Signature2020",
                  "status": 400,
                  "data": {
                    "id": "EXPIRED",
                    "message": "Expired"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.`'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "_testId": "urn:uuid:ab7c5903-22c6-4d91-8ddd-b8985e3f8ebd",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 282,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "_testId": "urn:uuid:5f366f91-79ef-4d35-8fb9-7ab9f98938ac",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 332,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SDLqP58XgkQ3hpT5k2XRy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:4c6958fb-4244-4e3a-9c2c-5ad477604c65"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "_testId": "urn:uuid:ae0f8e37-69b2-4d84-b654-fa521014571f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 498,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "_testId": "urn:uuid:3cd22ae2-fe16-4b82-97a8-38a110bfcf1e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 461,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.`'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "_testId": "urn:uuid:fb7dcdb4-dab6-4ce8-a947-a03c57ee8bd0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 668,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "_testId": "urn:uuid:e4b34e7e-90a8-4114-8d95-a5de6ecba293",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 339,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SDLqP58XgkQ3hpT5k2XRy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:93713d61-7ce9-4f58-8d37-dd0da7f8bf99"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "_testId": "urn:uuid:a22f2fe9-6941-42b1-be3f-96a2ac7df597",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 366,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "_testId": "urn:uuid:f49b3599-1ddf-4553-9ad0-716761c310e5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57322,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 381,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.`'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "_testId": "urn:uuid:648f4580-e840-4fbf-8d0e-74d61c7c7d4d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 289,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "_testId": "urn:uuid:d9765af8-9a35-47ef-be6d-ee4f98fa4cb5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SDLqP58XgkQ3hpT5k2XRy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:2ee82a72-100b-40d2-9ad5-efb51be4316c"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "_testId": "urn:uuid:e6a7de36-e28e-48de-8857-f0cbf1ec51ac",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 382,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "_testId": "urn:uuid:7445e0f4-51ef-471e-b6e4-6c709bb79408",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 381,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.`'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "_testId": "urn:uuid:517494c6-02b2-4511-8a8e-7e7950aa069e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59073,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 282,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "_testId": "urn:uuid:302a2ae9-9602-4101-b356-26816405a8f5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 279,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Time values that are incorrectly serialized without an offset MUST be interpreted as UTC.",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SDLqP58XgkQ3hpT5k2XRy",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:f9093109-4c96-4d89-bad9-92954203b961"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:82721812-a584-4c48-975a-6688d2ed5c2e",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "_testId": "urn:uuid:3650ee72-9415-47df-a262-7ef3b319a671",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 519,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "_testId": "urn:uuid:ae0f8e37-69b2-4d84-b654-fa521014571f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 498,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "_testId": "urn:uuid:a22f2fe9-6941-42b1-be3f-96a2ac7df597",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 366,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a valid `validFrom` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validfrom-invalid-fail.json')),\n        'Failed to reject a VC using an incorrect `validFrom` date-time ' +\n        'format.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validfrom-ms-ok.json')),\n        'Failed to accept a VC with a `validFrom` far into the future.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "_testId": "urn:uuid:e6a7de36-e28e-48de-8857-f0cbf1ec51ac",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the validFrom property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential becomes valid, which could be a date and time in the future or in the past."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validFrom%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20becomes%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20future%20or%20in%20the%20past.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 382,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
          "cells": [
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "_testId": "urn:uuid:81df3559-e485-46d8-827d-975c6c02109b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"validFrom\":\"2023-02-26T01:19:19Z\",\"validUntil\":\"2023-02-26T01:19:20Z\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "type": [
                          "VerifiableCredential"
                        ],
                        "validFrom": "2023-02-26T01:19:19Z",
                        "validUntil": "2023-02-26T01:19:20Z",
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/issue?suite=Ed25519Signature2020",
                  "status": 400,
                  "data": {
                    "id": "EXPIRED",
                    "message": "Expired"
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "_testId": "urn:uuid:3cd22ae2-fe16-4b82-97a8-38a110bfcf1e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 461,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "_testId": "urn:uuid:f49b3599-1ddf-4553-9ad0-716761c310e5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57322,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 381,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-validuntil-ok.json')),\n        'Failed to accept a VC with a valid `validUntil` date-time.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-ms-ok.json')),\n        'Failed to accept a VC using miliseconds in `validUntil`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-validuntil-tz-ok.json')),\n        'Failed to accept a VC using the subtractive timezone format.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-validuntil-invalid-fail.json')),\n        'Failed to reject a VC using an inccorect `validUntil` date-time ' +\n        'format.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "_testId": "urn:uuid:7445e0f4-51ef-471e-b6e4-6c709bb79408",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present, the value of the validUntil property MUST be an [XMLSCHEMA11-2] dateTimeStamp string value representing the date and time the credential ceases to be valid, which could be a date and time in the past or in the future."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20present%2C%20the%20value%20of%20the%20validUntil%20property%20MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%20value%20representing%20the%20date%20and%20time%20the%20credential%20ceases%20to%20be%20valid%2C%20which%20could%20be%20a%20date%20and%20time%20in%20the%20past%20or%20in%20the%20future",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 381,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
          "cells": [
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.`'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "_testId": "urn:uuid:ab7c5903-22c6-4d91-8ddd-b8985e3f8ebd",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 282,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.`'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "_testId": "urn:uuid:fb7dcdb4-dab6-4ce8-a947-a03c57ee8bd0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 668,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.`'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "_testId": "urn:uuid:648f4580-e840-4fbf-8d0e-74d61c7c7d4d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 289,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.`'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "_testId": "urn:uuid:517494c6-02b2-4511-8a8e-7e7950aa069e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a validUntil value also exists, the validFrom value MUST express a datetime that is temporally the same or earlier than the datetime expressed by the validUntil value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validUntil%20value%20also%20exists%2C%20the%20validFrom%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20earlier%20than%20the%20datetime%20expressed%20by%20the%20validUntil%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59073,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 282,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
          "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
          "cells": [
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6Icaar4iw6BQ0jQs6ySHS",
              "ctx": null,
              "_testId": "urn:uuid:5f366f91-79ef-4d35-8fb9-7ab9f98938ac",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 332,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "u6Ggs2Mc-fUuR-7WM6KRG",
              "ctx": null,
              "_testId": "urn:uuid:e4b34e7e-90a8-4114-8d95-a5de6ecba293",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56616,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 339,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "O14mjY3IeGe3MDhs6H4NH",
              "ctx": null,
              "_testId": "urn:uuid:d9765af8-9a35-47ef-be6d-ee4f98fa4cb5",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.`;\n        const positiveTest = require(\n          './input/credential-validUntil-validFrom-ok.json');\n        positiveTest.validFrom = createTimeStamp({skewYears: -1});\n        positiveTest.validUntil = createTimeStamp({skewYears: 1});\n        await assert.doesNotReject(endpoints.issue(positiveTest),\n          'Failed to accept a VC with a `validUntil` after its `validFrom`.');\n        const negativeTest = require(\n          './input/credential-validUntil-validFrom-fail.json');\n        negativeTest.validFrom = createTimeStamp({skewYears: 1});\n        negativeTest.validUntil = createTimeStamp({skewYears: -1});\n        await shouldRejectEitherIssueOrVerify({\n          endpoints,\n          negativeTest,\n          reason: 'Failed to reject a VC with a `validUntil` before its ' +\n          '`validFrom`.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Jy8ylqogV-z4v71k0kzyG",
              "ctx": null,
              "_testId": "urn:uuid:302a2ae9-9602-4101-b356-26816405a8f5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a validFrom value also exists, the validUntil value MUST express a datetime that is temporally the same or later than the datetime expressed by the validFrom value."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#validity-period:~:text=If%20a%20validFrom%20value%20also%20exists%2C%20the%20validUntil%20value%20MUST%20express%20a%20datetime%20that%20is%20temporally%20the%20same%20or%20later%20than%20the%20datetime%20expressed%20by%20the%20validFrom%20value.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 279,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Securing Mechanisms",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0,\n            'Expected at least one `proof`.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'Expected `proof` to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "TtgkBpdTnj5LMuwkl8CDc",
              "ctx": null,
              "_testId": "urn:uuid:df9b243d-1434-4316-83ce-19a16ff8dbfe",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // TODO: check \"all required properties\" (use a shared function)\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "TtgkBpdTnj5LMuwkl8CDc",
              "ctx": null,
              "_testId": "urn:uuid:b2b1059c-8c29-4739-aab9-793f2fd2d18e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n        // should reject a VC without a proof\n        // TODO: VCs are not required to have a `proof` for verification; they\n        // may be \"enveloped\" instead. Use test suite tags to determine? or\n        // should we check media types?\n        await assert.rejects(endpoints.verify(\n          require('./input/credential-ok.json')),\n        'Failed to reject a VC missing a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "TtgkBpdTnj5LMuwkl8CDc",
              "ctx": null,
              "_testId": "urn:uuid:6ed985d7-3c6b-4d40-b292-2a38a09c9419",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"VerifiableCredential\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-08-04T05:06:19Z\",\"proofValue\":\"z4kfFtd9zsDquWrqp3rZYKMCYqcDg9yrMMrBq43AZM5RcjGMf8cXkVygM2nWonV2z3aywroVjVh1Anb4UtWvkEyen\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "type": "VerifiableCredential",
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-08-04T05:06:19Z",
                          "proofValue": "z4kfFtd9zsDquWrqp3rZYKMCYqcDg9yrMMrBq43AZM5RcjGMf8cXkVygM2nWonV2z3aywroVjVh1Anb4UtWvkEyen"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "TtgkBpdTnj5LMuwkl8CDc",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "TtgkBpdTnj5LMuwkl8CDc",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59634,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 177,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eubzbWnrpidcqAoE5NM9l",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:9252fdd8-2efc-42c4-acaa-8b38ec1c0a47"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0,\n            'Expected at least one `proof`.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'Expected `proof` to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "PB9WC_jDxUw6PaPJvLvyV",
              "ctx": null,
              "_testId": "urn:uuid:af275370-3e6a-45ab-b7c0-ef23426153c7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // TODO: check \"all required properties\" (use a shared function)\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "PB9WC_jDxUw6PaPJvLvyV",
              "ctx": null,
              "_testId": "urn:uuid:1e01d145-248a-407d-bcac-e4e42fbad39a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n        // should reject a VC without a proof\n        // TODO: VCs are not required to have a `proof` for verification; they\n        // may be \"enveloped\" instead. Use test suite tags to determine? or\n        // should we check media types?\n        await assert.rejects(endpoints.verify(\n          require('./input/credential-ok.json')),\n        'Failed to reject a VC missing a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "PB9WC_jDxUw6PaPJvLvyV",
              "ctx": null,
              "_testId": "urn:uuid:61137c4c-753c-4510-aaa0-23d1639dfa67",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PB9WC_jDxUw6PaPJvLvyV",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PB9WC_jDxUw6PaPJvLvyV",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eubzbWnrpidcqAoE5NM9l",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:eeb5e387-6208-46a1-8517-88762727abf9"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0,\n            'Expected at least one `proof`.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'Expected `proof` to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zE7VJUdpuNghk2lVhm0Bi",
              "ctx": null,
              "_testId": "urn:uuid:6c118a72-a622-40a1-9623-be2aff7322e2",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60418,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // TODO: check \"all required properties\" (use a shared function)\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zE7VJUdpuNghk2lVhm0Bi",
              "ctx": null,
              "_testId": "urn:uuid:ec812a95-7501-4798-8667-9578316ed08e",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n        // should reject a VC without a proof\n        // TODO: VCs are not required to have a `proof` for verification; they\n        // may be \"enveloped\" instead. Use test suite tags to determine? or\n        // should we check media types?\n        await assert.rejects(endpoints.verify(\n          require('./input/credential-ok.json')),\n        'Failed to reject a VC missing a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zE7VJUdpuNghk2lVhm0Bi",
              "ctx": null,
              "_testId": "urn:uuid:23893021-7b65-4a4e-877a-6da88b028205",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 158,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zE7VJUdpuNghk2lVhm0Bi",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Open Security and Identity\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zE7VJUdpuNghk2lVhm0Bi",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60317,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eubzbWnrpidcqAoE5NM9l",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:6d9d7fa5-d4d9-4226-b60f-6c83a3344a2b"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0,\n            'Expected at least one `proof`.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'Expected `proof` to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Hci5MRSEDud6f9JDTQ1sa",
              "ctx": null,
              "_testId": "urn:uuid:73f19b4a-a4cf-4466-af48-9c22f02d28eb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // TODO: check \"all required properties\" (use a shared function)\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Hci5MRSEDud6f9JDTQ1sa",
              "ctx": null,
              "_testId": "urn:uuid:310e411a-3ac7-48d5-90cc-5cc9fa1a68b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n        // should reject a VC without a proof\n        // TODO: VCs are not required to have a `proof` for verification; they\n        // may be \"enveloped\" instead. Use test suite tags to determine? or\n        // should we check media types?\n        await assert.rejects(endpoints.verify(\n          require('./input/credential-ok.json')),\n        'Failed to reject a VC missing a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Hci5MRSEDud6f9JDTQ1sa",
              "ctx": null,
              "_testId": "urn:uuid:9b6d5ffd-56db-435c-b64f-50b5a2abae33",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 182,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Hci5MRSEDud6f9JDTQ1sa",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n        try {\n          issuedVc = await endpoints.issue(require(\n            './input/credential-ok.json'));\n        } catch(e) {\n          console.error(\n            `Issuer: ${name} failed to issue \"credential-ok.json\".`,\n            e\n          );\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Hci5MRSEDud6f9JDTQ1sa",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "eubzbWnrpidcqAoE5NM9l",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:73f0d9aa-fafa-465c-97fe-54582f547f9a"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:ecb964c1-f704-44bc-b6cf-f050916b7e1c",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
          "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0,\n            'Expected at least one `proof`.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'Expected `proof` to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "TtgkBpdTnj5LMuwkl8CDc",
              "ctx": null,
              "_testId": "urn:uuid:df9b243d-1434-4316-83ce-19a16ff8dbfe",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0,\n            'Expected at least one `proof`.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'Expected `proof` to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "PB9WC_jDxUw6PaPJvLvyV",
              "ctx": null,
              "_testId": "urn:uuid:af275370-3e6a-45ab-b7c0-ef23426153c7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0,\n            'Expected at least one `proof`.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'Expected `proof` to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zE7VJUdpuNghk2lVhm0Bi",
              "ctx": null,
              "_testId": "urn:uuid:6c118a72-a622-40a1-9623-be2aff7322e2",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60418,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // embedded proof test\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        if(Array.isArray(issuedVc.proof)) {\n          issuedVc.proof.length.should.be.gt(0,\n            'Expected at least one `proof`.');\n          issuedVc.proof.every(p => typeof p === 'object').should.be.true;\n        } else {\n          issuedVc.proof.should.be.an(\n            'object',\n            'Expected `proof` to be an object.'\n          );\n        }\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Hci5MRSEDud6f9JDTQ1sa",
              "ctx": null,
              "_testId": "urn:uuid:73f19b4a-a4cf-4466-af48-9c22f02d28eb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming document MUST be secured by at least one securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20document%20MUST%20be%20secured%20by%20at%20least%20one%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
          "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // TODO: check \"all required properties\" (use a shared function)\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "TtgkBpdTnj5LMuwkl8CDc",
              "ctx": null,
              "_testId": "urn:uuid:b2b1059c-8c29-4739-aab9-793f2fd2d18e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // TODO: check \"all required properties\" (use a shared function)\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "PB9WC_jDxUw6PaPJvLvyV",
              "ctx": null,
              "_testId": "urn:uuid:1e01d145-248a-407d-bcac-e4e42fbad39a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // TODO: check \"all required properties\" (use a shared function)\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zE7VJUdpuNghk2lVhm0Bi",
              "ctx": null,
              "_testId": "urn:uuid:ec812a95-7501-4798-8667-9578316ed08e",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.`;\n        // TODO: check \"all required properties\" (use a shared function)\n        issuedVc.should.have.property('type').that.does\n          .include('VerifiableCredential', `Expected ${name} to issue a VC.`);\n        issuedVc.should.have.property('proof').which.is.not.a('string',\n          'Expected VC to have a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Hci5MRSEDud6f9JDTQ1sa",
              "ctx": null,
              "_testId": "urn:uuid:310e411a-3ac7-48d5-90cc-5cc9fa1a68b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming issuer implementation produces conforming documents, MUST include all required properties in the conforming documents that it produces, and MUST secure the conforming documents it produces using a securing mechanism as described in Section 4.9 Securing Mechanisms."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20issuer%20implementation%20produces%20conforming%20documents%2C%20MUST%20include%20all%20required%20properties%20in%20the%20conforming%20documents%20that%20it%20produces%2C%20and%20MUST%20secure%20the%20conforming%20documents%20it%20produces%20using%20a%20securing%20mechanism%20as%20described%20in%20Section%204.9%20Securing%20Mechanisms.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
          "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
          "cells": [
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n        // should reject a VC without a proof\n        // TODO: VCs are not required to have a `proof` for verification; they\n        // may be \"enveloped\" instead. Use test suite tags to determine? or\n        // should we check media types?\n        await assert.rejects(endpoints.verify(\n          require('./input/credential-ok.json')),\n        'Failed to reject a VC missing a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "TtgkBpdTnj5LMuwkl8CDc",
              "ctx": null,
              "_testId": "urn:uuid:6ed985d7-3c6b-4d40-b292-2a38a09c9419",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"VerifiableCredential\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-08-04T05:06:19Z\",\"proofValue\":\"z4kfFtd9zsDquWrqp3rZYKMCYqcDg9yrMMrBq43AZM5RcjGMf8cXkVygM2nWonV2z3aywroVjVh1Anb4UtWvkEyen\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "type": "VerifiableCredential",
                        "credentialSubject": {
                          "id": "did:example:subject"
                        },
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-08-04T05:06:19Z",
                          "proofValue": "z4kfFtd9zsDquWrqp3rZYKMCYqcDg9yrMMrBq43AZM5RcjGMf8cXkVygM2nWonV2z3aywroVjVh1Anb4UtWvkEyen"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "doesNotReject"
              }
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n        // should reject a VC without a proof\n        // TODO: VCs are not required to have a `proof` for verification; they\n        // may be \"enveloped\" instead. Use test suite tags to determine? or\n        // should we check media types?\n        await assert.rejects(endpoints.verify(\n          require('./input/credential-ok.json')),\n        'Failed to reject a VC missing a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "PB9WC_jDxUw6PaPJvLvyV",
              "ctx": null,
              "_testId": "urn:uuid:61137c4c-753c-4510-aaa0-23d1639dfa67",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60030,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n        // should reject a VC without a proof\n        // TODO: VCs are not required to have a `proof` for verification; they\n        // may be \"enveloped\" instead. Use test suite tags to determine? or\n        // should we check media types?\n        await assert.rejects(endpoints.verify(\n          require('./input/credential-ok.json')),\n        'Failed to reject a VC missing a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zE7VJUdpuNghk2lVhm0Bi",
              "ctx": null,
              "_testId": "urn:uuid:23893021-7b65-4a4e-877a-6da88b028205",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 158,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.`;\n        await assert.doesNotReject(endpoints.verify(issuedVc),\n          'Failed to verify credential.');\n        // should reject a VC without a proof\n        // TODO: VCs are not required to have a `proof` for verification; they\n        // may be \"enveloped\" instead. Use test suite tags to determine? or\n        // should we check media types?\n        await assert.rejects(endpoints.verify(\n          require('./input/credential-ok.json')),\n        'Failed to reject a VC missing a `proof`.');\n        // TODO: add enveloped proof test\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Hci5MRSEDud6f9JDTQ1sa",
              "ctx": null,
              "_testId": "urn:uuid:9b6d5ffd-56db-435c-b64f-50b5a2abae33",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A conforming verifier implementation consumes conforming documents, MUST perform verification on a conforming document as described in Section 4.9 Securing Mechanisms, MUST check that each required property satisfies the normative requirements for that property, and MUST produce errors when non-conforming documents are detected."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#securing-mechanisms:~:text=A%20conforming%20verifier,documents%20are%20detected.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 182,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Status",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Rjnu5HdeK0e7crIfSCfZz",
              "ctx": null,
              "_testId": "urn:uuid:9a74e709-473d-44b3-9b83-b09c86fd7ac2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 330,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Rjnu5HdeK0e7crIfSCfZz",
              "ctx": null,
              "_testId": "urn:uuid:978de043-ac45-4d9f-856d-4b1720774853",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Status schemes MUST NOT be implemented in ways that enable tracking of individuals",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Rjnu5HdeK0e7crIfSCfZz",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Rjnu5HdeK0e7crIfSCfZz",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "NPEhEszQRE3tDdi5WNBGU",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:dc3a7f66-6d0b-467d-bc6e-aab09e985fa3"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "rQ4JunBnlsuI7bdcivwTt",
              "ctx": null,
              "_testId": "urn:uuid:5ad058fe-1703-4db2-920b-c1234f4302c9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 656,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "rQ4JunBnlsuI7bdcivwTt",
              "ctx": null,
              "_testId": "urn:uuid:2c42ee82-b205-47d5-9dd3-aa465421b37d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61957,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Status schemes MUST NOT be implemented in ways that enable tracking of individuals",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "rQ4JunBnlsuI7bdcivwTt",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "rQ4JunBnlsuI7bdcivwTt",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "NPEhEszQRE3tDdi5WNBGU",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:968113c2-e40d-4fdb-82cd-0022b42c662c"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6RqC57QdIDhh_w-sMCgXD",
              "ctx": null,
              "_testId": "urn:uuid:1f058cc0-0302-4603-9d89-1c1502c55cb8",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62348,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 254,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6RqC57QdIDhh_w-sMCgXD",
              "ctx": null,
              "_testId": "urn:uuid:8a3e77cc-df2b-4610-9049-f30ad9d651ad",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62602,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Status schemes MUST NOT be implemented in ways that enable tracking of individuals",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6RqC57QdIDhh_w-sMCgXD",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6RqC57QdIDhh_w-sMCgXD",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "NPEhEszQRE3tDdi5WNBGU",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:d15990d3-b0e3-4a6b-ba7c-babd729d9bed"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2DIkdiY75oLprfV_SVPOH",
              "ctx": null,
              "_testId": "urn:uuid:a35f005a-f324-45ad-98ed-e7e2f7b4a7b6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 276,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2DIkdiY75oLprfV_SVPOH",
              "ctx": null,
              "_testId": "urn:uuid:b4ba7a83-49b8-4bff-8a1f-1c77b4abad96",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63073,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Status schemes MUST NOT be implemented in ways that enable tracking of individuals",
              "body": "",
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2DIkdiY75oLprfV_SVPOH",
              "ctx": null,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2DIkdiY75oLprfV_SVPOH",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "NPEhEszQRE3tDdi5WNBGU",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:d818229d-aad0-4eef-9263-0d70d0ab6376"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:47c9ffa9-2ffe-4f82-a200-3c8fb9f4db9f",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
          "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
          "cells": [
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Rjnu5HdeK0e7crIfSCfZz",
              "ctx": null,
              "_testId": "urn:uuid:9a74e709-473d-44b3-9b83-b09c86fd7ac2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 330,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "rQ4JunBnlsuI7bdcivwTt",
              "ctx": null,
              "_testId": "urn:uuid:5ad058fe-1703-4db2-920b-c1234f4302c9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 656,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6RqC57QdIDhh_w-sMCgXD",
              "ctx": null,
              "_testId": "urn:uuid:1f058cc0-0302-4603-9d89-1c1502c55cb8",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62348,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 254,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // id is optional\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-missing-id-ok.json')),\n        'Failed to accept a VC with `credentialStatus` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-multiple-id-fail.json')),\n        'Failed to reject a VC with multiple `credentialStatus.id` values.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-nonurl-id-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2DIkdiY75oLprfV_SVPOH",
              "ctx": null,
              "_testId": "urn:uuid:a35f005a-f324-45ad-98ed-e7e2f7b4a7b6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (credentialStatus.id), the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=credential%20status%20object.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 276,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
          "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
          "cells": [
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Rjnu5HdeK0e7crIfSCfZz",
              "ctx": null,
              "_testId": "urn:uuid:978de043-ac45-4d9f-856d-4b1720774853",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "rQ4JunBnlsuI7bdcivwTt",
              "ctx": null,
              "_testId": "urn:uuid:2c42ee82-b205-47d5-9dd3-aa465421b37d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61957,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 390,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "6RqC57QdIDhh_w-sMCgXD",
              "ctx": null,
              "_testId": "urn:uuid:8a3e77cc-df2b-4610-9049-f30ad9d651ad",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62602,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-missing-type-fail.json')),\n        'Failed to reject a VC missing `credentialStatus.type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-status-type-nonurl-fail.json')),\n        'Failed to reject a VC with a non-URL `credentialStatus.type`.');\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-status-ok.json')),\n        'Failed to accept a VC with a valid `credentialStatus`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "2DIkdiY75oLprfV_SVPOH",
              "ctx": null,
              "_testId": "urn:uuid:b4ba7a83-49b8-4bff-8a1f-1c77b4abad96",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(If a credentialStatus property is present), The type property is REQUIRED. It is used to express the type of status information expressed by the object. The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#status:~:text=The%20type%20property%20is%20REQUIRED.%20It%20is%20used%20to%20express%20the%20type%20of%20status%20information%20expressed%20by%20the%20object.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63073,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 273,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Verifiable Presentations",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4skQcHge1b44ddCWJDw3E",
              "ctx": null,
              "_testId": "urn:uuid:803ad299-2509-416a-88b9-7d05db35304d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63346,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4skQcHge1b44ddCWJDw3E",
              "ctx": null,
              "_testId": "urn:uuid:99eb961b-33c2-4217-960f-2b5c61f9af6f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63346,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')),\n        'Failed to reject a derived VP with a missing `type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4skQcHge1b44ddCWJDw3E",
              "ctx": null,
              "_testId": "urn:uuid:3b1a5dab-8c44-4b2b-859c-701a49c5e6ed",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63346,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:06:23Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3NCoHDpK7t6ASgZz9aTbDm6a8Y5D9SpwrGB9SGxLujU4tT9sPdZr8DFSADm7PcCg7WNFvDgiVocgQz6WqwzG3vvm\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:06:23Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\",\"proofValue\":\"z23FYMdUyszWT4wswMozQs1yCkiJ8aXzXUURL6ZuiQr59U9CjTDRrm2EbutKkj2Srohxj2sVh9W2RvxqJoDwQVTX4\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\"}}",
                  "method": "POST",
                  "json": {
                    "verifiablePresentation": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiablePresentation"
                      ],
                      "verifiableCredential": [
                        {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "type": [
                            "VerifiableCredential"
                          ],
                          "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "credentialSubject": {
                            "id": "did:example:subject"
                          },
                          "proof": {
                            "type": "DataIntegrityProof",
                            "created": "2024-08-04T05:06:23Z",
                            "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "cryptosuite": "eddsa-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z3NCoHDpK7t6ASgZz9aTbDm6a8Y5D9SpwrGB9SGxLujU4tT9sPdZr8DFSADm7PcCg7WNFvDgiVocgQz6WqwzG3vvm"
                          }
                        }
                      ],
                      "proof": {
                        "type": "DataIntegrityProof",
                        "created": "2024-08-04T05:06:23Z",
                        "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                        "cryptosuite": "eddsa-2022",
                        "proofPurpose": "authentication",
                        "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ",
                        "proofValue": "z23FYMdUyszWT4wswMozQs1yCkiJ8aXzXUURL6ZuiQr59U9CjTDRrm2EbutKkj2Srohxj2sVh9W2RvxqJoDwQVTX4"
                      }
                    },
                    "options": {
                      "checks": [
                        "proof"
                      ],
                      "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                "status": 400,
                "data": {
                  "checks": [
                    "PROOF",
                    "INVALID_PROOF_CONFIGURATION"
                  ],
                  "warnings": [],
                  "errors": []
                }
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4skQcHge1b44ddCWJDw3E",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "StqY1fg-3hdXcBqQiuAEl",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:ee2b69b3-18de-4a31-bf4b-57269135c3a3"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-QgN7Gp-hgqzPOocWRwOS",
              "ctx": null,
              "_testId": "urn:uuid:3451cdf5-5931-4f6f-8e6b-8e91c083e670",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-QgN7Gp-hgqzPOocWRwOS",
              "ctx": null,
              "_testId": "urn:uuid:33603fe3-7839-4bc1-9f1b-fa88608651a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')),\n        'Failed to reject a derived VP with a missing `type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-QgN7Gp-hgqzPOocWRwOS",
              "ctx": null,
              "_testId": "urn:uuid:97edbcb0-b153-436d-bd95-af5c190921fb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 413,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "-QgN7Gp-hgqzPOocWRwOS",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "StqY1fg-3hdXcBqQiuAEl",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:af581fc5-7c07-42da-819e-7a1de460fda6"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "n6VXXENkR1P_Owqq_dItH",
              "ctx": null,
              "_testId": "urn:uuid:5023a429-85ff-4075-b515-22b2237cb240",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "n6VXXENkR1P_Owqq_dItH",
              "ctx": null,
              "_testId": "urn:uuid:b6e8cd00-3e1e-41cc-89e7-7a35ace2d41d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')),\n        'Failed to reject a derived VP with a missing `type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "n6VXXENkR1P_Owqq_dItH",
              "ctx": null,
              "_testId": "urn:uuid:67037bbe-651b-4e2f-b001-8539433509b3",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:06:23Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3NCoHDpK7t6ASgZz9aTbDm6a8Y5D9SpwrGB9SGxLujU4tT9sPdZr8DFSADm7PcCg7WNFvDgiVocgQz6WqwzG3vvm\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:06:24Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\",\"proofValue\":\"z49SRTX6fhm2C8FTpzqTzWGjESZKZJhyqj5ugxRbbUF5opTfbRuozbcrvGEQzHcX3YpLDD5YprndPuv2zGzuoFN6\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\"}}",
                  "method": "POST",
                  "json": {
                    "verifiablePresentation": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiablePresentation"
                      ],
                      "verifiableCredential": [
                        {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "type": [
                            "VerifiableCredential"
                          ],
                          "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "credentialSubject": {
                            "id": "did:example:subject"
                          },
                          "proof": {
                            "type": "DataIntegrityProof",
                            "created": "2024-08-04T05:06:23Z",
                            "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "cryptosuite": "eddsa-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z3NCoHDpK7t6ASgZz9aTbDm6a8Y5D9SpwrGB9SGxLujU4tT9sPdZr8DFSADm7PcCg7WNFvDgiVocgQz6WqwzG3vvm"
                          }
                        }
                      ],
                      "proof": {
                        "type": "DataIntegrityProof",
                        "created": "2024-08-04T05:06:24Z",
                        "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                        "cryptosuite": "eddsa-2022",
                        "proofPurpose": "authentication",
                        "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ",
                        "proofValue": "z49SRTX6fhm2C8FTpzqTzWGjESZKZJhyqj5ugxRbbUF5opTfbRuozbcrvGEQzHcX3YpLDD5YprndPuv2zGzuoFN6"
                      }
                    },
                    "options": {
                      "checks": [
                        "proof"
                      ],
                      "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://agent.opsec.id/vc/presentations/verify",
                "status": 500
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "n6VXXENkR1P_Owqq_dItH",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "StqY1fg-3hdXcBqQiuAEl",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:5948f2f1-ae6c-40d3-9da8-088707c36eb6"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "fjeZkCI7nCmOjoVrlniAH",
              "ctx": null,
              "_testId": "urn:uuid:b2ef9232-f662-4457-92d1-230db27bea4c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "fjeZkCI7nCmOjoVrlniAH",
              "ctx": null,
              "_testId": "urn:uuid:1860efa0-9573-4fad-bf22-1387390d6f20",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')),\n        'Failed to reject a derived VP with a missing `type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "fjeZkCI7nCmOjoVrlniAH",
              "ctx": null,
              "_testId": "urn:uuid:4c4303ae-883b-434e-82c7-8e6b72d3ccb1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 376,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fjeZkCI7nCmOjoVrlniAH",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "StqY1fg-3hdXcBqQiuAEl",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:926808db-1ac9-48d5-80e8-3f24e0e61d88"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:71b5a202-2c1b-4680-ae14-d1008a685079",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
          "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
          "cells": [
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4skQcHge1b44ddCWJDw3E",
              "ctx": null,
              "_testId": "urn:uuid:803ad299-2509-416a-88b9-7d05db35304d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63346,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-QgN7Gp-hgqzPOocWRwOS",
              "ctx": null,
              "_testId": "urn:uuid:3451cdf5-5931-4f6f-8e6b-8e91c083e670",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "n6VXXENkR1P_Owqq_dItH",
              "ctx": null,
              "_testId": "urn:uuid:5023a429-85ff-4075-b515-22b2237cb240",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "fjeZkCI7nCmOjoVrlniAH",
              "ctx": null,
              "_testId": "urn:uuid:b2ef9232-f662-4457-92d1-230db27bea4c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If [the `id` field is] present, the normative guidance in Section 4.3 Identifiers MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=verifiable%20presentation.-,If%20present%2C%20the%20normative%20guidance%20in%20Section%204.3%20Identifiers%20MUST%20be%20followed.,-type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        },
        {
          "id": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
          "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4skQcHge1b44ddCWJDw3E",
              "ctx": null,
              "_testId": "urn:uuid:99eb961b-33c2-4217-960f-2b5c61f9af6f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63346,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-QgN7Gp-hgqzPOocWRwOS",
              "ctx": null,
              "_testId": "urn:uuid:33603fe3-7839-4bc1-9f1b-fa88608651a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "n6VXXENkR1P_Owqq_dItH",
              "ctx": null,
              "_testId": "urn:uuid:b6e8cd00-3e1e-41cc-89e7-7a35ace2d41d",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "fjeZkCI7nCmOjoVrlniAH",
              "ctx": null,
              "_testId": "urn:uuid:1860efa0-9573-4fad-bf22-1387390d6f20",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST be present. One value of this property MUST be VerifiablePresentation, but additional types MAY be included.The related normative guidance in Section 4.4 Types MUST be followed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20type%20property%20MUST%20be%20present.%20It%20is%20used%20to%20express%20the%20type%20of%20verifiable%20presentation.%20One%20value%20of%20this%20property%20MUST%20be%20VerifiablePresentation%2C%20but%20additional%20types%20MAY%20be%20included.%20The%20related%20normative%20guidance%20in%20Section%204.4%20Types%20MUST%20be%20followed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        },
        {
          "id": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
          "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
          "cells": [
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')),\n        'Failed to reject a derived VP with a missing `type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "4skQcHge1b44ddCWJDw3E",
              "ctx": null,
              "_testId": "urn:uuid:3b1a5dab-8c44-4b2b-859c-701a49c5e6ed",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63346,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:06:23Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3NCoHDpK7t6ASgZz9aTbDm6a8Y5D9SpwrGB9SGxLujU4tT9sPdZr8DFSADm7PcCg7WNFvDgiVocgQz6WqwzG3vvm\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:06:23Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\",\"proofValue\":\"z23FYMdUyszWT4wswMozQs1yCkiJ8aXzXUURL6ZuiQr59U9CjTDRrm2EbutKkj2Srohxj2sVh9W2RvxqJoDwQVTX4\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\"}}",
                  "method": "POST",
                  "json": {
                    "verifiablePresentation": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiablePresentation"
                      ],
                      "verifiableCredential": [
                        {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "type": [
                            "VerifiableCredential"
                          ],
                          "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "credentialSubject": {
                            "id": "did:example:subject"
                          },
                          "proof": {
                            "type": "DataIntegrityProof",
                            "created": "2024-08-04T05:06:23Z",
                            "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "cryptosuite": "eddsa-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z3NCoHDpK7t6ASgZz9aTbDm6a8Y5D9SpwrGB9SGxLujU4tT9sPdZr8DFSADm7PcCg7WNFvDgiVocgQz6WqwzG3vvm"
                          }
                        }
                      ],
                      "proof": {
                        "type": "DataIntegrityProof",
                        "created": "2024-08-04T05:06:23Z",
                        "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                        "cryptosuite": "eddsa-2022",
                        "proofPurpose": "authentication",
                        "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ",
                        "proofValue": "z23FYMdUyszWT4wswMozQs1yCkiJ8aXzXUURL6ZuiQr59U9CjTDRrm2EbutKkj2Srohxj2sVh9W2RvxqJoDwQVTX4"
                      }
                    },
                    "options": {
                      "checks": [
                        "proof"
                      ],
                      "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.apicatalog.com/presentations/verify",
                "status": 400,
                "data": {
                  "checks": [
                    "PROOF",
                    "INVALID_PROOF_CONFIGURATION"
                  ],
                  "warnings": [],
                  "errors": []
                }
              }
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')),\n        'Failed to reject a derived VP with a missing `type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "-QgN7Gp-hgqzPOocWRwOS",
              "ctx": null,
              "_testId": "urn:uuid:97edbcb0-b153-436d-bd95-af5c190921fb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 413,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')),\n        'Failed to reject a derived VP with a missing `type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "n6VXXENkR1P_Owqq_dItH",
              "ctx": null,
              "_testId": "urn:uuid:67037bbe-651b-4e2f-b001-8539433509b3",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"verifiablePresentation\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiablePresentation\"],\"verifiableCredential\":[{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"credentialSubject\":{\"id\":\"did:example:subject\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:06:23Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3NCoHDpK7t6ASgZz9aTbDm6a8Y5D9SpwrGB9SGxLujU4tT9sPdZr8DFSADm7PcCg7WNFvDgiVocgQz6WqwzG3vvm\"}}],\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-04T05:06:24Z\",\"verificationMethod\":\"did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj\",\"cryptosuite\":\"eddsa-2022\",\"proofPurpose\":\"authentication\",\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\",\"proofValue\":\"z49SRTX6fhm2C8FTpzqTzWGjESZKZJhyqj5ugxRbbUF5opTfbRuozbcrvGEQzHcX3YpLDD5YprndPuv2zGzuoFN6\"}},\"options\":{\"checks\":[\"proof\"],\"challenge\":\"uKL7KC3tfCGGGGyeHhQgHtQ\"}}",
                  "method": "POST",
                  "json": {
                    "verifiablePresentation": {
                      "@context": [
                        "https://www.w3.org/ns/credentials/v2"
                      ],
                      "type": [
                        "VerifiablePresentation"
                      ],
                      "verifiableCredential": [
                        {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "type": [
                            "VerifiableCredential"
                          ],
                          "issuer": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                          "credentialSubject": {
                            "id": "did:example:subject"
                          },
                          "proof": {
                            "type": "DataIntegrityProof",
                            "created": "2024-08-04T05:06:23Z",
                            "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                            "cryptosuite": "eddsa-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z3NCoHDpK7t6ASgZz9aTbDm6a8Y5D9SpwrGB9SGxLujU4tT9sPdZr8DFSADm7PcCg7WNFvDgiVocgQz6WqwzG3vvm"
                          }
                        }
                      ],
                      "proof": {
                        "type": "DataIntegrityProof",
                        "created": "2024-08-04T05:06:24Z",
                        "verificationMethod": "did:key:z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj#z6MkpJySvETLnxhQG9DzEdmKJtysBDjuuTeDfUj1uNNCUqcj",
                        "cryptosuite": "eddsa-2022",
                        "proofPurpose": "authentication",
                        "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ",
                        "proofValue": "z49SRTX6fhm2C8FTpzqTzWGjESZKZJhyqj5ugxRbbUF5opTfbRuozbcrvGEQzHcX3YpLDD5YprndPuv2zGzuoFN6"
                      }
                    },
                    "options": {
                      "checks": [
                        "proof"
                      ],
                      "challenge": "uKL7KC3tfCGGGGyeHhQgHtQ"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://agent.opsec.id/vc/presentations/verify",
                "status": 500
              }
            },
            {
              "type": "test",
              "title": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).`;\n        //FIXME remove the internal prove once VC-API presentation\n        //creation is stabilized\n        const presentationWithCredential = await endpoints.createVp({\n          presentation: require('./input/presentation-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredential,\n          verifyPresentationOptions\n        );\n        // FIXME support for derived VCs is not standard yet\n        // and probably will be its own test suite\n        //await endpoints.verifyVp(require(\n        //  './input/presentation-derived-vc-ok.json'));\n\n        // FIXME remove internal prove once VC-API presentation\n        // creation is finalized\n        const presentationWithCredentials = await endpoints.createVp({\n          presentation: require('./input/presentation-multiple-vc-ok.json'),\n          options: createOptions\n        });\n        await endpoints.verifyVp(\n          presentationWithCredentials,\n          verifyPresentationOptions\n        );\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-vc-missing-required-type-fail.json')),\n        'Failed to reject a VP containing a VC with no `type` value.');\n        await assert.rejects(endpoints.verifyVp(require(\n          './input/presentation-derived-vc-missing-required-type-fail.json')),\n        'Failed to reject a derived VP with a missing `type`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "fjeZkCI7nCmOjoVrlniAH",
              "ctx": null,
              "_testId": "urn:uuid:4c4303ae-883b-434e-82c7-8e6b72d3ccb1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The verifiableCredential property MAY be present. The value MUST be one or more verifiable credential and/or enveloped verifiable credential objects (to be clear, the values MUST NOT be non-object values such as numbers, strings, or URLs)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#verifiable-credentials:~:text=The%20verifiableCredential%20property%20MAY%20be%20present.%20The%20value%20MUST%20be%20one%20or%20more%20verifiable%20credential%20and/or%20enveloped%20verifiable%20credential%20objects%20(to%20be%20clear%2C%20the%20values%20MUST%20NOT%20be%20non%2Dobject%20values%20such%20as%20numbers%2C%20strings%2C%20or%20URLs).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 376,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "VP - Enveloped Verifiable Credentials",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "STYkUr3kZv0Gd5mRuTSWT",
              "ctx": null,
              "_testId": "urn:uuid:04c70bb7-bafa-42c6-a72b-70dd97512263",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "STYkUr3kZv0Gd5mRuTSWT",
              "ctx": null,
              "_testId": "urn:uuid:46fe8bf3-5909-46a8-ab81-e6e51b3044a2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          // TODO: implement test\n          this.skip();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "STYkUr3kZv0Gd5mRuTSWT",
              "ctx": null,
              "_testId": "urn:uuid:7a76eeb2-3166-4db2-b923-c7319358ae28",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "STYkUr3kZv0Gd5mRuTSWT",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DLFGEOVY942aGXuyW5OYo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:13b2dc0f-8b1d-455c-a1b9-1ac32158f995"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CkoeJfKAljgDOc75zDhTq",
              "ctx": null,
              "_testId": "urn:uuid:7f0de7da-a642-410a-b57b-9858c6c42d57",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CkoeJfKAljgDOc75zDhTq",
              "ctx": null,
              "_testId": "urn:uuid:87723e34-74df-471b-8c8b-4d2c75896350",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          // TODO: implement test\n          this.skip();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CkoeJfKAljgDOc75zDhTq",
              "ctx": null,
              "_testId": "urn:uuid:6433f7e7-fa48-45e7-800b-afcf7496d050",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CkoeJfKAljgDOc75zDhTq",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DLFGEOVY942aGXuyW5OYo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:63b43f64-a024-48c1-90f8-061c42207417"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "aqW1arv6k7QtBaoitRhOL",
              "ctx": null,
              "_testId": "urn:uuid:95d59e8c-e1b4-4840-be58-3aedd2cc8690",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "aqW1arv6k7QtBaoitRhOL",
              "ctx": null,
              "_testId": "urn:uuid:1d28c5a4-3c2c-4c31-afd3-04fa23ad0056",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          // TODO: implement test\n          this.skip();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "aqW1arv6k7QtBaoitRhOL",
              "ctx": null,
              "_testId": "urn:uuid:7a58aef4-707e-4a30-953b-594001879bff",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aqW1arv6k7QtBaoitRhOL",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DLFGEOVY942aGXuyW5OYo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:3daf5e02-ab07-48ce-aadd-f2abcaab84d6"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MNUbUL51az1NvGz9ZLkAO",
              "ctx": null,
              "_testId": "urn:uuid:afecb570-c947-42f2-b3bb-bd83999794c4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MNUbUL51az1NvGz9ZLkAO",
              "ctx": null,
              "_testId": "urn:uuid:de474337-c443-41b7-82a5-ce085201f795",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          // TODO: implement test\n          this.skip();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MNUbUL51az1NvGz9ZLkAO",
              "ctx": null,
              "_testId": "urn:uuid:d94fadc6-d2cb-462d-b8a1-ea3ae934cc6c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MNUbUL51az1NvGz9ZLkAO",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DLFGEOVY942aGXuyW5OYo",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:57eb073b-b7e3-47fc-b52d-09776894258f"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:7242855d-ea18-44c4-a445-ee49083654df",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
          "cells": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "STYkUr3kZv0Gd5mRuTSWT",
              "ctx": null,
              "_testId": "urn:uuid:04c70bb7-bafa-42c6-a72b-70dd97512263",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CkoeJfKAljgDOc75zDhTq",
              "ctx": null,
              "_testId": "urn:uuid:7f0de7da-a642-410a-b57b-9858c6c42d57",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "aqW1arv6k7QtBaoitRhOL",
              "ctx": null,
              "_testId": "urn:uuid:95d59e8c-e1b4-4840-be58-3aedd2cc8690",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MNUbUL51az1NvGz9ZLkAO",
              "ctx": null,
              "_testId": "urn:uuid:afecb570-c947-42f2-b3bb-bd83999794c4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiableCredential terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiableCredential%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        },
        {
          "id": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
          "cells": [
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "STYkUr3kZv0Gd5mRuTSWT",
              "ctx": null,
              "_testId": "urn:uuid:46fe8bf3-5909-46a8-ab81-e6e51b3044a2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CkoeJfKAljgDOc75zDhTq",
              "ctx": null,
              "_testId": "urn:uuid:87723e34-74df-471b-8c8b-4d2c75896350",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "aqW1arv6k7QtBaoitRhOL",
              "ctx": null,
              "_testId": "urn:uuid:1d28c5a4-3c2c-4c31-afd3-04fa23ad0056",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MNUbUL51az1NvGz9ZLkAO",
              "ctx": null,
              "_testId": "urn:uuid:de474337-c443-41b7-82a5-ce085201f795",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20credential%20using%20an%20enveloping%20security%20scheme%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        },
        {
          "id": "The type value of the object MUST be EnvelopedVerifiableCredential.",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
          "cells": [
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          // TODO: implement test\n          this.skip();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "STYkUr3kZv0Gd5mRuTSWT",
              "ctx": null,
              "_testId": "urn:uuid:7a76eeb2-3166-4db2-b923-c7319358ae28",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          // TODO: implement test\n          this.skip();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "CkoeJfKAljgDOc75zDhTq",
              "ctx": null,
              "_testId": "urn:uuid:6433f7e7-fa48-45e7-800b-afcf7496d050",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          // TODO: implement test\n          this.skip();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "aqW1arv6k7QtBaoitRhOL",
              "ctx": null,
              "_testId": "urn:uuid:7a58aef4-707e-4a30-953b-594001879bff",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiableCredential.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.`;\n          // TODO: implement test\n          this.skip();\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "MNUbUL51az1NvGz9ZLkAO",
              "ctx": null,
              "_testId": "urn:uuid:d94fadc6-d2cb-462d-b8a1-ea3ae934cc6c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type value of the object MUST be EnvelopedVerifiableCredential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-credentials:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiableCredential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        }
      ]
    },
    {
      "title": "VP - Enveloped Verifiable Presentations",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "3Gw2rs4GX70Tkky8AVqvH",
              "ctx": null,
              "_testId": "urn:uuid:6c240c9f-a405-474b-b89f-bc94993934a6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "3Gw2rs4GX70Tkky8AVqvH",
              "ctx": null,
              "_testId": "urn:uuid:afe94d93-c3dc-4310-9636-961961f81395",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "3Gw2rs4GX70Tkky8AVqvH",
              "ctx": null,
              "_testId": "urn:uuid:3cd84e23-34d5-4da1-9f7b-09d9e6f5cef7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "3Gw2rs4GX70Tkky8AVqvH",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "TXoB7qVHL3a6xRwqIVcXB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:266ac83f-7547-4629-aefe-607288f38684"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YegG4GS1bPw_EpFpFuyRu",
              "ctx": null,
              "_testId": "urn:uuid:6d4858da-b0fd-45a3-8adc-84100e5580ce",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YegG4GS1bPw_EpFpFuyRu",
              "ctx": null,
              "_testId": "urn:uuid:17b1ed58-4a49-4887-910e-9a8a7817164f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YegG4GS1bPw_EpFpFuyRu",
              "ctx": null,
              "_testId": "urn:uuid:7c4f8b89-c4b8-406a-ab35-95fbba1e4ff6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YegG4GS1bPw_EpFpFuyRu",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "TXoB7qVHL3a6xRwqIVcXB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:bf05361c-ae20-4e5c-b435-3a8e528f6d31"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sByk9MbVjCxAFZmAnsqxW",
              "ctx": null,
              "_testId": "urn:uuid:8840df2e-93a8-4fd4-a367-ff7c2711234a",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sByk9MbVjCxAFZmAnsqxW",
              "ctx": null,
              "_testId": "urn:uuid:942e1a33-a80b-412c-bb9c-6f3abcf71874",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sByk9MbVjCxAFZmAnsqxW",
              "ctx": null,
              "_testId": "urn:uuid:9f3b483c-2ff8-4518-b8a4-802ab69b7488",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sByk9MbVjCxAFZmAnsqxW",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "TXoB7qVHL3a6xRwqIVcXB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:2eb4196f-e398-4032-94f3-4df1605101f9"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "9ePr9KEmpMXIGFAyHPv0_",
              "ctx": null,
              "_testId": "urn:uuid:1da91a45-e425-442a-bc3c-112148f3f890",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "9ePr9KEmpMXIGFAyHPv0_",
              "ctx": null,
              "_testId": "urn:uuid:4ee57962-9fcf-4d4e-9a9a-7cf878f3fbf9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "9ePr9KEmpMXIGFAyHPv0_",
              "ctx": null,
              "_testId": "urn:uuid:954b75ef-4902-4c74-8503-2dc9a0bb602d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9ePr9KEmpMXIGFAyHPv0_",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "TXoB7qVHL3a6xRwqIVcXB",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:8b4deb78-7102-463e-aceb-01a12bf2d629"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:247e8411-5d8b-406a-879a-75ca935100c9",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
          "cells": [
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "3Gw2rs4GX70Tkky8AVqvH",
              "ctx": null,
              "_testId": "urn:uuid:6c240c9f-a405-474b-b89f-bc94993934a6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YegG4GS1bPw_EpFpFuyRu",
              "ctx": null,
              "_testId": "urn:uuid:6d4858da-b0fd-45a3-8adc-84100e5580ce",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sByk9MbVjCxAFZmAnsqxW",
              "ctx": null,
              "_testId": "urn:uuid:8840df2e-93a8-4fd4-a367-ff7c2711234a",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "9ePr9KEmpMXIGFAyHPv0_",
              "ctx": null,
              "_testId": "urn:uuid:1da91a45-e425-442a-bc3c-112148f3f890",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The @context property of the object MUST be present and include a context, such as the base context for this specification, that defines at least the id, type, and EnvelopedVerifiablePresentation terms as defined by the base context provided by this specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20%40context%20property%20of%20the%20object%20MUST%20be%20present%20and%20include%20a%20context%2C%20such%20as%20the%20base%20context%20for%20this%20specification%2C%20that%20defines%20at%20least%20the%20id%2C%20type%2C%20and%20EnvelopedVerifiablePresentation%20terms%20as%20defined%20by%20the%20base%20context%20provided%20by%20this%20specification.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        },
        {
          "id": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
          "cells": [
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "3Gw2rs4GX70Tkky8AVqvH",
              "ctx": null,
              "_testId": "urn:uuid:afe94d93-c3dc-4310-9636-961961f81395",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YegG4GS1bPw_EpFpFuyRu",
              "ctx": null,
              "_testId": "urn:uuid:17b1ed58-4a49-4887-910e-9a8a7817164f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sByk9MbVjCxAFZmAnsqxW",
              "ctx": null,
              "_testId": "urn:uuid:942e1a33-a80b-412c-bb9c-6f3abcf71874",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE].",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "9ePr9KEmpMXIGFAyHPv0_",
              "ctx": null,
              "_testId": "urn:uuid:4ee57962-9fcf-4d4e-9a9a-7cf878f3fbf9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The id value of the object MUST be a data: URL [RFC2397] that expresses a secured verifiable presentation using an enveloping securing mechanism, such as Securing Verifiable Credentials using JOSE and COSE [VC-JOSE-COSE]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20id%20value%20of%20the%20object%20MUST%20be%20a%20data%3A%20URL%20%5BRFC2397%5D%20that%20expresses%20a%20secured%20verifiable%20presentation%20using%20an%20enveloping%20securing%20mechanism%2C%20such%20as%20Securing%20Verifiable%20Credentials%20using%20JOSE%20and%20COSE%20%5BVC%2DJOSE%2DCOSE%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        },
        {
          "id": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
          "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
          "cells": [
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "3Gw2rs4GX70Tkky8AVqvH",
              "ctx": null,
              "_testId": "urn:uuid:3cd84e23-34d5-4da1-9f7b-09d9e6f5cef7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "YegG4GS1bPw_EpFpFuyRu",
              "ctx": null,
              "_testId": "urn:uuid:7c4f8b89-c4b8-406a-ab35-95fbba1e4ff6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64307,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sByk9MbVjCxAFZmAnsqxW",
              "ctx": null,
              "_testId": "urn:uuid:9f3b483c-2ff8-4518-b8a4-802ab69b7488",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "The type value of the object MUST be EnvelopedVerifiablePresentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "9ePr9KEmpMXIGFAyHPv0_",
              "ctx": null,
              "_testId": "urn:uuid:954b75ef-4902-4c74-8503-2dc9a0bb602d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type value of the object MUST be EnvelopedVerifiablePresentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#enveloped-verifiable-presentations:~:text=The%20type%20value%20of%20the%20object%20MUST%20be%20EnvelopedVerifiablePresentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        }
      ]
    },
    {
      "title": "VP - Presentations Including Holder Claims",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "ViHiPnUFq_WxS2yYhN88U",
              "ctx": null,
              "_testId": "urn:uuid:487316a2-d725-41fc-bfc6-f7c9cda2e463",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "ViHiPnUFq_WxS2yYhN88U",
              "ctx": null,
              "_testId": "urn:uuid:00f43d8b-483c-4c7e-bff8-b110f7a0d122",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ViHiPnUFq_WxS2yYhN88U",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GDvuQkpJ9MJXoKBdL3ILj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:252f1b31-6d9b-4eaf-bb03-6c3c078c46ff"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Y2Gzc8lszGGTJqfApwioH",
              "ctx": null,
              "_testId": "urn:uuid:6a8f93ac-c9eb-4c17-a019-07d85dfbb5da",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Y2Gzc8lszGGTJqfApwioH",
              "ctx": null,
              "_testId": "urn:uuid:4b5a7b38-ebe0-4e88-914f-3308bf19ae71",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Y2Gzc8lszGGTJqfApwioH",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GDvuQkpJ9MJXoKBdL3ILj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:a6567ff7-0dfe-48c0-9d3b-fd0bb18231d2"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sG_0UwTI72UX5nM544Lqv",
              "ctx": null,
              "_testId": "urn:uuid:e7a0682a-5d5b-4507-abfe-de46005f6615",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sG_0UwTI72UX5nM544Lqv",
              "ctx": null,
              "_testId": "urn:uuid:28ebad67-7fb9-440b-89e1-bc0d5ba2dbcc",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sG_0UwTI72UX5nM544Lqv",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GDvuQkpJ9MJXoKBdL3ILj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:323eafed-d69c-43dd-bda7-894be58084cc"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "8mOvSTk0fNKQpn3MfMy1I",
              "ctx": null,
              "_testId": "urn:uuid:2b91207e-65b4-451a-8c05-fc23fa4554fb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "8mOvSTk0fNKQpn3MfMy1I",
              "ctx": null,
              "_testId": "urn:uuid:1f15f2de-ebf7-4e72-8bff-1f1a048d9909",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8mOvSTk0fNKQpn3MfMy1I",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "GDvuQkpJ9MJXoKBdL3ILj",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:bcef1fa2-684d-4054-89d9-1969c262cac9"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:b6874ad6-e4f8-4f5d-9ea8-3e86222e0aed",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
          "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
          "cells": [
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "ViHiPnUFq_WxS2yYhN88U",
              "ctx": null,
              "_testId": "urn:uuid:487316a2-d725-41fc-bfc6-f7c9cda2e463",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Y2Gzc8lszGGTJqfApwioH",
              "ctx": null,
              "_testId": "urn:uuid:6a8f93ac-c9eb-4c17-a019-07d85dfbb5da",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sG_0UwTI72UX5nM544Lqv",
              "ctx": null,
              "_testId": "urn:uuid:e7a0682a-5d5b-4507-abfe-de46005f6615",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "8mOvSTk0fNKQpn3MfMy1I",
              "ctx": null,
              "_testId": "urn:uuid:2b91207e-65b4-451a-8c05-fc23fa4554fb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verifiable presentation that includes a self-asserted verifiable credential that is only secured using the same mechanism as the verifiable presentation MUST include a holder property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=A%20verifiable%20presentation%20that%20includes%20a%20self%2Dasserted%20verifiable%20credential%20that%20is%20only%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%20MUST%20include%20a%20holder%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        },
        {
          "id": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
          "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
          "cells": [
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "ViHiPnUFq_WxS2yYhN88U",
              "ctx": null,
              "_testId": "urn:uuid:00f43d8b-483c-4c7e-bff8-b110f7a0d122",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Y2Gzc8lszGGTJqfApwioH",
              "ctx": null,
              "_testId": "urn:uuid:4b5a7b38-ebe0-4e88-914f-3308bf19ae71",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "sG_0UwTI72UX5nM544Lqv",
              "ctx": null,
              "_testId": "urn:uuid:28ebad67-7fb9-440b-89e1-bc0d5ba2dbcc",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            },
            {
              "type": "test",
              "title": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.`;\n        // TODO: implement test\n        this.skip();\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": true,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "8mOvSTk0fNKQpn3MfMy1I",
              "ctx": null,
              "_testId": "urn:uuid:1f15f2de-ebf7-4e72-8bff-1f1a048d9909",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When a self-asserted verifiable credential is secured using the same mechanism as the verifiable presentation, the value of the issuer property of the verifiable credential MUST be identical to the holder property of the verifiable presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#presentations-including-holder-claims:~:text=When%20a%20self%2Dasserted%20verifiable%20credential%20is%20secured%20using%20the%20same%20mechanism%20as%20the%20verifiable%20presentation%2C%20the%20value%20of%20the%20issuer%20property%20of%20the%20verifiable%20credential%20MUST%20be%20identical%20to%20the%20holder%20property%20of%20the%20verifiable%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64309,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "pending"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Schemas",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "409SiX0CXVIGHRbniRVOp",
              "ctx": null,
              "_testId": "urn:uuid:371a5b76-67c5-4fbf-b127-3f44a0dca2a8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 683,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "409SiX0CXVIGHRbniRVOp",
              "ctx": null,
              "_testId": "urn:uuid:37dd3c17-f335-48f7-9226-3c85a2e893b2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 295,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "409SiX0CXVIGHRbniRVOp",
              "ctx": null,
              "_testId": "urn:uuid:d225d15a-293c-43e4-a16a-188d90f883c6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 302,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "409SiX0CXVIGHRbniRVOp",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "E6_rN68LE7xa81Ke3XF-d",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:45c898ad-e262-431e-9340-63c4f85e0396"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "lW1YVXd0pOMp2IN_M57Os",
              "ctx": null,
              "_testId": "urn:uuid:281c8f62-75f3-4c8d-a2e2-c8f425bfc50e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 383,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "lW1YVXd0pOMp2IN_M57Os",
              "ctx": null,
              "_testId": "urn:uuid:ed42b75f-3c9e-41f0-a44b-bbf1a3ea04be",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 137,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "lW1YVXd0pOMp2IN_M57Os",
              "ctx": null,
              "_testId": "urn:uuid:bd8bef30-faef-460d-a66d-8ceb960afcbb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lW1YVXd0pOMp2IN_M57Os",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "E6_rN68LE7xa81Ke3XF-d",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:662f53fa-82cb-4004-a746-dce375a2ccaa"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Dp4GqId6WGDpxGscJrYtK",
              "ctx": null,
              "_testId": "urn:uuid:2172488d-2b98-4474-8592-aee0ee96e47a",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Dp4GqId6WGDpxGscJrYtK",
              "ctx": null,
              "_testId": "urn:uuid:25377b18-f0fc-42c6-bed7-d858f241d284",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66484,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 227,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Dp4GqId6WGDpxGscJrYtK",
              "ctx": null,
              "_testId": "urn:uuid:f816e408-5f7b-4170-81af-4af53bcc2889",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Dp4GqId6WGDpxGscJrYtK",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "E6_rN68LE7xa81Ke3XF-d",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:e65eca27-8ea5-4b2a-b035-faefee305a0c"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zF31MJbqV-tIgEkwuPLN0",
              "ctx": null,
              "_testId": "urn:uuid:e8e18aa3-56f5-41e5-a2c9-0f547b89c28d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66815,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zF31MJbqV-tIgEkwuPLN0",
              "ctx": null,
              "_testId": "urn:uuid:52866322-7034-4136-b61f-a99c3424b565",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 266,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zF31MJbqV-tIgEkwuPLN0",
              "ctx": null,
              "_testId": "urn:uuid:6016082a-a070-48a0-a333-99fd8531c61a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zF31MJbqV-tIgEkwuPLN0",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "E6_rN68LE7xa81Ke3XF-d",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:93d0cfc7-a4b0-4a40-8e92-66f3237b252d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:aa4efea0-a152-4828-8ff0-44410f9ab330",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
          "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
          "cells": [
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "409SiX0CXVIGHRbniRVOp",
              "ctx": null,
              "_testId": "urn:uuid:371a5b76-67c5-4fbf-b127-3f44a0dca2a8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 683,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "lW1YVXd0pOMp2IN_M57Os",
              "ctx": null,
              "_testId": "urn:uuid:281c8f62-75f3-4c8d-a2e2-c8f425bfc50e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 383,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Dp4GqId6WGDpxGscJrYtK",
              "ctx": null,
              "_testId": "urn:uuid:2172488d-2b98-4474-8592-aee0ee96e47a",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s).",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).`;\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schema-ok.json')),\n        'Failed to accept a VC containing a valid `credentialSchema`.');\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zF31MJbqV-tIgEkwuPLN0",
              "ctx": null,
              "_testId": "urn:uuid:e8e18aa3-56f5-41e5-a2c9-0f547b89c28d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine whether the provided data conforms to the provided schema(s)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=The%20value%20of%20the%20credentialSchema%20property%20MUST%20be%20one%20or%20more%20data%20schemas%20that%20provide%20verifiers%20with%20enough%20information%20to%20determine%20whether%20the%20provided%20data%20conforms%20to%20the%20provided%20schema(s).",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66815,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
          "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
          "cells": [
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "409SiX0CXVIGHRbniRVOp",
              "ctx": null,
              "_testId": "urn:uuid:37dd3c17-f335-48f7-9226-3c85a2e893b2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 295,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "lW1YVXd0pOMp2IN_M57Os",
              "ctx": null,
              "_testId": "urn:uuid:ed42b75f-3c9e-41f0-a44b-bbf1a3ea04be",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 137,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Dp4GqId6WGDpxGscJrYtK",
              "ctx": null,
              "_testId": "urn:uuid:25377b18-f0fc-42c6-bed7-d858f241d284",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66484,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 227,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-type-fail.json')),\n        'Failed to reject `credentialSchema` without a `type`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-no-id-fail.json')),\n        'Failed to reject `credentialSchema` without an `id`.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-schema-non-url-id-fail.json')),\n        'Failed to reject `credentialSchema` with a numerid `id`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zF31MJbqV-tIgEkwuPLN0",
              "ctx": null,
              "_testId": "urn:uuid:52866322-7034-4136-b61f-a99c3424b565",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each credentialSchema MUST specify its type (for example, JsonSchema), and an id property that MUST be a URL identifying the schema file."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=Each%20credentialSchema%20MUST%20specify%20its%20type%20(for%20example%2C%20JsonSchema)%2C%20and%20an%20id%20property%20that%20MUST%20be%20a%20URL%20identifying%20the%20schema%20file.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 266,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
          "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
          "cells": [
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "409SiX0CXVIGHRbniRVOp",
              "ctx": null,
              "_testId": "urn:uuid:d225d15a-293c-43e4-a16a-188d90f883c6",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 302,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "lW1YVXd0pOMp2IN_M57Os",
              "ctx": null,
              "_testId": "urn:uuid:bd8bef30-faef-460d-a66d-8ceb960afcbb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Dp4GqId6WGDpxGscJrYtK",
              "ctx": null,
              "_testId": "urn:uuid:f816e408-5f7b-4170-81af-4af53bcc2889",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.`;\n        // TODO: this doesn't really test the above statement...\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-schemas-ok.json')),\n        'Failed to accept a VC containing multiple valid `credentialSchema`.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "zF31MJbqV-tIgEkwuPLN0",
              "ctx": null,
              "_testId": "urn:uuid:6016082a-a070-48a0-a333-99fd8531c61a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If multiple schemas are present, validity is determined according to the processing rules outlined by each associated credentialSchema type property."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=If%20multiple%20schemas%20are%20present%2C%20validity%20is%20determined%20according%20to%20the%20processing%20rules%20outlined%20by%20each%20associated%20credentialSchema%20type%20property.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Advanced Concepts",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:784f8929-9602-4c2a-8218-ec002b3a7312",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67373,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:0add061c-9496-4020-8d11-8d85498eeaa0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67583,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1002,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:078eb594-17b6-45a6-a4e2-f0946e6f716d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:58ac1b91-8fca-40e0-afd7-d049c9527222",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 201,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:c1c84a80-83e9-48fb-a387-8b5e7e5541ff",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 190,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:eff0f9dc-139f-4de8-b57b-b411ea1c20a2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 320,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"apicatalog.com\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R6YZZcQgyEoLz0F6cQMdl",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:20f65294-7f2c-4aa2-901c-2512259c2a30"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:9f25ca37-fa5c-4bf6-9ce9-7e641d4fbb9f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:00694ac4-c261-4a84-b17d-af65a59a88a1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69595,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 266,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:52682788-7733-4d81-8736-7687de49972d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69861,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:faf53eb0-1f9e-4630-9bd5-4b65246472a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:1ff89ded-3466-4386-98cb-81a80edd3651",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 250,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:5eb5ac6e-2883-45f2-a988-c2ab48eac1da",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 137,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Digital Bazaar\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R6YZZcQgyEoLz0F6cQMdl",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:97de8e8a-572c-48d8-ba55-d4c70b25a7ab"
        },
        {
          "title": "Open Security and Identity",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:4b21ecec-93d5-4dd5-9857-015235673d9c",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:fb99b5f2-8746-4566-87b5-6a4b2dda28e9",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70722,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:39b28e25-6535-435d-b44e-77754d3206d2",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70920,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:fa8b059f-6995-4fef-aac2-1bfea62d0d62",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:d9b9cf21-37d5-4b7d-9f8c-8b47582b9410",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:a17f6d8a-084c-4d0d-b1cc-43066c2846bb",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"Open Security and Identity\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R6YZZcQgyEoLz0F6cQMdl",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:d6d272b8-82f5-4fe0-9542-c39185a2ad2e"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:fb18b532-2431-459e-91d7-97b0e2583033",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:5ce37961-8745-4fbc-b395-0b22fa46ca35",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71569,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:90ad4041-ac71-4428-8420-b0074f7c7cca",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:9d2b90e9-3ac4-48d0-b728-d34b64934782",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71847,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:0605defc-4f51-4687-b4fc-0ff34e0ebed7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:311571e4-eedc-4945-927d-2367c191d617",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72160,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: addPerTestMetadata in \"SpruceID\"",
              "body": "function addPerTestMetadata() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "originalTitle": "\"before each\" hook: addPerTestMetadata",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "R6YZZcQgyEoLz0F6cQMdl",
          "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
          "_testId": "urn:uuid:8a54c15a-414c-4aeb-b8bd-9a5bb9e6cdd0"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lF-WaZwyBKYwsFBGSLwRP",
      "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:f6ec7c50-6789-4e0b-a941-254def21001d",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Open Security and Identity",
        "SpruceID"
      ],
      "rows": [
        {
          "id": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
          "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
          "cells": [
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:784f8929-9602-4c2a-8218-ec002b3a7312",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67373,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:9f25ca37-fa5c-4bf6-9ce9-7e641d4fbb9f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:4b21ecec-93d5-4dd5-9857-015235673d9c",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.`;\n        // This depends on \"@protected\" (which is used for the base context).\n        // FIXME: the fixture below would also fail for missing\n        // `credentialSchema.type`\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type-fail.json')),\n        'Failed to reject a VC which redefines the `VerifiableCredential` ' +\n        'type.');\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-redef-type2-fail.json')),\n        'Failed to reject a VC containing a redefiled protected term.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:fb18b532-2431-459e-91d7-97b0e2583033",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "JSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#data-schemas:~:text=When%20processing%20the%20active%20context%20defined%20by%20the%20base%20JSON%2DLD%20Context%20document%20defined%20in%20this%20specification%2C%20compliant%20JSON%2DLD%2Dbased%20processors%20produce%20an%20error%20when%20a%20JSON%2DLD%20context%20redefines%20any%20term.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
          "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:0add061c-9496-4020-8d11-8d85498eeaa0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67583,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1002,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:00694ac4-c261-4a84-b17d-af65a59a88a1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69595,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 266,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:fb99b5f2-8746-4566-87b5-6a4b2dda28e9",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70722,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.`;\n        // TODO: given that these `refreshService` values are fake...they do\n        // not test the \"provides enough information to...refresh\"\n        // TODO: these can only be meaningfully tested on issued credentials\n        // that provide *real* `refreshService` values (which will require\n        // opt-in in test suite implementation configuration)\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refresh-ok.json')));\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-refreshs-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:5ce37961-8745-4fbc-b395-0b22fa46ca35",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20refreshService%20property%20MUST%20be%20one%20or%20more%20refresh%20services%20that%20provides%20enough%20information%20to%20the%20recipient%27s%20software%20such%20that%20the%20recipient%20can%20refresh%20the%20verifiable%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71569,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each refreshService value MUST specify its type.",
          "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
          "cells": [
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:078eb594-17b6-45a6-a4e2-f0946e6f716d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:52682788-7733-4d81-8736-7687de49972d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69861,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:39b28e25-6535-435d-b44e-77754d3206d2",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70920,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each refreshService value MUST specify its type.",
              "body": "async function() {\n          this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.`;\n          // TODO: like the above, this does not test the statement, only that\n          // an issuer will fail on someone else's provided and broken\n          // `refreshService` value\n          await assert.rejects(endpoints.issue(require(\n            './input/credential-refresh-no-type-fail.json')));\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:90ad4041-ac71-4428-8420-b0074f7c7cca",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each refreshService value MUST specify its type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20refreshService%20value%20MUST%20specify%20its%20type.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
          "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:58ac1b91-8fca-40e0-afd7-d049c9527222",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 201,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:faf53eb0-1f9e-4630-9bd5-4b65246472a5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:fa8b059f-6995-4fef-aac2-1bfea62d0d62",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.`;\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuses-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:9d2b90e9-3ac4-48d0-b728-d34b64934782",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=The%20value%20of%20the%20termsOfUse%20property%20MUST%20specify%20one%20or%20more%20terms%20of%20use%20policies%20under%20which%20the%20creator%20issued%20the%20credential%20or%20presentation.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71847,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
          "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
          "cells": [
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:c1c84a80-83e9-48fb-a387-8b5e7e5541ff",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68901,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 190,
              "state": "failed",
              "err": {
                "generatedMessage": false,
                "code": "ERR_ASSERTION",
                "operator": "rejects"
              }
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:1ff89ded-3466-4386-98cb-81a80edd3651",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70142,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 250,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:d9b9cf21-37d5-4b7d-9f8c-8b47582b9410",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 193,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.`;\n        await assert.rejects(endpoints.issue(require(\n          './input/credential-termsofuse-no-type-fail.json')));\n        await assert.doesNotReject(endpoints.issue(require(\n          './input/credential-termsofuse-id-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:0605defc-4f51-4687-b4fc-0ff34e0ebed7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#terms-of-use:~:text=Each%20termsOfUse%20value%20MUST%20specify%20its%20type%2C%20for%20example%2C%20IssuerPolicy%2C%20and%20MAY%20specify%20its%20instance%20id.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
          "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "FWue0HVPNWlryjzDpOS_R",
              "ctx": null,
              "_testId": "urn:uuid:eff0f9dc-139f-4de8-b57b-b411ea1c20a2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69091,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 320,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "dduxzfrEoHSmPd2qnu9zB",
              "ctx": null,
              "_testId": "urn:uuid:5eb5ac6e-2883-45f2-a988-c2ab48eac1da",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 137,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "W-QSvkkrjX-QavfS_hedX",
              "ctx": null,
              "_testId": "urn:uuid:a17f6d8a-084c-4d0d-b1cc-43066c2846bb",
              "cell": {
                "columnId": "Open Security and Identity",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71288,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
              "body": "async function() {\n        this.test.link = `https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.`;\n        // TODO: this does not test the statement above, only that `evidence`\n        // can exist on an issued credential.\n        await assert.doesNotReject(endpoints.issue(\n          require('./input/credential-evidences-ok.json')));\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-data-model-2.0-test-suite/vc-data-model-2.0-test-suite/tests/10-vcdm2.js",
              "parent": "Z83V9Ee3CrEK2jP90XrGc",
              "ctx": null,
              "_testId": "urn:uuid:311571e4-eedc-4945-927d-2367c191d617",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-model/#evidence:~:text=The%20value%20of%20the%20evidence%20property%20MUST%20be%20one%20or%20more%20evidence%20schemes%20providing%20enough%20information%20for%20a%20verifier%20to%20determine%20whether%20the%20evidence%20gathered%20by%20the%20issuer%20meets%20its%20confidence%20requirements%20for%20relying%20on%20the%20credential.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72160,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "shortName": "vc2.0-test-suite",
    "group": "vc",
    "specStatus": "base",
    "subtitle": "Verifiable Credentials Data Model v2.0 Interoperability Report",
    "github": "https://github.com/w3c/vc-data-model-2.0-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-data-model-2.0-test-suite/",
    "doJsonLd": true,
    "includePermalinks": false,
    "otherLinks": [
      {
        "key": "Related Specifications",
        "data": [
          {
            "value": "The Verifiable Credentials Data Model v2.0",
            "href": "https://www.w3.org/TR/vc-data-model-2.0/"
          }
        ]
      }
    ],
    "editors": [
      {
        "name": "Charles E. Lehner",
        "url": "https://www.w3.org/wiki/User:Cel"
      },
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Charles E. Lehner",
        "url": "https://www.w3.org/wiki/User:Cel"
      },
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "VC v2.0 Interoperability Report",
  "stats": [
    "Tests passed 148/180 82%",
    "Tests failed 32/180 18%",
    "Failures 32",
    "Tests skipped 52",
    "Total tests 232"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}